// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// TenantDao is the data access object for table tenant.
type TenantDao struct {
	table   string        // table is the underlying table name of the DAO.
	group   string        // group is the database configuration group name of current DAO.
	columns TenantColumns // columns contains all the column names of Table for convenient usage.
}

// TenantColumns defines and stores column names for table tenant.
type TenantColumns struct {
	Id           string //
	Name         string //
	Domain       string //
	ContactName  string //
	ContactEmail string //
	ContactPhone string //
	Status       string //
	CreateAt     string //
	UpdateAt     string //
}

// tenantColumns holds the columns for table tenant.
var tenantColumns = TenantColumns{
	Id:           "id",
	Name:         "name",
	Domain:       "domain",
	ContactName:  "contact_name",
	ContactEmail: "contact_email",
	ContactPhone: "contact_phone",
	Status:       "status",
	CreateAt:     "create_at",
	UpdateAt:     "update_at",
}

// NewTenantDao creates and returns a new DAO object for table data access.
func NewTenantDao() *TenantDao {
	return &TenantDao{
		group:   "default",
		table:   "tenant",
		columns: tenantColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *TenantDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *TenantDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *TenantDao) Columns() TenantColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *TenantDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *TenantDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx).Hook(TenantHook)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *TenantDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
