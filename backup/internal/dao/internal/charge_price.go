// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ChargePriceDao is the data access object for table charge_price.
type ChargePriceDao struct {
	table   string             // table is the underlying table name of the DAO.
	group   string             // group is the database configuration group name of current DAO.
	columns ChargePriceColumns // columns contains all the column names of Table for convenient usage.
}

// ChargePriceColumns defines and stores column names for table charge_price.
type ChargePriceColumns struct {
	Id        string //
	TenantId  string //
	StartHour string //
	EndHour   string //
	Price     string //
	CreateAt  string //
	UpdateAt  string //
}

// chargePriceColumns holds the columns for table charge_price.
var chargePriceColumns = ChargePriceColumns{
	Id:        "id",
	TenantId:  "tenant_id",
	StartHour: "start_hour",
	EndHour:   "end_hour",
	Price:     "price",
	CreateAt:  "create_at",
	UpdateAt:  "update_at",
}

// NewChargePriceDao creates and returns a new DAO object for table data access.
func NewChargePriceDao() *ChargePriceDao {
	return &ChargePriceDao{
		group:   "default",
		table:   "charge_price",
		columns: chargePriceColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ChargePriceDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ChargePriceDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ChargePriceDao) Columns() ChargePriceColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ChargePriceDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ChargePriceDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx).Hook(TenantHook)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ChargePriceDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
