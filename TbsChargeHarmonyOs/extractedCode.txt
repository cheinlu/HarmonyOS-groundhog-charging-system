{
  "files": [
    "**/*.ets"
  ],
  "ignore": [
    "**/src/ohosTest/**/*",
    "**/src/test/**/*",
    "**/src/mock/**/*",
    "**/node_modules/**/*",
    "**/oh_modules/**/*",
    "**/build/**/*",
    "**/.preview/**/*"
  ],
  "ruleSet": [
    "plugin:@performance/recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "rules": {
    "@security/no-unsafe-aes": "error",
    "@security/no-unsafe-hash": "error",
    "@security/no-unsafe-mac": "warn",
    "@security/no-unsafe-dh": "error",
    "@security/no-unsafe-dsa": "error",
    "@security/no-unsafe-ecdsa": "error",
    "@security/no-unsafe-rsa-encrypt": "error",
    "@security/no-unsafe-rsa-sign": "error",
    "@security/no-unsafe-rsa-key": "error",
    "@security/no-unsafe-dsa-key": "error",
    "@security/no-unsafe-dh-key": "error",
    "@security/no-unsafe-3des": "error"
  }
}
import { StyleConst } from "@tbs/common"
import UserCenterConst from "@tbs/common/src/main/ets/manager/UserCenterConst"
import { orderOrServiceList, panelData, panelList, UserInfoData } from "../model/MineModel"
import { router } from "@kit.ArkUI"
import '@tbs/charge/src/main/ets/page/ChargeOrderPage'
@Component
export struct MineContentView {
  userInfoData: UserInfoData | null = UserCenterConst.getUserInfoData()
  //局部公共样式函数
  @Styles
  userPageSty(){
    .width(StyleConst.PERCENT_95)
    .padding($r('app.float.size_10'))
    .borderRadius($r('app.float.size_10'))
    .backgroundColor($r('app.color.color_fff'))
  }
  build() {
    Column({ space: 10 }) {
      //1.充电余额
      Column({ space: 6 }) {
        if (this.userInfoData?.balance) {
          Text(`${this.userInfoData?.balance.toFixed(2)}元`)
        }
        Row() {
          Text('充电余额')
          Text('>')
        }
      }
      .margin({ top: -20 })
      .alignItems(HorizontalAlign.Start)
      .userPageSty()
      //2.充电订单
      Row({ space: 10 }) {
        ForEach(orderOrServiceList, (item: panelData) => {
          Column() {
            Image(item.image)
              .width($r('app.float.size_45'))
            Text(item.name)
          }.onClick(() => {
            if(item.type == 1){
              router.pushNamedRoute({
                name:'ChargeOrderPage'
              })
            }
          })
        })
      }
      .justifyContent(FlexAlign.SpaceAround)
      .userPageSty()
      //3.用户协议
      Flex({ wrap: FlexWrap.Wrap, alignContent: FlexAlign.SpaceAround }) {
        ForEach(panelList, (item: panelData) => {
          Column({ space: 4 }) {
            Image(item.image).width($r('app.float.size_30'))
            Text(item.name)
          }.width(StyleConst.PERCENT_25).margin({bottom:$r('app.float.size_10')})
        })
      }
      .width(StyleConst.PERCENT_95)
      .padding({top:$r('app.float.size_10'),left:$r('app.float.size_10'),right:$r('app.float.size_10')})
      .borderRadius($r('app.float.size_10'))
      .backgroundColor($r('app.color.color_fff'))
      //4.退出登录
      Row() {
        Text('退出登录').margin({left:$r('app.float.size_10')})
        Image($r('app.media.icon_arrow_right')).width($r('app.float.size_20')).fillColor(Color.Black)
      }
      .justifyContent(FlexAlign.SpaceBetween)
      .userPageSty()
      .padding({top:$r('app.float.size_20'),bottom:$r('app.float.size_20')})
      .onClick(() => {
      })
    }
  }
}
import { ScreenUtils, StyleConst } from "@tbs/common"
import { UserInfoData } from "../model/MineModel"
import UserCenterConst from '@tbs/common/src/main/ets/manager/UserCenterConst'
@Component
export struct MineHeaderView {
  userInfoData: UserInfoData | null = UserCenterConst.getUserInfoData()
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight()).backgroundColor($r('app.color.color_0aa671'))
      Image($r('app.media.Groundhog')).width($r('app.float.size_60')).borderRadius($r('app.float.size_50'))
      Text(this.userInfoData?.username).fontColor(Color.White)
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.PERCENT_20)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
export class UserInfoData {
  id?: number
  username?: string
  nickname?: string
  balance?: number
  avatarUrl?: string
}
export class panelData {
  type?: number
  name?: ResourceStr
  image?: ResourceStr
}
export const panelList: Array<panelData> = [
  { name: $r('app.string.agreement'), image: $r('app.media.agreement') },
  { name: $r('app.string.certification'), image: $r('app.media.certification') },
  { name: $r('app.string.feat'), image: $r('app.media.feat') },
  { name: $r('app.string.message'), image: $r('app.media.message') },
  { name: $r('app.string.person'), image: $r('app.media.person') },
  { name: $r('app.string.rule'), image: $r('app.media.rule') }
]
export const orderOrServiceList: Array<panelData> = [
  { type: 1, name: $r('app.string.order'), image: $r('app.media.order') },
  { type: 2, name: $r('app.string.service'), image: $r('app.media.service') }
]
import { commonStorage, StorageConst, StyleConst } from "@tbs/common";
import UserCenterConst from "@tbs/common/src/main/ets/manager/UserCenterConst";
import { UserInfoData } from "../model/MineModel";
import { MineContentView } from "../view/MineContentView";
import { MineHeaderView } from "../view/MineHeaderView";
@Component
export struct MinePage {
  build() {
    Column() {
      //1.头部
      MineHeaderView()
      //2.主体
      MineContentView()
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_efefef'))
  }
}
{
  "module": {
    "name": "mine",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
{
  "float": [
    {
      "name": "page_text_font_size",
      "value": "50fp"
    }
  ]
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    }
  ]
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
{
  "module": {
    "name": "mine_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "mine",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/mine",
		"installationFree": false
	}
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
export { MinePage } from './src/main/ets/page/MinePage';
{
  "name": "@tbs/mine",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {
    "@tbs/common": "file:../../common",
    "@tbs/charge": "file:../charge"
  }
}
{
  "meta": {
    "stableOrder": true
  },
  "lockfileVersion": 3,
  "ATTENTION": "THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.",
  "specifiers": {
    "@tbs/charge@../charge": "@tbs/charge@../charge",
    "@tbs/common@../../common": "@tbs/common@../../common"
  },
  "packages": {
    "@tbs/charge@../charge": {
      "name": "@tbs/charge",
      "version": "1.0.0",
      "resolved": "../charge",
      "registryType": "local",
      "dependencies": {
        "@tbs/common": "file:../../common"
      }
    },
    "@tbs/common@../../common": {
      "name": "@tbs/common",
      "version": "1.0.0",
      "resolved": "../../common",
      "registryType": "local"
    }
  }
}
export * from './ShowToast'
export * from './BottomPop'
import { StyleConst } from "../common";
import { ScreenUtils, WindowModel,ComponentUtils } from "../utils";
@CustomDialog
@Component
export struct BottomPop {
  controller: CustomDialogController;
  title: ResourceStr = '';
  titlePadding: Padding = { top: $r('app.float.size_16'), bottom: $r('app.float.size_16') }
  titleFontSize: ResourceStr = $r('app.float.size_text_16')
  titleTextColor: ResourceColor = Color.Black
  titleBgColor: ResourceColor = Color.Transparent
  contentBgColor: ResourceColor = Color.Transparent
  bgColor?: ResourceColor = Color.White
  // 软键盘是否显示
  @State keyBoardVisible: boolean = false
  keyboardAvoidMode: KeyboardAvoidMode = KeyboardAvoidMode.DEFAULT
  minHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.3 // 弹窗最低高度
  maxHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.8 // 弹窗最大高度
  @State dialogMaxHeight: number = 0 // 通过 maxHeight 计算出来的内容的高度
  @Builder
  child() {
  };
  @BuilderParam childBuilderParam: () => void = this.child;
  aboutToAppear(): void {
    if (this.isKeyboardAvoidNone()) {
      this.getKeyBoardVisible()
    }
    this.getTitleHeight()
  }
  // 软键盘是否拉起
  getKeyBoardVisible() {
    WindowModel.getInstance().getKeyBoardVisible((visible) => {
      this.keyBoardVisible = visible
    })
  }
  // 弹窗是否在拉起软键盘时进行自动避让
  isKeyboardAvoidNone() {
    return this.keyboardAvoidMode === KeyboardAvoidMode.NONE // 弹窗不避让软键盘
  }
  getTitleHeight() {
    ComponentUtils.getComponentHeightSync('BottomPop_title', (componentHeight) => {
      const safeBottomHeight = ScreenUtils.getInstance().getSafeBottomHeight() // 底部安全区高度
      // 内容最大高度 = 屏幕80%高度 - title高度 - 底部安全区高度
      this.dialogMaxHeight = Number(this.maxHeight) - componentHeight - safeBottomHeight
    })
  }
  build() {
    Stack({ alignContent: Alignment.TopEnd }) {
      Column() {
        Text(this.title)
          .padding(this.titlePadding)
          .fontColor(this.titleTextColor)
          .fontSize(this.titleFontSize)
          .fontWeight(FontWeight.Medium)
          .textAlign(TextAlign.Center)
          .width(StyleConst.FULL_WIDTH)
          .height($r('app.float.size_50'))
          .backgroundColor(this.titleBgColor)
          .id('BottomPop_title')
          .borderRadius({
            topLeft: $r('app.float.size_16'),
            topRight: $r('app.float.size_16')
          })
        Column() {
          this.childBuilderParam()
        }
        .backgroundColor(this.contentBgColor)
        .constraintSize({
          maxHeight: this.dialogMaxHeight,
        })
      }
      .padding({
        bottom: ScreenUtils.getInstance().getSafeBottomHeight(), // 设置padding避开底部安全区
      })
      .width(StyleConst.FULL_WIDTH)
      .backgroundColor(this.bgColor)
      .borderRadius({
        topLeft: $r('app.float.size_16'),
        topRight: $r('app.float.size_16')
      })
      .constraintSize({
        maxHeight: this.maxHeight,
        minHeight: this.minHeight
      })
      Image($r("app.media.common_bottom_sheet_close"))
        .size({ width: $r('app.float.size_20'), height: $r('app.float.size_20') })
        .margin({ top: $r('app.float.size_16'), right: $r('app.float.size_16') })
        .responseRegion({
          x: '-25%',
          y: '-25%',
          width: '150%',
          height: '150%'
        })
        .onClick(() => {
          this.controller.close();
        })
    }
  }
}
import { promptAction } from '@kit.ArkUI'
//轻提示工具类
export const toast = (hintContent: string | ResourceStr, alignment: Alignment = Alignment.Center): void => {
  promptAction.showToast({ message: hintContent, alignment: alignment })
}
export class UserInfoData {
  id?: number
  username?: string
  nickname?: string
  balance?: number
  avatarUrl?: string
}
export class CommonDataSource<T> implements IDataSource {
  private listeners: DataChangeListener[] = [];
  protected items: T[] = []
  public totalCount(): number {
    return this.items.length
  }
  public getData(index: number): T | void {
    return this.items[index]
  };
  public getList(): T[] {
    return this.items
  }
  public clearData() {
    this.items = [];
    this.notifyDataReload()
  }
  public resetData(data: T | T[]) {
    this.items = [];
    if (Array.isArray(data)) {
      this.items.push(...data);
    } else {
      this.items.push(data);
    }
    this.notifyDataReload()
  }
  public setDataArray(data: T[]) {
    this.items = data
    this.notifyDataReload()
  }
  // 向列表追加数据
  public pushData(data: T | T[]): void {
    let fromIndex = this.items.length
    if (Array.isArray(data)) {
      this.items.push(...data)
    } else {
      this.items.push(data)
    }
    this.notifyDatasetAdd(fromIndex, this.items.length - fromIndex)
  }
  public changeItem(index: number) {
    this.notifyDataChange(index)
  }
  public deleteData(index: number): void {
    this.items.splice(index, 1);
    this.notifyDataDelete(index);
  }
  registerDataChangeListener(listener: DataChangeListener): void {
    if (this.listeners.indexOf(listener) < 0) {
      this.listeners.push(listener);
    }
  }
  unregisterDataChangeListener(listener: DataChangeListener): void {
    const pos = this.listeners.indexOf(listener);
    if (pos >= 0) {
      this.listeners.splice(pos, 1);
    }
  }
  notifyDataReload(): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.RELOAD }]);
    });
  }
  notifyDatasetAdd(insertIndex: number, addCount: number): void {
    this.listeners.forEach(listener => {
      listener.onDatasetChange([{ type: DataOperationType.ADD, index: insertIndex, count: addCount }]);
    })
  }
  notifyDataChange(changeIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.CHANGE, index: changeIndex }]);
    });
  }
  notifyDataDelete(deleteIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.DELETE, index: deleteIndex }]);
    });
  }
}
//封装一个函数：简化时间格式
export const formatDate = (dateStr:string)=>{
  const date = new Date(dateStr)
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}
import measure from '@ohos.measure'
export class TextUtil{
  static getTextWidth(textContent: string,
    fontSize: number | string | Resource = $r('app.float.size_text_14'), maxLines: number = 1,
    weight: FontWeight | number = FontWeight.Regular): number {
    if (!textContent || textContent.length === 0) {
      return 0
    }
    const width: number = measure.measureText({
      textContent: textContent,
      fontSize: fontSize,
      fontWeight: weight,
      maxLines: maxLines
    })
    return px2vp(width)
  }
}
export * from './WindowModel'
export * from './GlobalContext'
export * from './TextUtil'
export { ScreenUtils } from './ScreenUtil';
export { initDataPreference, commonStorage } from './StorageUtils'
export * from './ComponentUtils'
export { formatDate } from './formatDate'
import { window } from "@kit.ArkUI";
import { BusinessError } from "@kit.BasicServicesKit";
export class WindowModel {
  private constructor() {
  }
  /**
   * 默认样式
   */
  private readonly DEFAULT: window.SystemBarProperties = {
    statusBarColor: '#00000000',
    navigationBarColor: '#00000000',
    // 以下两个属性从API Version 8开始支持
    statusBarContentColor: '#000000',
    navigationBarContentColor: '#00000000'
  };
  /**
   * WindowModel 单例
   */
  private static instance?: WindowModel;
  /**
   * 获取WindowModel单例实例
   * @returns {WindowModel} WindowModel
   */
  static getInstance(): WindowModel {
    if (!WindowModel.instance) {
      WindowModel.instance = new WindowModel();
    }
    return WindowModel.instance;
  }
  /**
   * 缓存的当前WindowStage实例
   */
  private windowStage?: window.WindowStage;
  /**
   * 缓存windowStage
   * @param windowStage 当前WindowStage实例
   * @returns {void}
   */
  setWindowStage(windowStage: window.WindowStage): void {
    this.windowStage = windowStage;
  }
  getWindowStage(): window.WindowStage | undefined {
    return this.windowStage
  }
  /**
   * 当前主窗口是否开启沉浸模式
   * @param enable 是否开启
   * @returns {void}
   */
  setMainWindowImmersive(enable: boolean, properties?: window.SystemBarProperties): void {
    if (this.windowStage === undefined) {
      console.error('windowStage is undefined.');
      return;
    }
    // 1.获取应用主窗口。
    let windowClass: window.Window | null = null;
    this.windowStage.getMainWindow((err: BusinessError, data) => {
      let errCode: number = err.code;
      if (errCode) {
        console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));
        return;
      }
      windowClass = data;
      console.info('Succeeded in obtaining the main window data.');
      // 2.实现沉浸式效果。方式二：设置窗口为全屏布局，配合设置导航栏、状态栏的透明度、背景/文字颜色及高亮图标等属性，与主窗口显示保持协调一致。
      windowClass.setWindowLayoutFullScreen(enable, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the window layout to full-screen mode.');
      });
      const p = properties ? properties : this.DEFAULT
      windowClass.setWindowSystemBarProperties(p, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the system bar properties.');
      });
    })
  }
  /**
   * 软键盘是否显示/隐藏
   * @param callback
   */
  getKeyBoardVisible(callback: (visible: boolean) => void) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      // 监听软键盘的隐藏和显示
      currentWindow.on('avoidAreaChange', data => {
        if (data.type == window.AvoidAreaType.TYPE_KEYBOARD) {
          const keyBoardHeight = px2vp(data.area.bottomRect.height);
          if (keyBoardHeight > 0) {
            callback(true)
          } else {
            callback(false)
          }
        }
      })
    })
  }
}
import dataPreferences from '@ohos.data.preferences';
import preferences from '@ohos.data.preferences';
import { HashMap } from '@kit.ArkTS';
import { common } from '@kit.AbilityKit';
import { GlobalContext } from './GlobalContext';
import { BusinessError } from '@kit.BasicServicesKit';
class Storage{
  private name: string = 'app_storage'
  private preferences: dataPreferences.Preferences | null = null
  private listenerKeyMap = new HashMap<string, HashMap<string, Callback<string>>>()
  constructor(name: string) {
    this.name = name;
  }
  initStorage() {
    const context = GlobalContext.getContext().getObject('context') as common.UIAbilityContext
    const options: dataPreferences.Options = { name: this.name }
    this.preferences = dataPreferences.getPreferencesSync(context, options)
    this.preferences?.on('change', (key: string) => {
      const pageMap = this.listenerKeyMap.get(key)
      pageMap?.forEach((callBack: Callback<string>) => {
        callBack(key)
      })
    })
  }
  /**
   * 存储key,value到preference缓存里面
   * @param key
   * @param value
   */
  saveValueSync(key: string, value: preferences.ValueType) {
    this.preferences?.putSync(key, value)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 根据key删除值
   * @param key
   */
  deleteValueSync(key: string) {
    this.preferences?.deleteSync(key)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns string
   */
  getStringValueSync(key: string, defaultValue: string) {
    return this.preferences?.getSync(key, defaultValue) as string
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns Array<string>
   */
  getArrayStringValueSync(key: string, defaultValue: Array<string>) {
    return this.preferences?.getSync(key, defaultValue) as Array<string>
  }
}
export const commonStorage = new Storage('common_storage')
export function initDataPreference() {
  commonStorage.initStorage()
}
// 与EntryAbility交互，获取ability当前的数据
export class GlobalContext {
  static readonly CONTEXT = 'context';
  static readonly WANT = 'want';
  //状态栏高度
  static readonly STATUS_BAR_HEIGHT = 'statusBarHeight';
  //导航栏高度
  static readonly NAVIGATION_HEIGHT = 'navigationHeight';
  private constructor() { }
  private static instance: GlobalContext;
  private _objects = new Map<string, Object>();
  public static getContext(): GlobalContext {
    if (!GlobalContext.instance) {
      GlobalContext.instance = new GlobalContext();
    }
    return GlobalContext.instance;
  }
  getObject(value: string): Object | undefined {
    return this._objects.get(value);
  }
  setObject(key: string, objectClass: Object): void {
    this._objects.set(key, objectClass);
  }
}
import display from '@ohos.display';
import { GlobalContext } from '.';
import window from '@ohos.window';
import common from '@ohos.app.ability.common';
import { StorageConst } from '../manager';
export class ScreenUtils {
  private static instance: ScreenUtils;
  setWindow(windowInfo: window.Window) {
    // 获取窗口属性
    const properties = windowInfo.getWindowProperties();
    this.setScreen(properties.windowRect.width, properties.windowRect.height)
    windowInfo.on("windowSizeChange", (size: Size) => {
      this.setScreen(size.width, size.height)
    })
  }
  private constructor() {
    this.defaultDisplay = display.getDefaultDisplaySync()
    this.defaultDisplay.getCutoutInfo((e, data) => {
      this.cutoutInfo = data
    })
    let callback: Callback<display.FoldDisplayMode> = (data: display.FoldDisplayMode) => {
      this.setFoldDisplayMode(data)
    };
    display.on("foldDisplayModeChange", callback)
  }
  private setScreen(width: number, height: number) {
    AppStorage.setOrCreate(StorageConst.SCREEN_WIDTH_VP, px2vp(width));
    AppStorage.setOrCreate(StorageConst.SCREEN_HEIGHT_VP, px2vp(height));
  }
  private setFoldDisplayMode(data: display.FoldDisplayMode) {
    AppStorage.setOrCreate(StorageConst.FOLD_DISPLAY_MODE, data);
  }
  public static getInstance(): ScreenUtils {
    if (!ScreenUtils.instance) {
      ScreenUtils.instance = new ScreenUtils();
    }
    return ScreenUtils.instance;
  }
  //屏幕数据
  private defaultDisplay: display.Display | null = null
  //挖孔屏状态栏区域
  private cutoutInfo: display.CutoutInfo | null = null
  getDisplay(): display.Display | null {
    return this.defaultDisplay
  }
  getScreenWidthPx(): number {
    return this.defaultDisplay?.width ?? -1
  }
  getScreenHeightPx(): number {
    return this.defaultDisplay?.height ?? -1
  }
  getScreenContentHeightPX(): number {
    return vp2px(this.getScreenHeightVp() - this.getStatusBarHeight())
  }
  getScreenContentHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenWidthVp(): number {
    return px2vp(this.getScreenWidthPx())
  }
  /**
   * 获取刘海屏状态栏最大的区域
   * @returns
   */
  getStatusBarHeight(): number {
    const statusBar = GlobalContext.getContext().getObject(GlobalContext.STATUS_BAR_HEIGHT) as number;
    return px2vp(statusBar)
  }
  // 底部安全距离
  getSafeBottomHeight() {
    const navigation = GlobalContext.getContext().getObject(GlobalContext.NAVIGATION_HEIGHT) as number;
    return px2vp(navigation)
  }
  /**
   * 获取底部导航栏的高度
   * @returns
   */
  async getBottomNavBarHeight(context: common.BaseContext): Promise<number> {
    const win = await window.getLastWindow(context)
    return px2vp(win.getWindowAvoidArea(window.AvoidAreaType.TYPE_NAVIGATION_INDICATOR).bottomRect.height)
  }
  async getStatusBarColor(): Promise<string> {
    const currentWindow = await window.getLastWindow(getContext(this))
    return currentWindow.getWindowSystemBarProperties().statusBarColor ?? '#000000'
  }
  // 改变状态栏文字颜色
  updateStatusBarColor(isBlack: boolean) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      currentWindow.setWindowSystemBarProperties({ statusBarContentColor: isBlack ? '#000000' : '#ffffff' })
    })
  }
  // 检查设备是否可折叠
  isFoldable() {
    return display.isFoldable()
  }
  // 设备当前折叠状态是否为为完全展开
  isFoldExpanded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_EXPANDED
  }
  // 设备当前折叠状态是否为为半折叠
  isFoldHalfFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_HALF_FOLDED
  }
  // 设备当前折叠状态为是否为折叠
  isFoldFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_FOLDED
  }
}
import { componentUtils, inspector } from "@kit.ArkUI"
export class ComponentUtils {
  /**
   * 同步方式获取组件渲染后的实际高度
   * @param componentId 组件ID
   * @param callback 注册的回调函数
   */
  static getComponentHeightSync(componentId: string, callback: (width: number) => void): void {
    // 监听组件
    const listener = inspector.createComponentObserver(componentId)
    // 注册回调
    listener.on('layout', () => {
      const componentInfo = componentUtils.getRectangleById(componentId)
      const height = px2vp(componentInfo.size.height)
      callback?.(height)
      // 取消注册回调
      listener.off('layout')
    })
  }
}
import { BusinessError } from "@kit.BasicServicesKit"
import { bundleManager } from "@kit.AbilityKit"
export enum ThirdApp {
  Alipay = 'alipays://',
  Amapuri = "amapuri://", // 高德地图的 scheme
  Baidumap = "baidumap://map/direction", // 百度地图的 scheme
  Maps = "maps://", // 华为地图的 scheme
  Https = "https://" // App link scheme
}
class ThirdAppManager{
  /** 第三方应用是否安装 */
  isAppInstall(thirdApp: ThirdApp): boolean {
    try {
      return bundleManager.canOpenLink(thirdApp)
    } catch (e) {
      let code = (e as BusinessError)?.code
      let msg = (e as BusinessError)?.message ?? ''
      if (code !== undefined) {
        if (code === 17700056) {
          msg += ` Please include "${thirdApp.replace('://',
            '')}" inside the "querySchemes" element of module.json5 in your app module.`
        }
        console.log(`isAppInstall get error${msg}`)
      } else {
        console.log(`isAppInstall get error${e}`)
      }
      return false
    }
  }
}
export const thirdAppManager = new ThirdAppManager()
import { bundleManager } from "@kit.AbilityKit";
class AppBundleManager{
  private bundleInfo?: bundleManager.BundleInfo
  getBundleInfo(): bundleManager.BundleInfo {
    if (this.bundleInfo == null || this.bundleInfo == undefined) {
      return bundleManager.getBundleInfoForSelfSync(bundleManager.BundleFlag.GET_BUNDLE_INFO_WITH_APPLICATION)
    }
    return this.bundleInfo
  }
  getTokenId(): number {
    let bundleInfo = this.getBundleInfo();
    return bundleInfo.appInfo.accessTokenId;
  }
}
export const appBundleManager = new AppBundleManager()
export * from './StorageConst'
export * from './RoutePageConst'
export * from './UserCenterConst'
export class StorageConst {
  static readonly TOKEN = 'token'
  static readonly USER_INFO = 'userInfo'
  // 屏幕宽高
  static readonly SCREEN_WIDTH_VP = 'screenWidthVp'
  static readonly SCREEN_HEIGHT_VP = 'screenHeightVp'
  // 折叠屏显示模式
  static readonly FOLD_DISPLAY_MODE = 'foldDisplayMode'
  static readonly SEARCH_HISTORY = "search_history"
}
import { StorageConst } from "./StorageConst"
import { UserInfoData } from "../model/UserInfoModel"
import { commonStorage } from "../utils"
class UserCenterConst {
  userInfo: UserInfoData | null = null
  getUserInfoData(): UserInfoData | null {
    if (this.userInfo) {
      return this.userInfo;
    }
    const value = commonStorage.getStringValueSync(StorageConst.USER_INFO, '');
    // 如果已经是对象，直接使用
    if (value && typeof value === 'object') {
      this.userInfo = value as UserInfoData;
      return this.userInfo;
    }
    // 如果是字符串，尝试解析
    if (typeof value === 'string' && value) {
      const p = JsonParse<UserInfoData>(value);
      if (p) {
        this.userInfo = p;
        return this.userInfo;
      }
    }
    return null;
  }
}
function JsonParse<T>(text: string): T | undefined {
  try {
    return JSON.parse(text);
  } catch (e) {
    console.error(`JSON解析错误: ${text}, 错误信息: ${e}`);
    return undefined;
  }
}
export default new UserCenterConst()
export class RoutePageConst {
  static readonly AppHomePage = "home/HomePage" //App-充电页面
  static readonly LoginPage = "login/LoginPage" //App-登录页面
}
import { abilityAccessCtrl, PermissionRequestResult, Permissions } from "@kit.AbilityKit";
import { BusinessError } from "@kit.BasicServicesKit";
import { appBundleManager } from "./AppBundleManager";
class PermissionManager{
  atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
  // 每次访问受目标权限保护的接口之前，都需要使用requestPermissionsFromUser()接口请求相应的权限。
  // 权限组：当应用请求权限时，同一个权限组的权限将会在一个弹窗内一起请求用户授权。用户点击同意，即同意了整个权限组。
  // 如定位权限组：['ohos.permission.APPROXIMATELY_LOCATION', 'ohos.permission.LOCATION']
  async checkPermissions(permissions: Array<Permissions>): Promise<boolean> {
    console.log(`check permission ${permissions}`);
    try {
      let grantStatusArray: abilityAccessCtrl.GrantStatus[] = [];
      for (let i = 0; i < permissions.length; i++) {
        grantStatusArray[i] = await this.checkPermissionInner(permissions[i]);
      }
      console.log(`checkPermissions: ${permissions}, grantStatus ${grantStatusArray} `);
      // todo 暂定全同意才算同意
      const denied = grantStatusArray.indexOf(abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) > -1;
      return !denied;
    } catch (e) {
      return Promise.reject(e);
    }
  }
  private async checkPermissionInner(permission: Permissions): Promise<abilityAccessCtrl.GrantStatus> {
    let grantStatus: abilityAccessCtrl.GrantStatus = abilityAccessCtrl.GrantStatus.PERMISSION_DENIED;
    // 校验应用是否被授予权限
    try {
      grantStatus = await this.atManager.checkAccessToken(appBundleManager.getTokenId(), permission);
    } catch (error) {
      const err: BusinessError = error as BusinessError;
      console.log(`Failed to check access token. Code is ${err.code}, message is ${err.message}`);
      return Promise.reject(`checkPermissionInner: checkAccessToken error: ${JSON.stringify(error)}`,);
    }
    return grantStatus;
  }
  async reqPermissionsFromUser(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
    // requestPermissionsFromUser会判断权限的授权状态来决定是否唤起弹窗
    try {
      let result: PermissionRequestResult = await atManager.requestPermissionsFromUser(context, permissions);
      let grantStatus: Array<number> = result.authResults;
      for (let i = 0; i < grantStatus.length; i++) {
        if (grantStatus[i] === 0) {
          // 用户授权，可以继续访问目标操作
          console.log(`reqPermissionsFromUser: ${permissions[i]} is granted`);
        } else {
          console.log(`reqPermissionsFromUser: ${permissions[i]} is denied`);
          return false;
        }
      }
      return true;
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
  //被拒绝后，再次点击全权限申请使用该方法
  async requestPermissionAgain(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    try {
      const result = await this.atManager.requestPermissionOnSetting(context, permissions)
      return result.every((status) => {
        return status === abilityAccessCtrl.GrantStatus.PERMISSION_GRANTED
      })
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
}
let permissionManager = new PermissionManager();
export { permissionManager };
{
  "module": {
    "name": "common",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
import { geoLocationManager } from "@kit.LocationKit";
import { PermissionConst } from "./PermissionConst";
import { permissionManager } from "./PermissionManager";
class LocationManager {
  async requestPermissionAgain() {
    return await permissionManager.requestPermissionAgain(PermissionConst.locationPermissions, getContext(this))
  }
  // 检查是否有定位权限，外部可直接调用，异常时返回false
  async checkLocationPermissions(): Promise<boolean> {
    try {
      return await permissionManager.checkPermissions(PermissionConst.locationPermissions) &&
      geoLocationManager.isLocationEnabled();
    } catch (e) {
      console.log(`lucy== hasLocationPermissions, ${JSON.stringify(e)}`)
      return false;
    }
  }
  // 校验并申请权限，如果申请权限返回false，则抛出异常，使用者需要使用catch接收。
  async checkAndApplyPermissions(context: Context): Promise<boolean> {
    let isGranted = await this.checkLocationPermissions();
    if (isGranted) {
      return true;
    }
    try {
      let userGranted = await permissionManager.reqPermissionsFromUser(PermissionConst.locationPermissions, context);
      if (userGranted) {
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }
}
export const locationManager = new LocationManager()
import { Permissions } from '@kit.AbilityKit';
export class PermissionConst {
  static readonly locationPermissions: Array<Permissions> = [
    'ohos.permission.APPROXIMATELY_LOCATION',
    'ohos.permission.LOCATION',
  ];
  static readonly mediaRWPermissions: Array<Permissions> = [
    'ohos.permission.READ_MEDIA',
    'ohos.permission.WRITE_MEDIA'
  ];
  static readonly imageVideoReadPermission: Permissions = 'ohos.permission.READ_IMAGEVIDEO';
  static readonly imageVideoWritePermission: Permissions = 'ohos.permission.WRITE_IMAGEVIDEO';
  static readonly cameraPermission: Permissions = 'ohos.permission.CAMERA';
  // 获取OAID
  static readonly oaIdPermission: Permissions = 'ohos.permission.APP_TRACKING_CONSENT';
}
export * from './LocationManager';
export * from './ThirdAppManager'
import { StyleConst } from "../../../../Index"
@Component
export struct BottomLoadingBuilder {
  @Prop haveNextPage: boolean
  @Prop loading: boolean
  @Prop dataLength: number
  build() {
    if (this.haveNextPage && this.loading) {
      Row() {
        LoadingProgress()
          .width($r('app.float.size_30'))
          .height($r('app.float.size_30'))
          .margin({ right: $r('app.float.size_10') })
        Text($r('app.string.loading'))
          .fontSize($r('app.float.size_text_14'))
          .fontColor($r('app.color.color_666'))
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_60'))
      .justifyContent(FlexAlign.Center)
    } else if (!this.haveNextPage && this.dataLength > 0) {
      Text($r('app.string.there_is_no_more_data'))
        .fontSize($r('app.float.size_text_14'))
        .fontColor($r('app.color.color_999'))
        .textAlign(TextAlign.Center)
        .width(StyleConst.FULL_WIDTH)
        .margin({ top: $r('app.float.size_10'), bottom: $r('app.float.size_20') })
    }
  }
}
export * from './StyleConst'
export * from './TbsTitleBar'
export * from './BottomLoadingBuilder'
export { requestApiCall } from './httpUtils'
export * from './Apis'
export class Apis {
  //注册
  static readonly USER_REGISTER = "/saas-api/tenant/register"
  //获取token-登录
  static readonly USER_LOGIN = "/saas-api/user/login"
  //获取租户ID
  static readonly USER_TENANT = "/saas-api/tenant/selects"
  //获取用户信息
  static readonly USER_INFO = "/wx-api/me/info"
  //获取充电站
  static readonly CHARGE_STATION_LIST = "/wx-api/station/list"
  //获取充电桩
  static readonly CHARGE_PILE_LIST = "/wx-api/pile/list"
  //获取充电价格
  static readonly CHARGE_PRICE = "/wx-api/price/list"
  //开始充电
  static readonly CHARGE_START = "/wx-api/charge/start"
  //结束充电
  static readonly CHARGE_STOP = "/wx-api/charge/stop"
  //获取充电订单列表
  static readonly CHARGE_ORDER_LIST = "/wx-api/charge/list"
}
import { ScreenUtils, StyleConst } from "../../../../Index"
import { router } from "@kit.ArkUI"
@Component
export struct TbsTitleBar {
  @Prop title: ResourceStr = ''
  @Prop showBackIcon: boolean = false
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight())
      RelativeContainer() {
        Text(this.title)
          .fontColor(Color.White)
          .fontSize($r('app.float.size_text_20'))
          .textAlign(TextAlign.Center)
          .maxLines(1)
          .id('text')
          .alignRules({
            center: { anchor: "__container__", align: VerticalAlign.Center },
            middle: { anchor: "__container__", align: HorizontalAlign.Center }
          })
        if (this.showBackIcon) {
          Image($r('app.media.back'))
            .width($r('app.float.size_45'))
            .id('image')
            .alignRules({
              left: { anchor: "__container__", align: HorizontalAlign.Start }
            })
            .onClick(() => {
              router.back()
            })
        }
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_45'))
    }
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
import http from '@ohos.net.http';
import { commonStorage } from '../../../../Index';
import { StorageConst } from '../manager';
import { ResponseResult } from './response';
export function requestApiCall(url: string,
  method: http.RequestMethod,
  data?: Record<string, number | boolean | string | Object | undefined>,
  headers?: Record<string, string>,
): Promise<ResponseResult> {
  const BASE_URL = 'https://charging.lusson.xyz'
  const httpRequest = http.createHttp();
  const defaultHeaders: Record<string, string> = {
    'Content-Type': 'application/json',
  }
  const token = commonStorage.getStringValueSync(StorageConst.TOKEN, "")
  if (token) {
    defaultHeaders['Authorization'] = `Bearer ${token}`
  }
  const finalHeaders: Record<string, string> = {};
  Object.keys(defaultHeaders).forEach(key => {
    finalHeaders[key] = defaultHeaders[key];
  });
  if (headers) {
    Object.keys(headers).forEach(key => {
      finalHeaders[key] = String(headers[key]);
    });
  }
  let responseResult = httpRequest.request(BASE_URL + url, {
    method: method,
    extraData: data ? JSON.stringify(data) : undefined,
    header: finalHeaders
  });
  let response: ResponseResult = new ResponseResult();
  return responseResult.then((value: http.HttpResponse) => {
    if (value.responseCode === 200) {
      let res: ResponseResult = JSON.parse(`${value.result}`);
      response.data = res.data;
      response.code = res.code;
      response.message = res.message;
    } else {
      response.message = '请求错误';
      response.code = 400;
    }
    return response;
  }).catch((error: Error) => {
    console.log('lucy++ error', JSON.stringify(error))
    response.message = '请求错误';
    response.code = 400;
    return response;
  })
}
export class StyleConst {
  // 宽高
  static readonly FULL_WIDTH: string = '100%';
  static readonly FULL_HEIGHT: string = '100%';
  static readonly PERCENT_10 = '10%'
  static readonly PERCENT_15 = '15%'
  static readonly PERCENT_17 = '17%'
  static readonly PERCENT_20 = '20%'
  static readonly PERCENT_25 = '25%'
  static readonly PERCENT_30 = '30%'
  static readonly PERCENT_35 = '35%'
  static readonly PERCENT_40 = '40%'
  static readonly PERCENT_45 = '45%'
  static readonly PERCENT_50 = '50%'
  static readonly PERCENT_60 = '60%'
  static readonly PERCENT_65 = '65%'
  static readonly PERCENT_70 = '70%'
  static readonly PERCENT_72 = '72%'
  static readonly PERCENT_75 = '75%'
  static readonly PERCENT_80 = '80%'
  static readonly PERCENT_85 = '85%'
  static readonly PERCENT_90 = '90%'
  static readonly PERCENT_95 = '95%'
  static readonly PERCENT_100 = '100%'
}
export class ResponseResult {
  code?: number
  message?: string
  data?: object
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
{
  "module": {
    "name": "common_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
export * from './src/main/ets/common'
export * from './src/main/ets/http'
export * from './src/main/ets/widgets'
export * from './src/main/ets/manager'
export * from './src/main/ets/utils'
export { CommonDataSource } from './src/main/ets/model/CommonDataSource'
export * from './src/main/ets/location'
{
  "name": "@tbs/common",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {}
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
{
  "float": [
    {
      "name": "size_1",
      "value": "1vp"
    },
    {
      "name": "size_2",
      "value": "2vp"
    },
    {
      "name": "size_3",
      "value": "3vp"
    },
    {
      "name": "size_4",
      "value": "4vp"
    },
    {
      "name": "size_5",
      "value": "5vp"
    },
    {
      "name": "size_6",
      "value": "6vp"
    },
    {
      "name": "size_7",
      "value": "7vp"
    },
    {
      "name": "size_8",
      "value": "8vp"
    },
    {
      "name": "size_9",
      "value": "9vp"
    },
    {
      "name": "size_10",
      "value": "10vp"
    },
    {
      "name": "size_11",
      "value": "11vp"
    },
    {
      "name": "size_12",
      "value": "12vp"
    },
    {
      "name": "size_13",
      "value": "13vp"
    },
    {
      "name": "size_14",
      "value": "14vp"
    },
    {
      "name": "size_15",
      "value": "15vp"
    },
    {
      "name": "size_16",
      "value": "16vp"
    },
    {
      "name": "size_17",
      "value": "17vp"
    },
    {
      "name": "size_18",
      "value": "18vp"
    },
    {
      "name": "size_19",
      "value": "19vp"
    },
    {
      "name": "size_20",
      "value": "20vp"
    },
    {
      "name": "size_21",
      "value": "21vp"
    },
    {
      "name": "size_22",
      "value": "22vp"
    },
    {
      "name": "size_23",
      "value": "23vp"
    },
    {
      "name": "size_24",
      "value": "24vp"
    },
    {
      "name": "size_25",
      "value": "25vp"
    },
    {
      "name": "size_26",
      "value": "26vp"
    },
    {
      "name": "size_27",
      "value": "27vp"
    },
    {
      "name": "size_28",
      "value": "28vp"
    },
    {
      "name": "size_29",
      "value": "29vp"
    },
    {
      "name": "size_30",
      "value": "30vp"
    },
    {
      "name": "size_31",
      "value": "31vp"
    },
    {
      "name": "size_32",
      "value": "32vp"
    },
    {
      "name": "size_33",
      "value": "33vp"
    },
    {
      "name": "size_34",
      "value": "34vp"
    },
    {
      "name": "size_35",
      "value": "35vp"
    },
    {
      "name": "size_36",
      "value": "36vp"
    },
    {
      "name": "size_37",
      "value": "37vp"
    },
    {
      "name": "size_38",
      "value": "38vp"
    },
    {
      "name": "size_39",
      "value": "39vp"
    },
    {
      "name": "size_40",
      "value": "40vp"
    },
    {
      "name": "size_41",
      "value": "41vp"
    },
    {
      "name": "size_42",
      "value": "42vp"
    },
    {
      "name": "size_43",
      "value": "43vp"
    },
    {
      "name": "size_44",
      "value": "44vp"
    },
    {
      "name": "size_45",
      "value": "45vp"
    },
    {
      "name": "size_46",
      "value": "46vp"
    },
    {
      "name": "size_47",
      "value": "47vp"
    },
    {
      "name": "size_48",
      "value": "48vp"
    },
    {
      "name": "size_49",
      "value": "49vp"
    },
    {
      "name": "size_50",
      "value": "50vp"
    },
    {
      "name": "size_51",
      "value": "51vp"
    },
    {
      "name": "size_52",
      "value": "52vp"
    },
    {
      "name": "size_53",
      "value": "53vp"
    },
    {
      "name": "size_54",
      "value": "54vp"
    },
    {
      "name": "size_55",
      "value": "55vp"
    },
    {
      "name": "size_56",
      "value": "56vp"
    },
    {
      "name": "size_57",
      "value": "57vp"
    },
    {
      "name": "size_58",
      "value": "58vp"
    },
    {
      "name": "size_59",
      "value": "59vp"
    },
    {
      "name": "size_60",
      "value": "60vp"
    },
    {
      "name": "size_61",
      "value": "61vp"
    },
    {
      "name": "size_62",
      "value": "62vp"
    },
    {
      "name": "size_63",
      "value": "63vp"
    },
    {
      "name": "size_64",
      "value": "64vp"
    },
    {
      "name": "size_65",
      "value": "65vp"
    },
    {
      "name": "size_66",
      "value": "66vp"
    },
    {
      "name": "size_67",
      "value": "67vp"
    },
    {
      "name": "size_68",
      "value": "68vp"
    },
    {
      "name": "size_69",
      "value": "69vp"
    },
    {
      "name": "size_70",
      "value": "70vp"
    },
    {
      "name": "size_71",
      "value": "71vp"
    },
    {
      "name": "size_72",
      "value": "72vp"
    },
    {
      "name": "size_73",
      "value": "73vp"
    },
    {
      "name": "size_74",
      "value": "74vp"
    },
    {
      "name": "size_75",
      "value": "75vp"
    },
    {
      "name": "size_76",
      "value": "76vp"
    },
    {
      "name": "size_77",
      "value": "77vp"
    },
    {
      "name": "size_78",
      "value": "78vp"
    },
    {
      "name": "size_79",
      "value": "79vp"
    },
    {
      "name": "size_80",
      "value": "80vp"
    },
    {
      "name": "size_81",
      "value": "81vp"
    },
    {
      "name": "size_82",
      "value": "82vp"
    },
    {
      "name": "size_83",
      "value": "83vp"
    },
    {
      "name": "size_84",
      "value": "84vp"
    },
    {
      "name": "size_85",
      "value": "85vp"
    },
    {
      "name": "size_86",
      "value": "86vp"
    },
    {
      "name": "size_87",
      "value": "87vp"
    },
    {
      "name": "size_88",
      "value": "88vp"
    },
    {
      "name": "size_89",
      "value": "89vp"
    },
    {
      "name": "size_90",
      "value": "90vp"
    },
    {
      "name": "size_91",
      "value": "91vp"
    },
    {
      "name": "size_92",
      "value": "92vp"
    },
    {
      "name": "size_93",
      "value": "93vp"
    },
    {
      "name": "size_94",
      "value": "94vp"
    },
    {
      "name": "size_95",
      "value": "95vp"
    },
    {
      "name": "size_96",
      "value": "96vp"
    },
    {
      "name": "size_97",
      "value": "97vp"
    },
    {
      "name": "size_98",
      "value": "98vp"
    },
    {
      "name": "size_99",
      "value": "99vp"
    },
    {
      "name": "size_100",
      "value": "100vp"
    },
    {
      "name": "size_101",
      "value": "101vp"
    },
    {
      "name": "size_102",
      "value": "102vp"
    },
    {
      "name": "size_103",
      "value": "103vp"
    },
    {
      "name": "size_104",
      "value": "104vp"
    },
    {
      "name": "size_105",
      "value": "105vp"
    },
    {
      "name": "size_106",
      "value": "106vp"
    },
    {
      "name": "size_107",
      "value": "107vp"
    },
    {
      "name": "size_108",
      "value": "108vp"
    },
    {
      "name": "size_109",
      "value": "109vp"
    },
    {
      "name": "size_110",
      "value": "110vp"
    },
    {
      "name": "size_111",
      "value": "111vp"
    },
    {
      "name": "size_112",
      "value": "112vp"
    },
    {
      "name": "size_113",
      "value": "113vp"
    },
    {
      "name": "size_114",
      "value": "114vp"
    },
    {
      "name": "size_115",
      "value": "115vp"
    },
    {
      "name": "size_116",
      "value": "116vp"
    },
    {
      "name": "size_117",
      "value": "117vp"
    },
    {
      "name": "size_118",
      "value": "118vp"
    },
    {
      "name": "size_119",
      "value": "119vp"
    },
    {
      "name": "size_120",
      "value": "120vp"
    },
    {
      "name": "size_121",
      "value": "121vp"
    },
    {
      "name": "size_122",
      "value": "122vp"
    },
    {
      "name": "size_123",
      "value": "123vp"
    },
    {
      "name": "size_124",
      "value": "124vp"
    },
    {
      "name": "size_125",
      "value": "125vp"
    },
    {
      "name": "size_126",
      "value": "126vp"
    },
    {
      "name": "size_127",
      "value": "127vp"
    },
    {
      "name": "size_128",
      "value": "128vp"
    },
    {
      "name": "size_129",
      "value": "129vp"
    },
    {
      "name": "size_130",
      "value": "130vp"
    },
    {
      "name": "size_131",
      "value": "131vp"
    },
    {
      "name": "size_132",
      "value": "132vp"
    },
    {
      "name": "size_133",
      "value": "133vp"
    },
    {
      "name": "size_134",
      "value": "134vp"
    },
    {
      "name": "size_135",
      "value": "135vp"
    },
    {
      "name": "size_136",
      "value": "136vp"
    },
    {
      "name": "size_137",
      "value": "137vp"
    },
    {
      "name": "size_138",
      "value": "138vp"
    },
    {
      "name": "size_139",
      "value": "139vp"
    },
    {
      "name": "size_140",
      "value": "140vp"
    },
    {
      "name": "size_141",
      "value": "141vp"
    },
    {
      "name": "size_142",
      "value": "142vp"
    },
    {
      "name": "size_143",
      "value": "143vp"
    },
    {
      "name": "size_144",
      "value": "144vp"
    },
    {
      "name": "size_145",
      "value": "145vp"
    },
    {
      "name": "size_146",
      "value": "146vp"
    },
    {
      "name": "size_147",
      "value": "147vp"
    },
    {
      "name": "size_148",
      "value": "148vp"
    },
    {
      "name": "size_149",
      "value": "149vp"
    },
    {
      "name": "size_150",
      "value": "150vp"
    },
    {
      "name": "size_151",
      "value": "151vp"
    },
    {
      "name": "size_152",
      "value": "152vp"
    },
    {
      "name": "size_153",
      "value": "153vp"
    },
    {
      "name": "size_154",
      "value": "154vp"
    },
    {
      "name": "size_155",
      "value": "155vp"
    },
    {
      "name": "size_156",
      "value": "156vp"
    },
    {
      "name": "size_157",
      "value": "157vp"
    },
    {
      "name": "size_158",
      "value": "158vp"
    },
    {
      "name": "size_159",
      "value": "159vp"
    },
    {
      "name": "size_160",
      "value": "160vp"
    },
    {
      "name": "size_161",
      "value": "161vp"
    },
    {
      "name": "size_162",
      "value": "162vp"
    },
    {
      "name": "size_163",
      "value": "163vp"
    },
    {
      "name": "size_164",
      "value": "164vp"
    },
    {
      "name": "size_165",
      "value": "165vp"
    },
    {
      "name": "size_166",
      "value": "166vp"
    },
    {
      "name": "size_167",
      "value": "167vp"
    },
    {
      "name": "size_168",
      "value": "168vp"
    },
    {
      "name": "size_169",
      "value": "169vp"
    },
    {
      "name": "size_170",
      "value": "170vp"
    },
    {
      "name": "size_171",
      "value": "171vp"
    },
    {
      "name": "size_172",
      "value": "172vp"
    },
    {
      "name": "size_173",
      "value": "173vp"
    },
    {
      "name": "size_174",
      "value": "174vp"
    },
    {
      "name": "size_175",
      "value": "175vp"
    },
    {
      "name": "size_176",
      "value": "176vp"
    },
    {
      "name": "size_177",
      "value": "177vp"
    },
    {
      "name": "size_178",
      "value": "178vp"
    },
    {
      "name": "size_179",
      "value": "179vp"
    },
    {
      "name": "size_180",
      "value": "180vp"
    },
    {
      "name": "size_181",
      "value": "181vp"
    },
    {
      "name": "size_182",
      "value": "182vp"
    },
    {
      "name": "size_183",
      "value": "183vp"
    },
    {
      "name": "size_184",
      "value": "184vp"
    },
    {
      "name": "size_185",
      "value": "185vp"
    },
    {
      "name": "size_186",
      "value": "186vp"
    },
    {
      "name": "size_187",
      "value": "187vp"
    },
    {
      "name": "size_188",
      "value": "188vp"
    },
    {
      "name": "size_189",
      "value": "189vp"
    },
    {
      "name": "size_190",
      "value": "190vp"
    },
    {
      "name": "size_191",
      "value": "191vp"
    },
    {
      "name": "size_192",
      "value": "192vp"
    },
    {
      "name": "size_193",
      "value": "193vp"
    },
    {
      "name": "size_194",
      "value": "194vp"
    },
    {
      "name": "size_195",
      "value": "195vp"
    },
    {
      "name": "size_196",
      "value": "196vp"
    },
    {
      "name": "size_197",
      "value": "197vp"
    },
    {
      "name": "size_198",
      "value": "198vp"
    },
    {
      "name": "size_199",
      "value": "199vp"
    },
    {
      "name": "size_200",
      "value": "200vp"
    },
    {
      "name": "size_201",
      "value": "201vp"
    },
    {
      "name": "size_202",
      "value": "202vp"
    },
    {
      "name": "size_203",
      "value": "203vp"
    },
    {
      "name": "size_204",
      "value": "204vp"
    },
    {
      "name": "size_205",
      "value": "205vp"
    },
    {
      "name": "size_206",
      "value": "206vp"
    },
    {
      "name": "size_207",
      "value": "207vp"
    },
    {
      "name": "size_208",
      "value": "208vp"
    },
    {
      "name": "size_209",
      "value": "209vp"
    },
    {
      "name": "size_210",
      "value": "210vp"
    },
    {
      "name": "size_211",
      "value": "211vp"
    },
    {
      "name": "size_212",
      "value": "212vp"
    },
    {
      "name": "size_213",
      "value": "213vp"
    },
    {
      "name": "size_214",
      "value": "214vp"
    },
    {
      "name": "size_215",
      "value": "215vp"
    },
    {
      "name": "size_216",
      "value": "216vp"
    },
    {
      "name": "size_217",
      "value": "217vp"
    },
    {
      "name": "size_218",
      "value": "218vp"
    },
    {
      "name": "size_219",
      "value": "219vp"
    },
    {
      "name": "size_220",
      "value": "220vp"
    },
    {
      "name": "size_221",
      "value": "221vp"
    },
    {
      "name": "size_222",
      "value": "222vp"
    },
    {
      "name": "size_223",
      "value": "223vp"
    },
    {
      "name": "size_224",
      "value": "224vp"
    },
    {
      "name": "size_225",
      "value": "225vp"
    },
    {
      "name": "size_226",
      "value": "226vp"
    },
    {
      "name": "size_227",
      "value": "227vp"
    },
    {
      "name": "size_228",
      "value": "228vp"
    },
    {
      "name": "size_229",
      "value": "229vp"
    },
    {
      "name": "size_230",
      "value": "230vp"
    },
    {
      "name": "size_231",
      "value": "231vp"
    },
    {
      "name": "size_232",
      "value": "232vp"
    },
    {
      "name": "size_233",
      "value": "233vp"
    },
    {
      "name": "size_234",
      "value": "234vp"
    },
    {
      "name": "size_235",
      "value": "235vp"
    },
    {
      "name": "size_236",
      "value": "236vp"
    },
    {
      "name": "size_237",
      "value": "237vp"
    },
    {
      "name": "size_238",
      "value": "238vp"
    },
    {
      "name": "size_239",
      "value": "239vp"
    },
    {
      "name": "size_240",
      "value": "240vp"
    },
    {
      "name": "size_241",
      "value": "241vp"
    },
    {
      "name": "size_242",
      "value": "242vp"
    },
    {
      "name": "size_243",
      "value": "243vp"
    },
    {
      "name": "size_244",
      "value": "244vp"
    },
    {
      "name": "size_245",
      "value": "245vp"
    },
    {
      "name": "size_246",
      "value": "246vp"
    },
    {
      "name": "size_247",
      "value": "247vp"
    },
    {
      "name": "size_248",
      "value": "248vp"
    },
    {
      "name": "size_249",
      "value": "249vp"
    },
    {
      "name": "size_250",
      "value": "250vp"
    },
    {
      "name": "size_251",
      "value": "251vp"
    },
    {
      "name": "size_252",
      "value": "252vp"
    },
    {
      "name": "size_253",
      "value": "253vp"
    },
    {
      "name": "size_254",
      "value": "254vp"
    },
    {
      "name": "size_255",
      "value": "255vp"
    },
    {
      "name": "size_256",
      "value": "256vp"
    },
    {
      "name": "size_257",
      "value": "257vp"
    },
    {
      "name": "size_258",
      "value": "258vp"
    },
    {
      "name": "size_259",
      "value": "259vp"
    },
    {
      "name": "size_260",
      "value": "260vp"
    },
    {
      "name": "size_261",
      "value": "261vp"
    },
    {
      "name": "size_262",
      "value": "262vp"
    },
    {
      "name": "size_263",
      "value": "263vp"
    },
    {
      "name": "size_264",
      "value": "264vp"
    },
    {
      "name": "size_265",
      "value": "265vp"
    },
    {
      "name": "size_266",
      "value": "266vp"
    },
    {
      "name": "size_267",
      "value": "267vp"
    },
    {
      "name": "size_268",
      "value": "268vp"
    },
    {
      "name": "size_269",
      "value": "269vp"
    },
    {
      "name": "size_270",
      "value": "270vp"
    },
    {
      "name": "size_271",
      "value": "271vp"
    },
    {
      "name": "size_272",
      "value": "272vp"
    },
    {
      "name": "size_273",
      "value": "273vp"
    },
    {
      "name": "size_274",
      "value": "274vp"
    },
    {
      "name": "size_275",
      "value": "275vp"
    },
    {
      "name": "size_276",
      "value": "276vp"
    },
    {
      "name": "size_277",
      "value": "277vp"
    },
    {
      "name": "size_278",
      "value": "278vp"
    },
    {
      "name": "size_279",
      "value": "279vp"
    },
    {
      "name": "size_280",
      "value": "280vp"
    },
    {
      "name": "size_281",
      "value": "281vp"
    },
    {
      "name": "size_282",
      "value": "282vp"
    },
    {
      "name": "size_283",
      "value": "283vp"
    },
    {
      "name": "size_284",
      "value": "284vp"
    },
    {
      "name": "size_285",
      "value": "285vp"
    },
    {
      "name": "size_286",
      "value": "286vp"
    },
    {
      "name": "size_287",
      "value": "287vp"
    },
    {
      "name": "size_288",
      "value": "288vp"
    },
    {
      "name": "size_289",
      "value": "289vp"
    },
    {
      "name": "size_290",
      "value": "290vp"
    },
    {
      "name": "size_291",
      "value": "291vp"
    },
    {
      "name": "size_292",
      "value": "292vp"
    },
    {
      "name": "size_293",
      "value": "293vp"
    },
    {
      "name": "size_294",
      "value": "294vp"
    },
    {
      "name": "size_295",
      "value": "295vp"
    },
    {
      "name": "size_296",
      "value": "296vp"
    },
    {
      "name": "size_297",
      "value": "297vp"
    },
    {
      "name": "size_298",
      "value": "298vp"
    },
    {
      "name": "size_299",
      "value": "299vp"
    },
    {
      "name": "size_300",
      "value": "300vp"
    },
    {
      "name": "size_text_1",
      "value": "1fp"
    },
    {
      "name": "size_text_2",
      "value": "2fp"
    },
    {
      "name": "size_text_3",
      "value": "3fp"
    },
    {
      "name": "size_text_4",
      "value": "4fp"
    },
    {
      "name": "size_text_5",
      "value": "5fp"
    },
    {
      "name": "size_text_6",
      "value": "6fp"
    },
    {
      "name": "size_text_7",
      "value": "7fp"
    },
    {
      "name": "size_text_8",
      "value": "8fp"
    },
    {
      "name": "size_text_9",
      "value": "9fp"
    },
    {
      "name": "size_text_10",
      "value": "10fp"
    },
    {
      "name": "size_text_11",
      "value": "11fp"
    },
    {
      "name": "size_text_12",
      "value": "12fp"
    },
    {
      "name": "size_text_13",
      "value": "13fp"
    },
    {
      "name": "size_text_14",
      "value": "14fp"
    },
    {
      "name": "size_text_15",
      "value": "15fp"
    },
    {
      "name": "size_text_16",
      "value": "16fp"
    },
    {
      "name": "size_text_17",
      "value": "17fp"
    },
    {
      "name": "size_text_18",
      "value": "18fp"
    },
    {
      "name": "size_text_19",
      "value": "19fp"
    },
    {
      "name": "size_text_20",
      "value": "20fp"
    },
    {
      "name": "size_text_21",
      "value": "21fp"
    },
    {
      "name": "size_text_22",
      "value": "22fp"
    },
    {
      "name": "size_text_23",
      "value": "23fp"
    },
    {
      "name": "size_text_24",
      "value": "24fp"
    },
    {
      "name": "size_text_25",
      "value": "25fp"
    },
    {
      "name": "size_text_26",
      "value": "26fp"
    },
    {
      "name": "size_text_27",
      "value": "27fp"
    },
    {
      "name": "size_text_28",
      "value": "28fp"
    },
    {
      "name": "size_text_29",
      "value": "29fp"
    },
    {
      "name": "size_text_30",
      "value": "30fp"
    },
    {
      "name": "size_text_31",
      "value": "31fp"
    },
    {
      "name": "size_text_32",
      "value": "32fp"
    },
    {
      "name": "size_text_33",
      "value": "33fp"
    },
    {
      "name": "size_text_34",
      "value": "34fp"
    },
    {
      "name": "size_text_35",
      "value": "35fp"
    },
    {
      "name": "size_text_36",
      "value": "36fp"
    },
    {
      "name": "size_text_37",
      "value": "37fp"
    },
    {
      "name": "size_text_38",
      "value": "38fp"
    },
    {
      "name": "size_text_39",
      "value": "39fp"
    },
    {
      "name": "size_text_40",
      "value": "40fp"
    },
    {
      "name": "size_text_41",
      "value": "41fp"
    },
    {
      "name": "size_text_42",
      "value": "42fp"
    },
    {
      "name": "size_text_43",
      "value": "43fp"
    },
    {
      "name": "size_text_44",
      "value": "44fp"
    },
    {
      "name": "size_text_45",
      "value": "45fp"
    },
    {
      "name": "size_text_46",
      "value": "46fp"
    },
    {
      "name": "size_text_47",
      "value": "47fp"
    },
    {
      "name": "size_text_48",
      "value": "48fp"
    },
    {
      "name": "size_text_49",
      "value": "49fp"
    },
    {
      "name": "size_text_50",
      "value": "50fp"
    },
    {
      "name": "size_text_51",
      "value": "51fp"
    },
    {
      "name": "size_text_52",
      "value": "52fp"
    },
    {
      "name": "size_text_53",
      "value": "53fp"
    },
    {
      "name": "size_text_54",
      "value": "54fp"
    },
    {
      "name": "size_text_55",
      "value": "55fp"
    },
    {
      "name": "size_text_56",
      "value": "56fp"
    },
    {
      "name": "size_text_57",
      "value": "57fp"
    },
    {
      "name": "size_text_58",
      "value": "58fp"
    },
    {
      "name": "size_text_59",
      "value": "59fp"
    },
    {
      "name": "size_text_60",
      "value": "60fp"
    },
    {
      "name": "size_text_61",
      "value": "61fp"
    },
    {
      "name": "size_text_62",
      "value": "62fp"
    },
    {
      "name": "size_text_63",
      "value": "63fp"
    },
    {
      "name": "size_text_64",
      "value": "64fp"
    },
    {
      "name": "size_text_65",
      "value": "65fp"
    },
    {
      "name": "size_text_66",
      "value": "66fp"
    },
    {
      "name": "size_text_67",
      "value": "67fp"
    },
    {
      "name": "size_text_68",
      "value": "68fp"
    },
    {
      "name": "size_text_69",
      "value": "69fp"
    },
    {
      "name": "size_text_70",
      "value": "70fp"
    },
    {
      "name": "size_text_71",
      "value": "71fp"
    },
    {
      "name": "size_text_72",
      "value": "72fp"
    },
    {
      "name": "size_text_73",
      "value": "73fp"
    },
    {
      "name": "size_text_74",
      "value": "74fp"
    },
    {
      "name": "size_text_75",
      "value": "75fp"
    },
    {
      "name": "size_text_76",
      "value": "76fp"
    },
    {
      "name": "size_text_77",
      "value": "77fp"
    },
    {
      "name": "size_text_78",
      "value": "78fp"
    },
    {
      "name": "size_text_79",
      "value": "79fp"
    },
    {
      "name": "size_text_80",
      "value": "80fp"
    },
    {
      "name": "size_text_81",
      "value": "81fp"
    },
    {
      "name": "size_text_82",
      "value": "82fp"
    },
    {
      "name": "size_text_83",
      "value": "83fp"
    },
    {
      "name": "size_text_84",
      "value": "84fp"
    },
    {
      "name": "size_text_85",
      "value": "85fp"
    },
    {
      "name": "size_text_86",
      "value": "86fp"
    },
    {
      "name": "size_text_87",
      "value": "87fp"
    },
    {
      "name": "size_text_88",
      "value": "88fp"
    },
    {
      "name": "size_text_89",
      "value": "89fp"
    },
    {
      "name": "size_text_90",
      "value": "90fp"
    },
    {
      "name": "size_text_91",
      "value": "91fp"
    },
    {
      "name": "size_text_92",
      "value": "92fp"
    },
    {
      "name": "size_text_93",
      "value": "93fp"
    },
    {
      "name": "size_text_94",
      "value": "94fp"
    },
    {
      "name": "size_text_95",
      "value": "95fp"
    },
    {
      "name": "size_text_96",
      "value": "96fp"
    },
    {
      "name": "size_text_97",
      "value": "97fp"
    },
    {
      "name": "size_text_98",
      "value": "98fp"
    },
    {
      "name": "size_text_99",
      "value": "99fp"
    },
    {
      "name": "size_text_100",
      "value": "100fp"
    }
  ]
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    },
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
{
  "color": [
    {
      "name": "color_0aa671",
      "value": "#0aa671"
    },
    {
      "name": "start_window_background",
      "value": "#FFFFFF"
    },
    {
      "name": "color_0165b8",
      "value": "#0165b8"
    },
    {
      "name": "color_182431",
      "value": "#182431"
    },
    {
      "name": "color_efefef",
      "value": "#EFEFEF"
    },
    {
      "name": "color_f5f5f5",
      "value": "#F5F5F5"
    },
    {
      "name": "color_adadb3",
      "value": "#adadb3"
    },
    {
      "name": "color_fff",
      "value": "#fff"
    },
    {
      "name": "color_898e92",
      "value": "#898e92"
    },
    {
      "name": "color_0165B8",
      "value": "#0165B8"
    },
    {
      "name": "color_f0f2f4",
      "value": "#f0f2f4"
    },
    {
      "name": "color_80000000",
      "value": "#80000000"
    },
    {
      "name": "color_009688",
      "value": "#009688"
    },
    {
      "name": "color_d68751",
      "value": "#d68751"
    },
    {
      "name": "color_F44336",
      "value": "#F44336"
    },
    {
      "name": "color_666",
      "value": "#666"
    },
    {
      "name": "color_999",
      "value": "#999"
    }
  ]
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "common",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/common",
		"installationFree": false
	}
}
export { ChargePage } from './src/main/ets/page/ChargePage';
{
  "name": "@tbs/charge",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {
    "@tbs/common": "file:../../common"
  }
}
{
  "meta": {
    "stableOrder": true
  },
  "lockfileVersion": 3,
  "ATTENTION": "THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.",
  "specifiers": {
    "@tbs/common@../../common": "@tbs/common@../../common"
  },
  "packages": {
    "@tbs/common@../../common": {
      "name": "@tbs/common",
      "version": "1.0.0",
      "resolved": "../../common",
      "registryType": "local"
    }
  }
}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
{
  "module": {
    "name": "charge",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
{
  "name": "@tbs/scan",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {}
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
{
  "module": {
    "name": "charge_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
import { requestApiCall, Apis, toast } from "@tbs/common";
import { http } from "@kit.NetworkKit";
import { ChargeListData, OrderTypeData, PileListData, PriceListData } from "../model/ChargeModel";
import { BusinessError } from "@kit.BasicServicesKit";
//获取充电站
export function getStations(name: string, pageNo: number = 1, pageSize: number = 20) {
  return requestApiCall(`${Apis.CHARGE_STATION_LIST}?name=${name}&pageNo=${pageNo}&pageSize=${pageSize}`,
    http.RequestMethod.GET).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    const data = res.data as ChargeListData
    return data
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 获取充电站接口调用失败，${err.code}+${err.message}`)
  })
}
//获取充电桩
export function getPiles(stationId: number) {
  return requestApiCall(`${Apis.CHARGE_PILE_LIST}?stationId=${stationId}`, http.RequestMethod.GET).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    const data = res.data as PileListData
    return data.List
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 获取充电桩接口调用失败，${err.code}+${err.message}`)
  })
}
//获取充电价格
export function getChargePrice(pageNo: number = 1, pageSize: number = 20) {
  return requestApiCall(`${Apis.CHARGE_PRICE}?pageNo=${pageNo}&pageSize=${pageSize}`, http.RequestMethod.GET)
    .then(res => {
      if (res.code !== 0 && res.message) {
        toast(res.message)
      }
      const data = res.data as PriceListData
      return data.List
    }).catch((err: BusinessError) => {
      console.error(`lucy++ 获取充电价格接口调用失败，${err.code}+${err.message}`)
    })
}
//开始充电
export function getStartCharge(pileId: number) {
  const params: Record<string, Object> = {
    "pileId": pileId
  }
  return requestApiCall(Apis.CHARGE_START, http.RequestMethod.POST, params).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    return res.code
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 开始充电接口调用失败，${err.code}+${err.message}`)
  })
}
//获取充电订单列表
export function getChargeOrders(pageNo: number, pageSize: number) {
  return requestApiCall(`${Apis.CHARGE_ORDER_LIST}?pageNo=${pageNo}&pageSize=${pageSize}`, http.RequestMethod.GET)
    .then(res => {
      if (res.code !== 0 && res.message) {
        toast(res.message)
      }
      const data = res.data as OrderTypeData
      return data
    }).catch((err: BusinessError) => {
      console.error(`lucy++ 获取充电订单列表接口调用失败，${err.code}+${err.message}`)
    })
}
//结束充电
export function getStopCharge(orderId: number) {
  const params: Record<string, Object> = {
    "orderId": orderId
  }
  return requestApiCall(Apis.CHARGE_STOP, http.RequestMethod.POST, params).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    console.log('lucy== 结束res', JSON.stringify(res))
    return res.code
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 结束充电接口调用失败，${err.code}+${err.message}`)
  })
}
export { ScanPage } from './src/main/ets/page/ScanPage'
export { ChargePage } from './src/main/ets/page/ChargePage';
{
  "name": "@tbs/charge",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {
    "@tbs/common": "file:../../common"
  }
}
{
  "meta": {
    "stableOrder": true
  },
  "lockfileVersion": 3,
  "ATTENTION": "THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.",
  "specifiers": {
    "@tbs/common@../../common": "@tbs/common@../../common"
  },
  "packages": {
    "@tbs/common@../../common": {
      "name": "@tbs/common",
      "version": "1.0.0",
      "resolved": "../../common",
      "registryType": "local"
    }
  }
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
{
  "string": [
    {
      "name": "module_desc",
      "value": "module description"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "charge"
    },
    {
      "name": "scan",
      "value": "scan"
    },
    {
      "name": "mine",
      "value": "mine"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "Welcome to log in to the Groundhog charging platform"
    },
    {
      "name": "please_select_the_tenant",
      "value": "Please select the tenant"
    },
    {
      "name": "please_enter_the_username",
      "value": "Please enter the username"
    },
    {
      "name": "please_enter_the_password",
      "value": "Please enter your password"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "Please enter the verification code"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "Please enter the company name"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "Please enter the company website"
    },
    {
      "name": "login",
      "value": "Login"
    },
    {
      "name": "no_account",
      "value": "No account?"
    },
    {
      "name": "register",
      "value": "Register"
    },
    {
      "name": "login_in",
      "value": "login in"
    },
    {
      "name": "existing_account",
      "value": "existing account?"
    },
    {
      "name": "register_immediately",
      "value": "register immediately"
    },
    {
      "name": "company_website",
      "value": "The company 's website, such as www.example.com"
    },
    {
      "name": "company_name",
      "value": "company name"
    },
    {
      "name": "password_length",
      "value": "Password: At least 5 characters in length"
    },
    {
      "name": "get_code",
      "value": "get code"
    },
    {
      "name": "verification_code",
      "value": "Verification code :666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "Welcome to register on the Groundhog charging platform"
    },
    {
      "name": "search_content",
      "value": "Please enter the search content"
    },
    {
      "name": "search",
      "value": "search"
    },
    {
      "name": "no_data",
      "value": "no data"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "Selection of charging pile"
    },
    {
      "name": "fast_charge",
      "value": "fast charge"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "national standard"
    },
    {
      "name": "idle",
      "value": "Idle"
    },
    {
      "name": "faults",
      "value": "Faults"
    },
    {
      "name": "charging_in_progress",
      "value": "Charging in progress"
    },
    {
      "name": "pile_number",
      "value": "Pile_number:"
    },
    {
      "name": "station_name",
      "value": "Station name:"
    },
    {
      "name": "agreement",
      "value": "agreement"
    },
    {
      "name": "certification",
      "value": "certification"
    },
    {
      "name": "feat",
      "value": "feat"
    },
    {
      "name": "message",
      "value": "message"
    },
    {
      "name": "person",
      "value": "person"
    },
    {
      "name": "rule",
      "value": "rule"
    },
    {
      "name": "order",
      "value": "order"
    },
    {
      "name": "service",
      "value": "service"
    },
    {
      "name": "there_is_no_more_data",
      "value": "There is no more data"
    },
    {
      "name": "loading",
      "value": "loading..."
    },
    {
      "name": "completed",
      "value": "Completed"
    },
    {
      "name": "pile_code",
      "value": "Pile code:"
    },
    {
      "name": "charge_name",
      "value": "Charge name:"
    },
    {
      "name": "price",
      "value": "Price:"
    },
    {
      "name": "order_status",
      "value": "Order status:"
    },
    {
      "name": "start_time",
      "value": "Start time:"
    },
    {
      "name": "end_time",
      "value": "End time:"
    },
    {
      "name": "stop_charge",
      "value": "Stop charging"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
{
  "app": {
    "signingConfigs": [
      {
        "name": "default",
        "type": "HarmonyOS",
        "material": {
          "certpath": "/Users/hy-harmonyos/.ohos/config/default_TbsChargeHarmonyOs__ufzCLcvdd2BeOQN_cfx1Mk-FbpSy8fSUNeYHFguig0=.cer",
          "keyAlias": "debugKey",
          "keyPassword": "0000001B53461D81B19F9BD47E7C31EC1EA070D49B3C91F1571B87AFCA7EE60594763AFE406575969AE725",
          "profile": "/Users/hy-harmonyos/.ohos/config/default_TbsChargeHarmonyOs__ufzCLcvdd2BeOQN_cfx1Mk-FbpSy8fSUNeYHFguig0=.p7b",
          "signAlg": "SHA256withECDSA",
          "storeFile": "/Users/hy-harmonyos/.ohos/config/default_TbsChargeHarmonyOs__ufzCLcvdd2BeOQN_cfx1Mk-FbpSy8fSUNeYHFguig0=.p12",
          "storePassword": "0000001BE758B9DBF482A01A49926F86B3A5B0895ED3D3B13FDA169A48C1E30D0F507FF05FED46C1682643"
        }
      }
    ],
    "products": [
      {
        "name": "default",
        "signingConfig": "default",
        "compatibleSdkVersion": "5.0.4(16)",
        "runtimeOS": "HarmonyOS",
        "buildOption": {
          "strictMode": {
            "caseSensitiveCheck": true,
            "useNormalizedOHMUrl": true
          }
        }
      }
    ],
    "buildModeSet": [
      {
        "name": "debug",
      },
      {
        "name": "release"
      }
    ]
  },
  "modules": [
    {
      "name": "entry",
      "srcPath": "./entry",
      "targets": [
        {
          "name": "default",
          "applyToProducts": [
            "default"
          ]
        }
      ]
    },
    {
      "name": "common",
      "srcPath": "./common",
    },
    {
      "name": "charge",
      "srcPath": "./feature/charge",
    },
    {
      "name": "mine",
      "srcPath": "./feature/mine",
    },
    {
      "name": "scan",
      "srcPath": "./feature/scan",
    }
  ]
}
{
  "app": {
    "bundleName": "com.example.tbschargeharmonyos",
    "vendor": "example",
    "versionCode": 1000000,
    "versionName": "1.0.0",
    "icon": "$media:layered_image",
    "label": "$string:app_name"
  }
}
{
  "float": [
    {
      "name": "page_text_font_size",
      "value": "50fp"
    }
  ]
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    }
  ]
}
import { BottomPop, StyleConst, ThirdApp, thirdAppManager, toast,locationManager } from "@tbs/common"
import { AddressData, ChargeType, mapListItem, PileType } from "../model/ChargeModel"
import { getPiles } from "../viewModel/ChargeViewModel"
import { ChargeItemDialogView } from "./ChargeItemDialogView"
import { router } from "@kit.ArkUI"
import '../page/ChargingPage'
import { OpenLinkOptions, common } from "@kit.AbilityKit"
import { BusinessError } from "@kit.BasicServicesKit"
import { geoLocationManager } from "@kit.LocationKit"
import { MapDialogCall } from "./MapDialogCall"
@Component
export struct ChargeListView {
  @Prop chargeList: ChargeType[]
  @State Piles: PileType[] = []
  @State destinationLongitude: number = 0
  @State destinationLatitude: number = 0
  @State destinationName: string = ''
  @State mapList: mapListItem[] = []
  locationData: AddressData = {}
  private selectMapDialogController?: CustomDialogController
  async getPileData(id: number) {
    let data = await getPiles(id)
    if (data) {
      this.Piles = data
    }
  }
  aboutToDisappear(): void {
    this.chargeItemController = null
    this.selectMapDialogController?.close()
    this.selectMapDialogController = undefined
  }
  chargeItemController: CustomDialogController | null = new CustomDialogController({
    builder: BottomPop({
      title: $r('app.string.selection_of_charging_pile'),
      bgColor: $r('app.color.color_f0f2f4'),
      titleBgColor: $r('app.color.color_f0f2f4'),
      contentBgColor: $r('app.color.color_f0f2f4'),
      keyboardAvoidMode: KeyboardAvoidMode.NONE,
      childBuilderParam: () => {
        this.chargeItemDialog()
      }
    }),
    customStyle: true,
    alignment: DialogAlignment.Bottom,
    maskColor: $r('app.color.color_80000000'),
  })
  @Builder
  chargeItemDialog() {
    ChargeItemDialogView({
      Piles: this.Piles,
      clickPileItemCallBack: (item: PileType) => {
        this.clickPileItem(item)
      }
    })
  }
  //单个桩点击处理
  clickPileItem(item: PileType) {
    if (item.state === 0) {
      this.chargeItemController?.close()
      router.pushNamedRoute({
        name: 'ChargingPage',
        params: { item }
      })
    } else if (item.state === 1) {
      toast('此桩正在充电中～')
    } else {
      toast('桩故障，无法充电哦～')
    }
  }
  @Builder
  chargeItem(item: ChargeType) {
    Column({ space: 12 }) {
      Text(item.name).fontWeight(FontWeight.Bold)
        .onClick(() => {
          this.chargeItemController?.open()
          if (item.id) {
            this.getPileData(item.id)
          }
        })
      Row({ space: 8 }) {
        Text(`￥ ${item.pricePerHour}`).fontColor($r('app.color.color_0aa671'))
        Text('/度').fontColor($r('app.color.color_adadb3'))
        Blank()
        Text(item.tenantName).fontSize($r('app.float.size_text_18')).fontColor($r('app.color.color_0aa671'))
        Blank()
        Image($r('app.media.fast')).width($r('app.float.size_20'))
        Text(`闲${item.freePileTotal}`).fontWeight(FontWeight.Bold)
        Text(`/${item.pileTotal}`)
      }
      .width(StyleConst.FULL_WIDTH)
      .onClick(() => {
        this.chargeItemController?.open()
        if (item.id) {
          this.getPileData(item.id)
        }
      })
      Row({ space: 8 }) {
        Row({ space: 8 }) {
          if (item.distance) {
            Text(`${item.distance.toFixed(2)}km`)
          }
          Image($r('app.media.location')).width($r('app.float.size_20'))
        }
        .onClick(()=>{
          this.handleCheckInstallation(item)
        })
        Image($r('app.media.imgUrl')).width($r('app.float.size_20'))
      }
    }
    .backgroundColor($r('app.color.color_fff'))
    .padding({
      left: $r('app.float.size_10'),
      right: $r('app.float.size_10'),
      top: $r('app.float.size_15'),
      bottom: $r('app.float.size_15')
    })
    .borderRadius($r('app.float.size_20'))
    .alignItems(HorizontalAlign.Start)
  }
  //有数据页面
  @Builder
  haveDataCardView() {
    //列表
    List({ space: 10 }) {
      ForEach(this.chargeList, (item: ChargeType) => {
        ListItem() {
          this.chargeItem(item)
        }
      })
    }
    .width(StyleConst.FULL_WIDTH)
    .padding($r('app.float.size_10'))
    .layoutWeight(1)
  }
  //无数据页面
  @Builder
  noDataCardView() {
    Column() {
      Image($r('app.media.empty_charge1'))
        .width($r('app.float.size_100'))
        .height($r('app.float.size_100'))
      Text($r('app.string.no_data'))
        .fontSize($r('app.float.size_text_20'))
        .fontColor(Color.Black)
        .fontWeight(FontWeight.Bold)
        .margin({ top: $r('app.float.size_20'), bottom: $r('app.float.size_24') })
    }
    .margin({ top: $r('app.float.size_200') })
  }
  handleCheckInstallation(item: ChargeType) {
    this.isAppInstalled(item)
    if (this.mapList.length === 0) {
      toast($r('app.string.visit_store_install_maps_first'))
    } else {
      this.permissionRequest()
    }
  }
  isAppInstalled(model: ChargeType) {
    const mapList = [ThirdApp.Amapuri, ThirdApp.Baidumap, ThirdApp.Maps].map((key: ThirdApp) => {
      let name: Length = ''
      let link: string = ""
      switch (key) {
        case ThirdApp.Amapuri:
          link =
            `amapuri://route/plan?dlat=${model.coordinate?.split(',')[0]}&dname=${model.name}&slat=${this.locationData.latitude}&dlon=${model.coordinate?.split(',')[1]}&slon=${this.locationData.longitude}&sname=我的位置&t=0&sourceApplication=com.huawei.hmos.maps.app`
          name = $r('app.string.visit_store_map')
          break
        case ThirdApp.Baidumap:
          name = $r('app.string.visit_store_baidu_map')
          link =
            `baidumap://map/direction?destination=latlng:${model.coordinate?.split(',')[0]},${model.coordinate?.split(',')[1]}|name:${model.name}&mode=driving`
          break
        case ThirdApp.Maps:
          name = $r('app.string.visit_store_petal_map')
          link =
            `https://www.petalmaps.com/routes/?daddr=${model.coordinate?.split(',')[0]},${model.coordinate?.split(',')[1]}(${model.name})&coordinateType=0&type=drive&utm_source=com.huawei.hmos.maps.app`
          break
        default:
          name = ""
      }
      return {
        name,
        link,
        isAppInstall: thirdAppManager.isAppInstall(key)
      } as mapListItem
    })
    console.log('lucy== map',JSON.stringify(mapList))
    this.mapList = mapList.filter(ele => ele.isAppInstall)
  }
  async permissionRequest() {
    try {
      let isGranted = await locationManager.checkAndApplyPermissions(getContext(this))
      if (!isGranted) {
        isGranted = await locationManager.requestPermissionAgain()
      }
      if (isGranted) {
        this.selectMapDialogController = new CustomDialogController({
          builder: MapDialogCall({
            title: '请选择地图',
            titleFontSize: $r('app.float.size_13'),
            titleTextColor: '#acb1b6',
            mapList: this.mapList,
            propBackgroundColor: Color.Transparent,
            propBorderRadius: $r('app.float.size_8'),
            propHeight: $r('app.float.size_50'),
            propSpace: 0,
            titleHeight: $r('app.float.size_42'),
            propContentPadding: {
              top: $r('app.float.size_12'),
              bottom: 0
            },
            propPadding: {
              left: $r('app.float.size_12'),
              right: $r('app.float.size_12'),
              bottom: $r('app.float.size_31'),
            },
            onClickCallBack: (item) => {
              this.handleStartNavigation(item)
            }
          }),
          customStyle: true,
          autoCancel: true,
          alignment: DialogAlignment.Bottom,
          keyboardAvoidMode: KeyboardAvoidMode.NONE
        })
        this.selectMapDialogController.open()
        const request: geoLocationManager.SingleLocationRequest = {
          locatingPriority: geoLocationManager.LocatingPriority.PRIORITY_LOCATING_SPEED,
          locatingTimeoutMs: 10000
        };
        await geoLocationManager.getCurrentLocation(request).then((location) => {
          // 获取到的经纬度
          this.locationData.latitude = location.latitude;
          this.locationData.longitude = location.longitude;
        }).catch((err: object) => {
          console.error("lucy== 获取位置失败:", JSON.stringify(err));
        });
      }
    } catch (e) {
      console.log('lucy== Address request location Permission fail' + e.message)
    }
  }
  handleStartNavigation(item: mapListItem) {
    this.selectMapDialogController?.close()
    this.jumpToMapApp(item.link)
  }
  jumpToMapApp(link: string) {
    try {
      const openLinkOptions: OpenLinkOptions = {
        appLinkingOnly: false
      };
      const context = getContext(this) as common.UIAbilityContext
      context.openLink(link, openLinkOptions)
        .then(() => {
          console.log('open link success.');
        }).catch((err: BusinessError) => {
        console.log(`open link failed. Code is ${err.code}, message is ${err.message}`);
      });
    } catch (paramError) {
      console.log(`Failed to start link. Code is ${paramError.code}, message is ${paramError.message}`);
    }
  }
  build() {
    if (this.chargeList.length > 0) {
      this.haveDataCardView()
    } else {
      this.noDataCardView()
    }
  }
}
import { StyleConst } from "@tbs/common"
import { mapListItem } from "../model/ChargeModel"
interface TextStyle {
  height: Length
}
@Extend(Text)
//文本样式
function textStyles(item: TextStyle) {
  .fontColor($r('app.color.color_0165b8'))
  .textAlign(TextAlign.Center)
  .fontSize($r('app.float.size_18'))
  .height(item.height)
}
@CustomDialog
@Component
export struct MapDialogCall {
  mapList: mapListItem[] = []
  controller: CustomDialogController
  propBackgroundColor: Color | number | string | Resource = '#f3f4f5'
  propPadding: Padding | Length | LocalizedPadding = {}
  propBorderRadius: ResourceStr = '0'
  title: ResourceStr = '';
  titlePadding: Padding = { top: $r('app.float.size_16'), bottom: $r('app.float.size_16') }
  titleFontSize: ResourceStr = $r('app.float.size_text_16')
  titleTextColor: ResourceColor = '#222427'
  titleBgColor: ResourceColor = Color.Transparent
  onClickCallBack?: (ele: mapListItem) => void
  propHeight: Length = $r('app.float.size_25')
  propSpace: number = 13
  propContentPadding: Padding | Length | LocalizedPadding = {
    top: $r('app.float.size_12'),
    bottom: $r('app.float.size_12')
  }
  titleHeight: Length = 0
  build() {
    Column({ space: 12 }) {
      Column({ space: this.propSpace }) {
        Text(this.title)
          .fontColor(this.titleTextColor)
          .fontSize(this.titleFontSize)
          .textAlign(TextAlign.Center)
          .width(StyleConst.FULL_WIDTH)
          .height(this.titleHeight)
        ForEach(
          this.mapList,
          (ele: mapListItem) => {
            Text(ele.name)
              .textStyles({ height: this.propHeight })
              .onClick(() => {
                this.onClickCallBack && this.onClickCallBack(ele)
              })
          }
        )
      }
      .borderRadius(this.propBorderRadius)
      .justifyContent(FlexAlign.Center)
      .width(StyleConst.FULL_WIDTH)
      .backgroundColor(Color.White)
      .padding(this.propContentPadding)
      Row() {
        Text('取消')
          .textStyles({ height: this.propHeight })
          .fontColor($r('app.color.color_0165b8'))
          .width(StyleConst.FULL_WIDTH)
      }
      .borderRadius(this.propBorderRadius)
      .backgroundColor(Color.White)
      .height($r('app.float.size_50'))
      .margin({ bottom: $r('app.float.size_16') })
      .onClick(()=>{
        this.controller.close()
      })
    }
    .padding(this.propPadding)
    .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor(this.propBackgroundColor)
  }
}
import { ScreenUtils, StyleConst } from "@tbs/common"
@Extend(TextInput)
function orderInputStyle(focus: boolean) {
  .textAlign(TextAlign.Start)
  .fontColor(Color.Black)
  .placeholderColor($r('app.color.color_898e92'))
  .placeholderFont({ size: $r('app.float.size_text_13') })
  .fontSize($r('app.float.size_text_14'))
  .backgroundColor(Color.Transparent)
  .enterKeyType(EnterKeyType.Search) //设置输入法回车键类型 显示为搜索样式
  .defaultFocus(focus)
}
@Component
export struct ChargeSearchBarView {
  @Link name: string
  @State cancelMode: CancelButtonStyle = CancelButtonStyle.INVISIBLE // 输入框清除按钮模式
  inputController?: TextInputController
  keyboardFocus: boolean = false // 控制键盘首次是否自动弹出
  maxLength: number = Infinity
  searchButtonCallback?: (value: string) => void // 点击搜索按钮回调
  //输入框
  @Builder
  inputBuilder() {
    Row() {
      Image($r('app.media.search_icon'))
        .width($r('app.float.size_18'))
        .height($r('app.float.size_18'))
        .margin({ left: $r('app.float.size_7') })
      TextInput({
        text: this.name,
        placeholder: $r('app.string.search_content'),
        controller: this.inputController
      })
        .orderInputStyle(this.keyboardFocus)
        .maxLines(this.maxLength)
        .layoutWeight(1)
        .cancelButton({
          style: this.cancelMode,
          icon: { src: $r('app.media.search_delete'), size: $r('app.float.size_14') }
        })
        .padding({ left: $r('app.float.size_6') })
        .onChange((value: string) => {
          this.name = value
          if (value) {
            //输入框有值时，清除按钮显示
            this.cancelMode = CancelButtonStyle.INPUT
          }
        })
        .onSubmit(() => {
          this.lostKeyboard()
          if (this.searchButtonCallback) {
            this.searchButtonCallback(this.name)
          }
        })
    }
    .height($r('app.float.size_34'))
    .clip(true)
    .layoutWeight(1)
    .backgroundColor($r('app.color.color_fff'))
    .borderRadius($r('app.float.size_8'))
    .margin({ left: $r('app.float.size_6'), right: $r('app.float.size_8') })
  }
  //搜索按钮
  @Builder
  searchButtonBuilder() {
    Text($r('app.string.search'))
      .fontSize($r('app.float.size_text_14'))
      .fontColor($r('app.color.color_0aa671'))
      .fontWeight(FontWeight.Medium)
      .height($r('app.float.size_30'))
      .padding({ left: $r('app.float.size_12'), right: $r('app.float.size_12') })
      .backgroundColor(Color.White)
      .borderRadius($r('app.float.size_6'))
      .onClick(() => {
        if (this.searchButtonCallback) {
          this.searchButtonCallback(this.name)
        }
        if (this.name) {
          this.lostKeyboard()
        }
      })
  }
  lostKeyboard() {
    if (this.inputController) {
      this.inputController.stopEditing()
    }
  }
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight()).backgroundColor($r('app.color.color_0aa671'))
      Row() {
        //输入框
        this.inputBuilder()
        //搜索按钮
        this.searchButtonBuilder()
      }
      .width(StyleConst.FULL_WIDTH)
      .padding({ left: $r('app.float.size_12'), right: $r('app.float.size_12') })
      .margin({ bottom: $r('app.float.size_15') })
    }
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
// import { PriceType } from "../model/ChargeModel"
//
//
// //标题样式
// @Extend(Text) function PriceHeaderSty(){
//   .fontSize(18).fontWeight(FontWeight.Bold).fontColor(Color.White)
// }
// //行内样式
// @Extend(Text) function PriceCellSty(){
//   .fontSize(20).textAlign(TextAlign.Center)
// }
// @Component
// export struct ChargePriceDialogView {
//   @Prop priceList:PriceType[]
//
//   build() {
//     Column({space:10}){
//       Text('收费标准').textAlign(TextAlign.Center).fontWeight(FontWeight.Bold).fontSize(25)
//       Column({space:10}){
//         Row({space:50}){
//           Text('收费时段').PriceHeaderSty()
//           Text('收费(元/度)').PriceHeaderSty().margin({left:20})
//         }
//         .width('90%')
//         .padding(15)
//         .backgroundColor('#0aa671')
//         .borderRadius(5)
//         Column({space:10}){
//           List({space:10}){
//             ForEach(this.priceList,(item:PriceType) => {
//               ListItem(){
//                 Column(){
//                   Row({space:100}){
//                     Text(`${item.startHour} - ${item.endHour}`).width(80).PriceCellSty()
//                     Text(`${item.price}`).width(60).PriceCellSty()
//                   }
//                   .width('90%')
//                   .height(40)
//                   Divider().width('95%').opacity(0.6)
//                 }
//               }
//             })
//           }
//           .width('90%')
//           .layoutWeight(1)
//         }
//         .width('90%')
//         .height(180)
//         .padding(10)
//         .borderWidth(1).borderColor(Color.Gray)
//       }
//       .width('90%')
//     }
//     .width('100%')
//     .padding(10)
//   }
// }
import { PriceType } from "../model/ChargeModel"
@Component
export struct ChargePriceDialogView {
  @Prop priceList:PriceType[]
  build() {
    Column() {
      // 顶部标题
      this.buildHeader()
      // 价格表格区域
      this.buildPriceTable()
      // 分隔线
      Divider()
        .strokeWidth(1)
        .color('#e0e0e0')
        .margin({ top: 25, bottom: 20 })
      // 底部提示
      this.buildFooter()
    }
    .padding(20)
    .backgroundColor('#f5f7fa')
    .borderRadius(12)
    .width('100%')
    .height('auto')
  }
  // 顶部标题组件
  @Builder
  buildHeader() {
    Text('桩编号：00205020101100000000323')
      .fontSize(14)
      .fontColor('#666666')
      .margin({ bottom: 15 })
  }
  // 价格表格组件 - 简化为两列
  @Builder
  buildPriceTable() {
    Column() {
      // 表头 - 左右分布
      Row() {
        Text('充电时段')
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .layoutWeight(1) // 左边占据1份空间
        Text('价格（元/度）')
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .layoutWeight(1) // 右边占据1份空间
      }
      .width('100%')
      .padding({ bottom: 10 })
      // 表格内容 - 左右分布
      ForEach(this.priceList,
        (item: PriceType, index: number) => {
          Row() {
            Text(`${item.startHour} - ${item.endHour}`)
              .fontSize(16)
              .fontColor('#333333')
              .layoutWeight(1) // 左边占据1份空间
            if(item.price){
              Text(`${item.price}`)
                .fontSize(16)
                .fontColor('#e91e63')// 价格使用红色强调
                .fontWeight(FontWeight.Medium)
                .layoutWeight(1) // 右边占据1份空间
            }
          }
          .width('100%')
          .padding({ top: 10, bottom: 10 })
          .backgroundColor(index % 2 === 0 ? '#ffffff' : '#f8f9fa')
        })
    }
    .width('100%')
    .padding(12)
    .backgroundColor(Color.White)
    .borderRadius(8)
    .shadow({
      radius: 4,
      color: '#20000000',
      offsetX: 1,
      offsetY: 1
    })
  }
  // 底部提示组件
  @Builder
  buildFooter() {
    Text('*充电费用仅供参考，请以实际收取费用为准')
      .fontSize(12)
      .fontColor('#999999')
      .fontStyle(FontStyle.Italic)
      .alignSelf(ItemAlign.Start)
  }
}
import { StorageConst, ScreenUtils, StyleConst } from "@tbs/common"
import { pileParam, pileParamType, PileType } from "../model/ChargeModel"
@Component
export struct ChargeItemDialogView {
  @StorageProp(StorageConst.SCREEN_WIDTH_VP) screenWidth: number =
    ScreenUtils.getInstance().getScreenWidthVp()
  @Prop Piles: PileType[]
  clickPileItemCallBack?: (item:PileType) => void
  @Builder
  pileItem(item: PileType) {
    Row() {
      //左
      this.pileItemLeftBuilder(item)
      //右
      this.pileItemRightBuilder(item)
    }
    .padding({ top: $r('app.float.size_12'), bottom: $r('app.float.size_12') })
    .width(this.screenWidth - 12 * 2)
    .margin({ bottom: $r('app.float.size_12') })
    .borderRadius($r('app.float.size_12'))
    .backgroundColor(Color.White)
    .onClick(() => {
      if (this.clickPileItemCallBack) {
        this.clickPileItemCallBack(item)
      }
    })
  }
  //桩左侧UI
  @Builder
  pileItemLeftBuilder(item: PileType) {
    Column({ space: 10 }) {
      Image(this.pileImage(item.state ?? 0))
        .height($r('app.float.size_30'))
      Text(this.pileStateText(item.state ?? 0))
        .textAlign(TextAlign.Center)
        .fontSize($r('app.float.size_text_10'))
        .fontColor(this.pileStateTextColor(item.state ?? 0))
        .width($r('app.float.size_40'))
        .height($r('app.float.size_20'))
        .border({
          width: $r('app.float.size_1'),
          color: this.pileStateTextColor(item.state ?? 0),
          style: BorderStyle.Solid,
          radius: $r('app.float.size_20')
        })
    }
    .margin({ left: $r('app.float.size_20'), right: $r('app.float.size_20') })
  }
  //桩右侧UI
  @Builder
  pileItemRightBuilder(item: PileType) {
    Column({ space: 10 }) {
      Text() {
        Span($r('app.string.pile_number')).fontColor($r('app.color.color_898e92'))
        Span(item.code).fontColor(Color.Black)
      }.fontSize($r('app.float.size_text_14'))
      Text() {
        Span($r('app.string.station_name')).fontColor($r('app.color.color_898e92'))
        Span(item.stationName).fontColor(Color.Black)
      }.fontSize($r('app.float.size_text_14'))
      Row({ space: 10 }) {
        ForEach(pileParam, (item: pileParamType) => {
          Row() {
            Text(item.text)
              .textAlign(TextAlign.Center)
              .fontSize($r('app.float.size_text_11'))
              .fontColor(Color.Black)
          }
          .backgroundColor($r('app.color.color_f5f5f5'))
          .padding({
            top: $r('app.float.size_5'),
            bottom: $r('app.float.size_5'),
            left: $r('app.float.size_8'),
            right: $r('app.float.size_8')
          })
        })
      }
    }
    .layoutWeight(1)
    .alignItems(HorizontalAlign.Start)
  }
  //区分不同状态的桩图片
  pileImage(state: number) {
    switch (state) {
      case 0:
        return $r('app.media.pile_idle')
      case 1:
        return $r('app.media.pile_charging_in_progress')
      case 2:
        return $r('app.media.pile_faults')
      default:
        return $r('app.media.pile_idle')
    }
  }
  //区分不同状态的文本
  pileStateText(state: number) {
    switch (state) {
      case 0:
        return $r('app.string.idle')
      case 1:
        return $r('app.string.charging_in_progress')
      case 2:
        return $r('app.string.faults')
      default:
        return $r('app.string.idle')
    }
  }
  //区分不同状态的文本颜色
  pileStateTextColor(state: number) {
    switch (state) {
      case 0:
        return $r('app.color.color_009688')
      case 1:
        return $r('app.color.color_d68751')
      case 2:
        return $r('app.color.color_F44336')
      default:
        return $r('app.color.color_009688')
    }
  }
  build() {
    List() {
      ForEach(this.Piles, (item: PileType) => {
        ListItem() {
          this.pileItem(item)
        }
        .width(StyleConst.FULL_WIDTH)
      })
    }
    .width(StyleConst.FULL_WIDTH)
  }
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "charge",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/charge",
		"installationFree": false
	}
}
@Component
export struct ScanPage {
  build() {
    Text('ScanPage')
  }
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
export * from './src/main/ets/common'
export * from './src/main/ets/http'
export * from './src/main/ets/widgets'
export * from './src/main/ets/manager'
export * from './src/main/ets/utils'
export { CommonDataSource } from './src/main/ets/model/CommonDataSource'
export * from './src/main/ets/location'
{
  "name": "@tbs/common",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {}
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
{
  "module": {
    "name": "charge_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
{
  "layered-image":
  {
    "background" : "$media:background",
    "foreground" : "$media:foreground"
  }
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
{
  "module": {
    "name": "common_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
export * from './ShowToast'
export * from './BottomPop'
export class CommonDataSource<T> implements IDataSource {
  private listeners: DataChangeListener[] = [];
  protected items: T[] = []
  public totalCount(): number {
    return this.items.length
  }
  public getData(index: number): T | void {
    return this.items[index]
  };
  public getList(): T[] {
    return this.items
  }
  public clearData() {
    this.items = [];
    this.notifyDataReload()
  }
  public resetData(data: T | T[]) {
    this.items = [];
    if (Array.isArray(data)) {
      this.items.push(...data);
    } else {
      this.items.push(data);
    }
    this.notifyDataReload()
  }
  public setDataArray(data: T[]) {
    this.items = data
    this.notifyDataReload()
  }
  // 向列表追加数据
  public pushData(data: T | T[]): void {
    let fromIndex = this.items.length
    if (Array.isArray(data)) {
      this.items.push(...data)
    } else {
      this.items.push(data)
    }
    this.notifyDatasetAdd(fromIndex, this.items.length - fromIndex)
  }
  public changeItem(index: number) {
    this.notifyDataChange(index)
  }
  public deleteData(index: number): void {
    this.items.splice(index, 1);
    this.notifyDataDelete(index);
  }
  registerDataChangeListener(listener: DataChangeListener): void {
    if (this.listeners.indexOf(listener) < 0) {
      this.listeners.push(listener);
    }
  }
  unregisterDataChangeListener(listener: DataChangeListener): void {
    const pos = this.listeners.indexOf(listener);
    if (pos >= 0) {
      this.listeners.splice(pos, 1);
    }
  }
  notifyDataReload(): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.RELOAD }]);
    });
  }
  notifyDatasetAdd(insertIndex: number, addCount: number): void {
    this.listeners.forEach(listener => {
      listener.onDatasetChange([{ type: DataOperationType.ADD, index: insertIndex, count: addCount }]);
    })
  }
  notifyDataChange(changeIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.CHANGE, index: changeIndex }]);
    });
  }
  notifyDataDelete(deleteIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.DELETE, index: deleteIndex }]);
    });
  }
}
import { StyleConst } from "../common";
import { ScreenUtils, WindowModel,ComponentUtils } from "../utils";
@CustomDialog
@Component
export struct BottomPop {
  controller: CustomDialogController;
  title: ResourceStr = '';
  titlePadding: Padding = { top: $r('app.float.size_16'), bottom: $r('app.float.size_16') }
  titleFontSize: ResourceStr = $r('app.float.size_text_16')
  titleTextColor: ResourceColor = Color.Black
  titleBgColor: ResourceColor = Color.Transparent
  contentBgColor: ResourceColor = Color.Transparent
  bgColor?: ResourceColor = Color.White
  // 软键盘是否显示
  @State keyBoardVisible: boolean = false
  keyboardAvoidMode: KeyboardAvoidMode = KeyboardAvoidMode.DEFAULT
  minHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.3 // 弹窗最低高度
  maxHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.8 // 弹窗最大高度
  @State dialogMaxHeight: number = 0 // 通过 maxHeight 计算出来的内容的高度
  @Builder
  child() {
  };
  @BuilderParam childBuilderParam: () => void = this.child;
  aboutToAppear(): void {
    if (this.isKeyboardAvoidNone()) {
      this.getKeyBoardVisible()
    }
    this.getTitleHeight()
  }
  // 软键盘是否拉起
  getKeyBoardVisible() {
    WindowModel.getInstance().getKeyBoardVisible((visible) => {
      this.keyBoardVisible = visible
    })
  }
  // 弹窗是否在拉起软键盘时进行自动避让
  isKeyboardAvoidNone() {
    return this.keyboardAvoidMode === KeyboardAvoidMode.NONE // 弹窗不避让软键盘
  }
  getTitleHeight() {
    ComponentUtils.getComponentHeightSync('BottomPop_title', (componentHeight) => {
      const safeBottomHeight = ScreenUtils.getInstance().getSafeBottomHeight() // 底部安全区高度
      // 内容最大高度 = 屏幕80%高度 - title高度 - 底部安全区高度
      this.dialogMaxHeight = Number(this.maxHeight) - componentHeight - safeBottomHeight
    })
  }
  build() {
    Stack({ alignContent: Alignment.TopEnd }) {
      Column() {
        Text(this.title)
          .padding(this.titlePadding)
          .fontColor(this.titleTextColor)
          .fontSize(this.titleFontSize)
          .fontWeight(FontWeight.Medium)
          .textAlign(TextAlign.Center)
          .width(StyleConst.FULL_WIDTH)
          .height($r('app.float.size_50'))
          .backgroundColor(this.titleBgColor)
          .id('BottomPop_title')
          .borderRadius({
            topLeft: $r('app.float.size_16'),
            topRight: $r('app.float.size_16')
          })
        Column() {
          this.childBuilderParam()
        }
        .backgroundColor(this.contentBgColor)
        .constraintSize({
          maxHeight: this.dialogMaxHeight,
        })
      }
      .padding({
        bottom: ScreenUtils.getInstance().getSafeBottomHeight(), // 设置padding避开底部安全区
      })
      .width(StyleConst.FULL_WIDTH)
      .backgroundColor(this.bgColor)
      .borderRadius({
        topLeft: $r('app.float.size_16'),
        topRight: $r('app.float.size_16')
      })
      .constraintSize({
        maxHeight: this.maxHeight,
        minHeight: this.minHeight
      })
      Image($r("app.media.common_bottom_sheet_close"))
        .size({ width: $r('app.float.size_20'), height: $r('app.float.size_20') })
        .margin({ top: $r('app.float.size_16'), right: $r('app.float.size_16') })
        .responseRegion({
          x: '-25%',
          y: '-25%',
          width: '150%',
          height: '150%'
        })
        .onClick(() => {
          this.controller.close();
        })
    }
  }
}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
import { promptAction } from '@kit.ArkUI'
//轻提示工具类
export const toast = (hintContent: string | ResourceStr, alignment: Alignment = Alignment.Center): void => {
  promptAction.showToast({ message: hintContent, alignment: alignment })
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "common",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/common",
		"installationFree": false
	}
}
import http from '@ohos.net.http';
import { commonStorage } from '../../../../Index';
import { StorageConst } from '../manager';
import { ResponseResult } from './response';
export function requestApiCall(url: string,
  method: http.RequestMethod,
  data?: Record<string, number | boolean | string | Object | undefined>,
  headers?: Record<string, string>,
): Promise<ResponseResult> {
  const BASE_URL = 'https://charging.lusson.xyz'
  const httpRequest = http.createHttp();
  const defaultHeaders: Record<string, string> = {
    'Content-Type': 'application/json',
  }
  const token = commonStorage.getStringValueSync(StorageConst.TOKEN, "")
  if (token) {
    defaultHeaders['Authorization'] = `Bearer ${token}`
  }
  const finalHeaders: Record<string, string> = {};
  Object.keys(defaultHeaders).forEach(key => {
    finalHeaders[key] = defaultHeaders[key];
  });
  if (headers) {
    Object.keys(headers).forEach(key => {
      finalHeaders[key] = String(headers[key]);
    });
  }
  let responseResult = httpRequest.request(BASE_URL + url, {
    method: method,
    extraData: data ? JSON.stringify(data) : undefined,
    header: finalHeaders
  });
  let response: ResponseResult = new ResponseResult();
  return responseResult.then((value: http.HttpResponse) => {
    if (value.responseCode === 200) {
      let res: ResponseResult = JSON.parse(`${value.result}`);
      response.data = res.data;
      response.code = res.code;
      response.message = res.message;
    } else {
      response.message = '请求错误';
      response.code = 400;
    }
    return response;
  }).catch((error: Error) => {
    console.log('lucy++ error', JSON.stringify(error))
    response.message = '请求错误';
    response.code = 400;
    return response;
  })
}
export class UserInfoData {
  id?: number
  username?: string
  nickname?: string
  balance?: number
  avatarUrl?: string
}
export class Apis {
  //注册
  static readonly USER_REGISTER = "/saas-api/tenant/register"
  //获取token-登录
  static readonly USER_LOGIN = "/saas-api/user/login"
  //获取租户ID
  static readonly USER_TENANT = "/saas-api/tenant/selects"
  //获取用户信息
  static readonly USER_INFO = "/wx-api/me/info"
  //获取充电站
  static readonly CHARGE_STATION_LIST = "/wx-api/station/list"
  //获取充电桩
  static readonly CHARGE_PILE_LIST = "/wx-api/pile/list"
  //获取充电价格
  static readonly CHARGE_PRICE = "/wx-api/price/list"
  //开始充电
  static readonly CHARGE_START = "/wx-api/charge/start"
  //结束充电
  static readonly CHARGE_STOP = "/wx-api/charge/stop"
  //获取充电订单列表
  static readonly CHARGE_ORDER_LIST = "/wx-api/charge/list"
}
export class ResponseResult {
  code?: number
  message?: string
  data?: object
}
export { requestApiCall } from './httpUtils'
export * from './Apis'
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
export * from './StorageConst'
export * from './RoutePageConst'
export * from './UserCenterConst'
export * from './StyleConst'
export * from './TbsTitleBar'
export * from './BottomLoadingBuilder'
export class StorageConst {
  static readonly TOKEN = 'token'
  static readonly USER_INFO = 'userInfo'
  // 屏幕宽高
  static readonly SCREEN_WIDTH_VP = 'screenWidthVp'
  static readonly SCREEN_HEIGHT_VP = 'screenHeightVp'
  // 折叠屏显示模式
  static readonly FOLD_DISPLAY_MODE = 'foldDisplayMode'
  static readonly SEARCH_HISTORY = "search_history"
}
import { ScreenUtils, StyleConst } from "../../../../Index"
import { router } from "@kit.ArkUI"
@Component
export struct TbsTitleBar {
  @Prop title: ResourceStr = ''
  @Prop showBackIcon: boolean = false
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight())
      RelativeContainer() {
        Text(this.title)
          .fontColor(Color.White)
          .fontSize($r('app.float.size_text_20'))
          .textAlign(TextAlign.Center)
          .maxLines(1)
          .id('text')
          .alignRules({
            center: { anchor: "__container__", align: VerticalAlign.Center },
            middle: { anchor: "__container__", align: HorizontalAlign.Center }
          })
        if (this.showBackIcon) {
          Image($r('app.media.back'))
            .width($r('app.float.size_45'))
            .id('image')
            .alignRules({
              left: { anchor: "__container__", align: HorizontalAlign.Start }
            })
            .onClick(() => {
              router.back()
            })
        }
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_45'))
    }
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
import { StorageConst } from "./StorageConst"
import { UserInfoData } from "../model/UserInfoModel"
import { commonStorage } from "../utils"
class UserCenterConst {
  userInfo: UserInfoData | null = null
  getUserInfoData(): UserInfoData | null {
    if (this.userInfo) {
      return this.userInfo;
    }
    const value = commonStorage.getStringValueSync(StorageConst.USER_INFO, '');
    // 如果已经是对象，直接使用
    if (value && typeof value === 'object') {
      this.userInfo = value as UserInfoData;
      return this.userInfo;
    }
    // 如果是字符串，尝试解析
    if (typeof value === 'string' && value) {
      const p = JsonParse<UserInfoData>(value);
      if (p) {
        this.userInfo = p;
        return this.userInfo;
      }
    }
    return null;
  }
}
function JsonParse<T>(text: string): T | undefined {
  try {
    return JSON.parse(text);
  } catch (e) {
    console.error(`JSON解析错误: ${text}, 错误信息: ${e}`);
    return undefined;
  }
}
export default new UserCenterConst()
export class StyleConst {
  // 宽高
  static readonly FULL_WIDTH: string = '100%';
  static readonly FULL_HEIGHT: string = '100%';
  static readonly PERCENT_10 = '10%'
  static readonly PERCENT_15 = '15%'
  static readonly PERCENT_17 = '17%'
  static readonly PERCENT_20 = '20%'
  static readonly PERCENT_25 = '25%'
  static readonly PERCENT_30 = '30%'
  static readonly PERCENT_35 = '35%'
  static readonly PERCENT_40 = '40%'
  static readonly PERCENT_45 = '45%'
  static readonly PERCENT_50 = '50%'
  static readonly PERCENT_60 = '60%'
  static readonly PERCENT_65 = '65%'
  static readonly PERCENT_70 = '70%'
  static readonly PERCENT_72 = '72%'
  static readonly PERCENT_75 = '75%'
  static readonly PERCENT_80 = '80%'
  static readonly PERCENT_85 = '85%'
  static readonly PERCENT_90 = '90%'
  static readonly PERCENT_95 = '95%'
  static readonly PERCENT_100 = '100%'
}
import { StyleConst } from "../../../../Index"
@Component
export struct BottomLoadingBuilder {
  @Prop haveNextPage: boolean
  @Prop loading: boolean
  @Prop dataLength: number
  build() {
    if (this.haveNextPage && this.loading) {
      Row() {
        LoadingProgress()
          .width($r('app.float.size_30'))
          .height($r('app.float.size_30'))
          .margin({ right: $r('app.float.size_10') })
        Text($r('app.string.loading'))
          .fontSize($r('app.float.size_text_14'))
          .fontColor($r('app.color.color_666'))
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_60'))
      .justifyContent(FlexAlign.Center)
    } else if (!this.haveNextPage && this.dataLength > 0) {
      Text($r('app.string.there_is_no_more_data'))
        .fontSize($r('app.float.size_text_14'))
        .fontColor($r('app.color.color_999'))
        .textAlign(TextAlign.Center)
        .width(StyleConst.FULL_WIDTH)
        .margin({ top: $r('app.float.size_10'), bottom: $r('app.float.size_20') })
    }
  }
}
export class RoutePageConst {
  static readonly AppHomePage = "home/HomePage" //App-充电页面
  static readonly LoginPage = "login/LoginPage" //App-登录页面
}
{
  "module": {
    "name": "charge",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
{
  "module": {
    "name": "common",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
import { componentUtils, inspector } from "@kit.ArkUI"
export class ComponentUtils {
  /**
   * 同步方式获取组件渲染后的实际高度
   * @param componentId 组件ID
   * @param callback 注册的回调函数
   */
  static getComponentHeightSync(componentId: string, callback: (width: number) => void): void {
    // 监听组件
    const listener = inspector.createComponentObserver(componentId)
    // 注册回调
    listener.on('layout', () => {
      const componentInfo = componentUtils.getRectangleById(componentId)
      const height = px2vp(componentInfo.size.height)
      callback?.(height)
      // 取消注册回调
      listener.off('layout')
    })
  }
}
//封装一个函数：简化时间格式
export const formatDate = (dateStr:string)=>{
  const date = new Date(dateStr)
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}
import measure from '@ohos.measure'
export class TextUtil{
  static getTextWidth(textContent: string,
    fontSize: number | string | Resource = $r('app.float.size_text_14'), maxLines: number = 1,
    weight: FontWeight | number = FontWeight.Regular): number {
    if (!textContent || textContent.length === 0) {
      return 0
    }
    const width: number = measure.measureText({
      textContent: textContent,
      fontSize: fontSize,
      fontWeight: weight,
      maxLines: maxLines
    })
    return px2vp(width)
  }
}
export class ChargeListData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: ChargeType[]
}
export class ChargeType {
  address?: string //地址
  coordinate?: string //坐标
  distance?: number //距离
  freePileTotal?: number //空闲数据
  id?: number //id
  imageUrl?: string //图片
  name?: string //站名
  pileTotal?: number //剩余数据
  pricePerHour?: number //多少钱一度
  tenantId?: number //租户id
  tenantName?: string //租户
}
export class PileListData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: PileType[]
}
export class PileType {
  code?: string //编号
  id?: number //id
  state?: number //充电桩状态
  stationId?: number //充电站站id
  stationName?: string //充电站站名
}
export class PriceListData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: PriceType[]
}
export class PriceType {
  endHour?: number|string  //结束时间
  id?: number  //id
  price?: string   //价格
  startHour?: number|string  //开始时间
  tenantId?: number  //租户id
}
export class OrderTypeData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: OrderType[]
}
export class OrderType{
  id?: number  //id
  pileCode?: string  //充电桩编号
  orderCode?: string  //订单号
  price?: number  //价格
  startAt?: string  //开始时间
  state?: number  //订单状态
  stationName?: string  //充电站名
  stopAt?: string  //结束时间
}
export class mapListItem {
  name: ResourceStr = ''
  link: string = ''
  isAppInstall: boolean = false
}
export class AddressData {
  latitude?: number = 0.0;
  longitude?: number = 0.0;
}
//桩参数
export const pileParam: Array<pileParamType> = [
  { text: $r('app.string.fast_charge'), type: '1' },
  { text: $r('app.string.180KW'), type: '2' },
  { text: $r('app.string.0V'), type: '3' },
  { text: $r('app.string.national_standard'), type: '4' }
]
export class pileParamType {
  text?: ResourceStr
  type?: string
}
import { ScreenUtils, StyleConst } from "@tbs/common"
@Extend(TextInput)
function orderInputStyle(focus: boolean) {
  .textAlign(TextAlign.Start)
  .fontColor(Color.Black)
  .placeholderColor($r('app.color.color_898e92'))
  .placeholderFont({ size: $r('app.float.size_text_13') })
  .fontSize($r('app.float.size_text_14'))
  .backgroundColor(Color.Transparent)
  .enterKeyType(EnterKeyType.Search) //设置输入法回车键类型 显示为搜索样式
  .defaultFocus(focus)
}
@Component
export struct ChargeSearchBarView {
  @Link name: string
  @State cancelMode: CancelButtonStyle = CancelButtonStyle.INVISIBLE // 输入框清除按钮模式
  inputController?: TextInputController
  keyboardFocus: boolean = false // 控制键盘首次是否自动弹出
  maxLength: number = Infinity
  searchButtonCallback?: (value: string) => void // 点击搜索按钮回调
  //输入框
  @Builder
  inputBuilder() {
    Row() {
      Image($r('app.media.search_icon'))
        .width($r('app.float.size_18'))
        .height($r('app.float.size_18'))
        .margin({ left: $r('app.float.size_7') })
      TextInput({
        text: this.name,
        placeholder: $r('app.string.search_content'),
        controller: this.inputController
      })
        .orderInputStyle(this.keyboardFocus)
        .maxLines(this.maxLength)
        .layoutWeight(1)
        .cancelButton({
          style: this.cancelMode,
          icon: { src: $r('app.media.search_delete'), size: $r('app.float.size_14') }
        })
        .padding({ left: $r('app.float.size_6') })
        .onChange((value: string) => {
          this.name = value
          if (value) {
            //输入框有值时，清除按钮显示
            this.cancelMode = CancelButtonStyle.INPUT
          }
        })
        .onSubmit(() => {
          this.lostKeyboard()
          if (this.searchButtonCallback) {
            this.searchButtonCallback(this.name)
          }
        })
    }
    .height($r('app.float.size_34'))
    .clip(true)
    .layoutWeight(1)
    .backgroundColor($r('app.color.color_fff'))
    .borderRadius($r('app.float.size_8'))
    .margin({ left: $r('app.float.size_6'), right: $r('app.float.size_8') })
  }
  //搜索按钮
  @Builder
  searchButtonBuilder() {
    Text($r('app.string.search'))
      .fontSize($r('app.float.size_text_14'))
      .fontColor($r('app.color.color_0aa671'))
      .fontWeight(FontWeight.Medium)
      .height($r('app.float.size_30'))
      .padding({ left: $r('app.float.size_12'), right: $r('app.float.size_12') })
      .backgroundColor(Color.White)
      .borderRadius($r('app.float.size_6'))
      .onClick(() => {
        if (this.searchButtonCallback) {
          this.searchButtonCallback(this.name)
        }
        if (this.name) {
          this.lostKeyboard()
        }
      })
  }
  lostKeyboard() {
    if (this.inputController) {
      this.inputController.stopEditing()
    }
  }
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight()).backgroundColor($r('app.color.color_0aa671'))
      Row() {
        //输入框
        this.inputBuilder()
        //搜索按钮
        this.searchButtonBuilder()
      }
      .width(StyleConst.FULL_WIDTH)
      .padding({ left: $r('app.float.size_12'), right: $r('app.float.size_12') })
      .margin({ bottom: $r('app.float.size_15') })
    }
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
import { BottomPop, StyleConst, ThirdApp, thirdAppManager, toast,locationManager } from "@tbs/common"
import { AddressData, ChargeType, mapListItem, PileType } from "../model/ChargeModel"
import { getPiles } from "../viewModel/ChargeViewModel"
import { ChargeItemDialogView } from "./ChargeItemDialogView"
import { router } from "@kit.ArkUI"
import '../page/ChargingPage'
import { OpenLinkOptions, common } from "@kit.AbilityKit"
import { BusinessError } from "@kit.BasicServicesKit"
import { geoLocationManager } from "@kit.LocationKit"
import { MapDialogCall } from "./MapDialogCall"
@Component
export struct ChargeListView {
  @Prop chargeList: ChargeType[]
  @State Piles: PileType[] = []
  @State destinationLongitude: number = 0
  @State destinationLatitude: number = 0
  @State destinationName: string = ''
  @State mapList: mapListItem[] = []
  locationData: AddressData = {}
  private selectMapDialogController?: CustomDialogController
  async getPileData(id: number) {
    let data = await getPiles(id)
    if (data) {
      this.Piles = data
    }
  }
  aboutToDisappear(): void {
    this.chargeItemController = null
    this.selectMapDialogController?.close()
    this.selectMapDialogController = undefined
  }
  chargeItemController: CustomDialogController | null = new CustomDialogController({
    builder: BottomPop({
      title: $r('app.string.selection_of_charging_pile'),
      bgColor: $r('app.color.color_f0f2f4'),
      titleBgColor: $r('app.color.color_f0f2f4'),
      contentBgColor: $r('app.color.color_f0f2f4'),
      keyboardAvoidMode: KeyboardAvoidMode.NONE,
      childBuilderParam: () => {
        this.chargeItemDialog()
      }
    }),
    customStyle: true,
    alignment: DialogAlignment.Bottom,
    maskColor: $r('app.color.color_80000000'),
  })
  @Builder
  chargeItemDialog() {
    ChargeItemDialogView({
      Piles: this.Piles,
      clickPileItemCallBack: (item: PileType) => {
        this.clickPileItem(item)
      }
    })
  }
  //单个桩点击处理
  clickPileItem(item: PileType) {
    if (item.state === 0) {
      this.chargeItemController?.close()
      router.pushNamedRoute({
        name: 'ChargingPage',
        params: { item }
      })
    } else if (item.state === 1) {
      toast('此桩正在充电中～')
    } else {
      toast('桩故障，无法充电哦～')
    }
  }
  @Builder
  chargeItem(item: ChargeType) {
    Column({ space: 12 }) {
      Text(item.name).fontWeight(FontWeight.Bold)
        .onClick(() => {
          this.chargeItemController?.open()
          if (item.id) {
            this.getPileData(item.id)
          }
        })
      Row({ space: 8 }) {
        Text(`￥ ${item.pricePerHour}`).fontColor($r('app.color.color_0aa671'))
        Text('/度').fontColor($r('app.color.color_adadb3'))
        Blank()
        Text(item.tenantName).fontSize($r('app.float.size_text_18')).fontColor($r('app.color.color_0aa671'))
        Blank()
        Image($r('app.media.fast')).width($r('app.float.size_20'))
        Text(`闲${item.freePileTotal}`).fontWeight(FontWeight.Bold)
        Text(`/${item.pileTotal}`)
      }
      .width(StyleConst.FULL_WIDTH)
      .onClick(() => {
        this.chargeItemController?.open()
        if (item.id) {
          this.getPileData(item.id)
        }
      })
      Row({ space: 8 }) {
        Row({ space: 8 }) {
          if (item.distance) {
            Text(`${item.distance.toFixed(2)}km`)
          }
          Image($r('app.media.location')).width($r('app.float.size_20'))
        }
        .onClick(()=>{
          this.handleCheckInstallation(item)
        })
        Image($r('app.media.imgUrl')).width($r('app.float.size_20'))
      }
    }
    .backgroundColor($r('app.color.color_fff'))
    .padding({
      left: $r('app.float.size_10'),
      right: $r('app.float.size_10'),
      top: $r('app.float.size_15'),
      bottom: $r('app.float.size_15')
    })
    .borderRadius($r('app.float.size_20'))
    .alignItems(HorizontalAlign.Start)
  }
  //有数据页面
  @Builder
  haveDataCardView() {
    //列表
    List({ space: 10 }) {
      ForEach(this.chargeList, (item: ChargeType) => {
        ListItem() {
          this.chargeItem(item)
        }
      })
    }
    .width(StyleConst.FULL_WIDTH)
    .padding($r('app.float.size_10'))
    .layoutWeight(1)
  }
  //无数据页面
  @Builder
  noDataCardView() {
    Column() {
      Image($r('app.media.empty_charge1'))
        .width($r('app.float.size_100'))
        .height($r('app.float.size_100'))
      Text($r('app.string.no_data'))
        .fontSize($r('app.float.size_text_20'))
        .fontColor(Color.Black)
        .fontWeight(FontWeight.Bold)
        .margin({ top: $r('app.float.size_20'), bottom: $r('app.float.size_24') })
    }
    .margin({ top: $r('app.float.size_200') })
  }
  handleCheckInstallation(item: ChargeType) {
    this.isAppInstalled(item)
    if (this.mapList.length === 0) {
      toast($r('app.string.visit_store_install_maps_first'))
    } else {
      this.permissionRequest()
    }
  }
  isAppInstalled(model: ChargeType) {
    const mapList = [ThirdApp.Amapuri, ThirdApp.Baidumap, ThirdApp.Maps].map((key: ThirdApp) => {
      let name: Length = ''
      let link: string = ""
      switch (key) {
        case ThirdApp.Amapuri:
          link =
            `amapuri://route/plan?dlat=${model.coordinate?.split(',')[0]}&dname=${model.name}&slat=${this.locationData.latitude}&dlon=${model.coordinate?.split(',')[1]}&slon=${this.locationData.longitude}&sname=我的位置&t=0&sourceApplication=com.huawei.hmos.maps.app`
          name = $r('app.string.visit_store_map')
          break
        case ThirdApp.Baidumap:
          name = $r('app.string.visit_store_baidu_map')
          link =
            `baidumap://map/direction?destination=latlng:${model.coordinate?.split(',')[0]},${model.coordinate?.split(',')[1]}|name:${model.name}&mode=driving`
          break
        case ThirdApp.Maps:
          name = $r('app.string.visit_store_petal_map')
          link =
            `https://www.petalmaps.com/routes/?daddr=${model.coordinate?.split(',')[0]},${model.coordinate?.split(',')[1]}(${model.name})&coordinateType=0&type=drive&utm_source=com.huawei.hmos.maps.app`
          break
        default:
          name = ""
      }
      return {
        name,
        link,
        isAppInstall: thirdAppManager.isAppInstall(key)
      } as mapListItem
    })
    console.log('lucy== map',JSON.stringify(mapList))
    this.mapList = mapList.filter(ele => ele.isAppInstall)
  }
  async permissionRequest() {
    try {
      let isGranted = await locationManager.checkAndApplyPermissions(getContext(this))
      if (!isGranted) {
        isGranted = await locationManager.requestPermissionAgain()
      }
      if (isGranted) {
        this.selectMapDialogController = new CustomDialogController({
          builder: MapDialogCall({
            title: '请选择地图',
            titleFontSize: $r('app.float.size_13'),
            titleTextColor: '#acb1b6',
            mapList: this.mapList,
            propBackgroundColor: Color.Transparent,
            propBorderRadius: $r('app.float.size_8'),
            propHeight: $r('app.float.size_50'),
            propSpace: 0,
            titleHeight: $r('app.float.size_42'),
            propContentPadding: {
              top: $r('app.float.size_12'),
              bottom: 0
            },
            propPadding: {
              left: $r('app.float.size_12'),
              right: $r('app.float.size_12'),
              bottom: $r('app.float.size_31'),
            },
            onClickCallBack: (item) => {
              this.handleStartNavigation(item)
            }
          }),
          customStyle: true,
          autoCancel: true,
          alignment: DialogAlignment.Bottom,
          keyboardAvoidMode: KeyboardAvoidMode.NONE
        })
        this.selectMapDialogController.open()
        const request: geoLocationManager.SingleLocationRequest = {
          locatingPriority: geoLocationManager.LocatingPriority.PRIORITY_LOCATING_SPEED,
          locatingTimeoutMs: 10000
        };
        await geoLocationManager.getCurrentLocation(request).then((location) => {
          // 获取到的经纬度
          this.locationData.latitude = location.latitude;
          this.locationData.longitude = location.longitude;
        }).catch((err: object) => {
          console.error("lucy== 获取位置失败:", JSON.stringify(err));
        });
      }
    } catch (e) {
      console.log('lucy== Address request location Permission fail' + e.message)
    }
  }
  handleStartNavigation(item: mapListItem) {
    this.selectMapDialogController?.close()
    this.jumpToMapApp(item.link)
  }
  jumpToMapApp(link: string) {
    try {
      const openLinkOptions: OpenLinkOptions = {
        appLinkingOnly: false
      };
      const context = getContext(this) as common.UIAbilityContext
      context.openLink(link, openLinkOptions)
        .then(() => {
          console.log('open link success.');
        }).catch((err: BusinessError) => {
        console.log(`open link failed. Code is ${err.code}, message is ${err.message}`);
      });
    } catch (paramError) {
      console.log(`Failed to start link. Code is ${paramError.code}, message is ${paramError.message}`);
    }
  }
  build() {
    if (this.chargeList.length > 0) {
      this.haveDataCardView()
    } else {
      this.noDataCardView()
    }
  }
}
import { bundleManager } from "@kit.AbilityKit";
class AppBundleManager{
  private bundleInfo?: bundleManager.BundleInfo
  getBundleInfo(): bundleManager.BundleInfo {
    if (this.bundleInfo == null || this.bundleInfo == undefined) {
      return bundleManager.getBundleInfoForSelfSync(bundleManager.BundleFlag.GET_BUNDLE_INFO_WITH_APPLICATION)
    }
    return this.bundleInfo
  }
  getTokenId(): number {
    let bundleInfo = this.getBundleInfo();
    return bundleInfo.appInfo.accessTokenId;
  }
}
export const appBundleManager = new AppBundleManager()
import { StyleConst } from "@tbs/common"
import { mapListItem } from "../model/ChargeModel"
interface TextStyle {
  height: Length
}
@Extend(Text)
//文本样式
function textStyles(item: TextStyle) {
  .fontColor($r('app.color.color_0165b8'))
  .textAlign(TextAlign.Center)
  .fontSize($r('app.float.size_18'))
  .height(item.height)
}
@CustomDialog
@Component
export struct MapDialogCall {
  mapList: mapListItem[] = []
  controller: CustomDialogController
  propBackgroundColor: Color | number | string | Resource = '#f3f4f5'
  propPadding: Padding | Length | LocalizedPadding = {}
  propBorderRadius: ResourceStr = '0'
  title: ResourceStr = '';
  titlePadding: Padding = { top: $r('app.float.size_16'), bottom: $r('app.float.size_16') }
  titleFontSize: ResourceStr = $r('app.float.size_text_16')
  titleTextColor: ResourceColor = '#222427'
  titleBgColor: ResourceColor = Color.Transparent
  onClickCallBack?: (ele: mapListItem) => void
  propHeight: Length = $r('app.float.size_25')
  propSpace: number = 13
  propContentPadding: Padding | Length | LocalizedPadding = {
    top: $r('app.float.size_12'),
    bottom: $r('app.float.size_12')
  }
  titleHeight: Length = 0
  build() {
    Column({ space: 12 }) {
      Column({ space: this.propSpace }) {
        Text(this.title)
          .fontColor(this.titleTextColor)
          .fontSize(this.titleFontSize)
          .textAlign(TextAlign.Center)
          .width(StyleConst.FULL_WIDTH)
          .height(this.titleHeight)
        ForEach(
          this.mapList,
          (ele: mapListItem) => {
            Text(ele.name)
              .textStyles({ height: this.propHeight })
              .onClick(() => {
                this.onClickCallBack && this.onClickCallBack(ele)
              })
          }
        )
      }
      .borderRadius(this.propBorderRadius)
      .justifyContent(FlexAlign.Center)
      .width(StyleConst.FULL_WIDTH)
      .backgroundColor(Color.White)
      .padding(this.propContentPadding)
      Row() {
        Text('取消')
          .textStyles({ height: this.propHeight })
          .fontColor($r('app.color.color_0165b8'))
          .width(StyleConst.FULL_WIDTH)
      }
      .borderRadius(this.propBorderRadius)
      .backgroundColor(Color.White)
      .height($r('app.float.size_50'))
      .margin({ bottom: $r('app.float.size_16') })
      .onClick(()=>{
        this.controller.close()
      })
    }
    .padding(this.propPadding)
    .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor(this.propBackgroundColor)
  }
}
// import { PriceType } from "../model/ChargeModel"
//
//
// //标题样式
// @Extend(Text) function PriceHeaderSty(){
//   .fontSize(18).fontWeight(FontWeight.Bold).fontColor(Color.White)
// }
// //行内样式
// @Extend(Text) function PriceCellSty(){
//   .fontSize(20).textAlign(TextAlign.Center)
// }
// @Component
// export struct ChargePriceDialogView {
//   @Prop priceList:PriceType[]
//
//   build() {
//     Column({space:10}){
//       Text('收费标准').textAlign(TextAlign.Center).fontWeight(FontWeight.Bold).fontSize(25)
//       Column({space:10}){
//         Row({space:50}){
//           Text('收费时段').PriceHeaderSty()
//           Text('收费(元/度)').PriceHeaderSty().margin({left:20})
//         }
//         .width('90%')
//         .padding(15)
//         .backgroundColor('#0aa671')
//         .borderRadius(5)
//         Column({space:10}){
//           List({space:10}){
//             ForEach(this.priceList,(item:PriceType) => {
//               ListItem(){
//                 Column(){
//                   Row({space:100}){
//                     Text(`${item.startHour} - ${item.endHour}`).width(80).PriceCellSty()
//                     Text(`${item.price}`).width(60).PriceCellSty()
//                   }
//                   .width('90%')
//                   .height(40)
//                   Divider().width('95%').opacity(0.6)
//                 }
//               }
//             })
//           }
//           .width('90%')
//           .layoutWeight(1)
//         }
//         .width('90%')
//         .height(180)
//         .padding(10)
//         .borderWidth(1).borderColor(Color.Gray)
//       }
//       .width('90%')
//     }
//     .width('100%')
//     .padding(10)
//   }
// }
import { PriceType } from "../model/ChargeModel"
@Component
export struct ChargePriceDialogView {
  @Prop priceList:PriceType[]
  build() {
    Column() {
      // 顶部标题
      this.buildHeader()
      // 价格表格区域
      this.buildPriceTable()
      // 分隔线
      Divider()
        .strokeWidth(1)
        .color('#e0e0e0')
        .margin({ top: 25, bottom: 20 })
      // 底部提示
      this.buildFooter()
    }
    .padding(20)
    .backgroundColor('#f5f7fa')
    .borderRadius(12)
    .width('100%')
    .height('auto')
  }
  // 顶部标题组件
  @Builder
  buildHeader() {
    Text('桩编号：00205020101100000000323')
      .fontSize(14)
      .fontColor('#666666')
      .margin({ bottom: 15 })
  }
  // 价格表格组件 - 简化为两列
  @Builder
  buildPriceTable() {
    Column() {
      // 表头 - 左右分布
      Row() {
        Text('充电时段')
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .layoutWeight(1) // 左边占据1份空间
        Text('价格（元/度）')
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .layoutWeight(1) // 右边占据1份空间
      }
      .width('100%')
      .padding({ bottom: 10 })
      // 表格内容 - 左右分布
      ForEach(this.priceList,
        (item: PriceType, index: number) => {
          Row() {
            Text(`${item.startHour} - ${item.endHour}`)
              .fontSize(16)
              .fontColor('#333333')
              .layoutWeight(1) // 左边占据1份空间
            if(item.price){
              Text(`${item.price}`)
                .fontSize(16)
                .fontColor('#e91e63')// 价格使用红色强调
                .fontWeight(FontWeight.Medium)
                .layoutWeight(1) // 右边占据1份空间
            }
          }
          .width('100%')
          .padding({ top: 10, bottom: 10 })
          .backgroundColor(index % 2 === 0 ? '#ffffff' : '#f8f9fa')
        })
    }
    .width('100%')
    .padding(12)
    .backgroundColor(Color.White)
    .borderRadius(8)
    .shadow({
      radius: 4,
      color: '#20000000',
      offsetX: 1,
      offsetY: 1
    })
  }
  // 底部提示组件
  @Builder
  buildFooter() {
    Text('*充电费用仅供参考，请以实际收取费用为准')
      .fontSize(12)
      .fontColor('#999999')
      .fontStyle(FontStyle.Italic)
      .alignSelf(ItemAlign.Start)
  }
}
import { BusinessError } from "@kit.BasicServicesKit"
import { bundleManager } from "@kit.AbilityKit"
export enum ThirdApp {
  Alipay = 'alipays://',
  Amapuri = "amapuri://", // 高德地图的 scheme
  Baidumap = "baidumap://map/direction", // 百度地图的 scheme
  Maps = "maps://", // 华为地图的 scheme
  Https = "https://" // App link scheme
}
class ThirdAppManager{
  /** 第三方应用是否安装 */
  isAppInstall(thirdApp: ThirdApp): boolean {
    try {
      return bundleManager.canOpenLink(thirdApp)
    } catch (e) {
      let code = (e as BusinessError)?.code
      let msg = (e as BusinessError)?.message ?? ''
      if (code !== undefined) {
        if (code === 17700056) {
          msg += ` Please include "${thirdApp.replace('://',
            '')}" inside the "querySchemes" element of module.json5 in your app module.`
        }
        console.log(`isAppInstall get error${msg}`)
      } else {
        console.log(`isAppInstall get error${e}`)
      }
      return false
    }
  }
}
export const thirdAppManager = new ThirdAppManager()
import { StorageConst, ScreenUtils, StyleConst } from "@tbs/common"
import { pileParam, pileParamType, PileType } from "../model/ChargeModel"
@Component
export struct ChargeItemDialogView {
  @StorageProp(StorageConst.SCREEN_WIDTH_VP) screenWidth: number =
    ScreenUtils.getInstance().getScreenWidthVp()
  @Prop Piles: PileType[]
  clickPileItemCallBack?: (item:PileType) => void
  @Builder
  pileItem(item: PileType) {
    Row() {
      //左
      this.pileItemLeftBuilder(item)
      //右
      this.pileItemRightBuilder(item)
    }
    .padding({ top: $r('app.float.size_12'), bottom: $r('app.float.size_12') })
    .width(this.screenWidth - 12 * 2)
    .margin({ bottom: $r('app.float.size_12') })
    .borderRadius($r('app.float.size_12'))
    .backgroundColor(Color.White)
    .onClick(() => {
      if (this.clickPileItemCallBack) {
        this.clickPileItemCallBack(item)
      }
    })
  }
  //桩左侧UI
  @Builder
  pileItemLeftBuilder(item: PileType) {
    Column({ space: 10 }) {
      Image(this.pileImage(item.state ?? 0))
        .height($r('app.float.size_30'))
      Text(this.pileStateText(item.state ?? 0))
        .textAlign(TextAlign.Center)
        .fontSize($r('app.float.size_text_10'))
        .fontColor(this.pileStateTextColor(item.state ?? 0))
        .width($r('app.float.size_40'))
        .height($r('app.float.size_20'))
        .border({
          width: $r('app.float.size_1'),
          color: this.pileStateTextColor(item.state ?? 0),
          style: BorderStyle.Solid,
          radius: $r('app.float.size_20')
        })
    }
    .margin({ left: $r('app.float.size_20'), right: $r('app.float.size_20') })
  }
  //桩右侧UI
  @Builder
  pileItemRightBuilder(item: PileType) {
    Column({ space: 10 }) {
      Text() {
        Span($r('app.string.pile_number')).fontColor($r('app.color.color_898e92'))
        Span(item.code).fontColor(Color.Black)
      }.fontSize($r('app.float.size_text_14'))
      Text() {
        Span($r('app.string.station_name')).fontColor($r('app.color.color_898e92'))
        Span(item.stationName).fontColor(Color.Black)
      }.fontSize($r('app.float.size_text_14'))
      Row({ space: 10 }) {
        ForEach(pileParam, (item: pileParamType) => {
          Row() {
            Text(item.text)
              .textAlign(TextAlign.Center)
              .fontSize($r('app.float.size_text_11'))
              .fontColor(Color.Black)
          }
          .backgroundColor($r('app.color.color_f5f5f5'))
          .padding({
            top: $r('app.float.size_5'),
            bottom: $r('app.float.size_5'),
            left: $r('app.float.size_8'),
            right: $r('app.float.size_8')
          })
        })
      }
    }
    .layoutWeight(1)
    .alignItems(HorizontalAlign.Start)
  }
  //区分不同状态的桩图片
  pileImage(state: number) {
    switch (state) {
      case 0:
        return $r('app.media.pile_idle')
      case 1:
        return $r('app.media.pile_charging_in_progress')
      case 2:
        return $r('app.media.pile_faults')
      default:
        return $r('app.media.pile_idle')
    }
  }
  //区分不同状态的文本
  pileStateText(state: number) {
    switch (state) {
      case 0:
        return $r('app.string.idle')
      case 1:
        return $r('app.string.charging_in_progress')
      case 2:
        return $r('app.string.faults')
      default:
        return $r('app.string.idle')
    }
  }
  //区分不同状态的文本颜色
  pileStateTextColor(state: number) {
    switch (state) {
      case 0:
        return $r('app.color.color_009688')
      case 1:
        return $r('app.color.color_d68751')
      case 2:
        return $r('app.color.color_F44336')
      default:
        return $r('app.color.color_009688')
    }
  }
  build() {
    List() {
      ForEach(this.Piles, (item: PileType) => {
        ListItem() {
          this.pileItem(item)
        }
        .width(StyleConst.FULL_WIDTH)
      })
    }
    .width(StyleConst.FULL_WIDTH)
  }
}
export * from './src/main/ets/common'
export * from './src/main/ets/http'
export * from './src/main/ets/widgets'
export * from './src/main/ets/manager'
export * from './src/main/ets/utils'
export { CommonDataSource } from './src/main/ets/model/CommonDataSource'
export * from './src/main/ets/location'
import { geoLocationManager } from "@kit.LocationKit";
import { PermissionConst } from "./PermissionConst";
import { permissionManager } from "./PermissionManager";
class LocationManager {
  async requestPermissionAgain() {
    return await permissionManager.requestPermissionAgain(PermissionConst.locationPermissions, getContext(this))
  }
  // 检查是否有定位权限，外部可直接调用，异常时返回false
  async checkLocationPermissions(): Promise<boolean> {
    try {
      return await permissionManager.checkPermissions(PermissionConst.locationPermissions) &&
      geoLocationManager.isLocationEnabled();
    } catch (e) {
      console.log(`lucy== hasLocationPermissions, ${JSON.stringify(e)}`)
      return false;
    }
  }
  // 校验并申请权限，如果申请权限返回false，则抛出异常，使用者需要使用catch接收。
  async checkAndApplyPermissions(context: Context): Promise<boolean> {
    let isGranted = await this.checkLocationPermissions();
    if (isGranted) {
      return true;
    }
    try {
      let userGranted = await permissionManager.reqPermissionsFromUser(PermissionConst.locationPermissions, context);
      if (userGranted) {
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }
}
export const locationManager = new LocationManager()
import { Permissions } from '@kit.AbilityKit';
export class PermissionConst {
  static readonly locationPermissions: Array<Permissions> = [
    'ohos.permission.APPROXIMATELY_LOCATION',
    'ohos.permission.LOCATION',
  ];
  static readonly mediaRWPermissions: Array<Permissions> = [
    'ohos.permission.READ_MEDIA',
    'ohos.permission.WRITE_MEDIA'
  ];
  static readonly imageVideoReadPermission: Permissions = 'ohos.permission.READ_IMAGEVIDEO';
  static readonly imageVideoWritePermission: Permissions = 'ohos.permission.WRITE_IMAGEVIDEO';
  static readonly cameraPermission: Permissions = 'ohos.permission.CAMERA';
  // 获取OAID
  static readonly oaIdPermission: Permissions = 'ohos.permission.APP_TRACKING_CONSENT';
}
export * from './LocationManager';
export * from './ThirdAppManager'
import { abilityAccessCtrl, PermissionRequestResult, Permissions } from "@kit.AbilityKit";
import { BusinessError } from "@kit.BasicServicesKit";
import { appBundleManager } from "./AppBundleManager";
class PermissionManager{
  atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
  // 每次访问受目标权限保护的接口之前，都需要使用requestPermissionsFromUser()接口请求相应的权限。
  // 权限组：当应用请求权限时，同一个权限组的权限将会在一个弹窗内一起请求用户授权。用户点击同意，即同意了整个权限组。
  // 如定位权限组：['ohos.permission.APPROXIMATELY_LOCATION', 'ohos.permission.LOCATION']
  async checkPermissions(permissions: Array<Permissions>): Promise<boolean> {
    console.log(`check permission ${permissions}`);
    try {
      let grantStatusArray: abilityAccessCtrl.GrantStatus[] = [];
      for (let i = 0; i < permissions.length; i++) {
        grantStatusArray[i] = await this.checkPermissionInner(permissions[i]);
      }
      console.log(`checkPermissions: ${permissions}, grantStatus ${grantStatusArray} `);
      // todo 暂定全同意才算同意
      const denied = grantStatusArray.indexOf(abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) > -1;
      return !denied;
    } catch (e) {
      return Promise.reject(e);
    }
  }
  private async checkPermissionInner(permission: Permissions): Promise<abilityAccessCtrl.GrantStatus> {
    let grantStatus: abilityAccessCtrl.GrantStatus = abilityAccessCtrl.GrantStatus.PERMISSION_DENIED;
    // 校验应用是否被授予权限
    try {
      grantStatus = await this.atManager.checkAccessToken(appBundleManager.getTokenId(), permission);
    } catch (error) {
      const err: BusinessError = error as BusinessError;
      console.log(`Failed to check access token. Code is ${err.code}, message is ${err.message}`);
      return Promise.reject(`checkPermissionInner: checkAccessToken error: ${JSON.stringify(error)}`,);
    }
    return grantStatus;
  }
  async reqPermissionsFromUser(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
    // requestPermissionsFromUser会判断权限的授权状态来决定是否唤起弹窗
    try {
      let result: PermissionRequestResult = await atManager.requestPermissionsFromUser(context, permissions);
      let grantStatus: Array<number> = result.authResults;
      for (let i = 0; i < grantStatus.length; i++) {
        if (grantStatus[i] === 0) {
          // 用户授权，可以继续访问目标操作
          console.log(`reqPermissionsFromUser: ${permissions[i]} is granted`);
        } else {
          console.log(`reqPermissionsFromUser: ${permissions[i]} is denied`);
          return false;
        }
      }
      return true;
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
  //被拒绝后，再次点击全权限申请使用该方法
  async requestPermissionAgain(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    try {
      const result = await this.atManager.requestPermissionOnSetting(context, permissions)
      return result.every((status) => {
        return status === abilityAccessCtrl.GrantStatus.PERMISSION_GRANTED
      })
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
}
let permissionManager = new PermissionManager();
export { permissionManager };
{
  "float": [
    {
      "name": "page_text_font_size",
      "value": "50fp"
    }
  ]
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    }
  ]
}
{
  "name": "@tbs/common",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {}
}
export * from './WindowModel'
export * from './GlobalContext'
export * from './TextUtil'
export { ScreenUtils } from './ScreenUtil';
export { initDataPreference, commonStorage } from './StorageUtils'
export * from './ComponentUtils'
export { formatDate } from './formatDate'
import { window } from "@kit.ArkUI";
import { BusinessError } from "@kit.BasicServicesKit";
export class WindowModel {
  private constructor() {
  }
  /**
   * 默认样式
   */
  private readonly DEFAULT: window.SystemBarProperties = {
    statusBarColor: '#00000000',
    navigationBarColor: '#00000000',
    // 以下两个属性从API Version 8开始支持
    statusBarContentColor: '#000000',
    navigationBarContentColor: '#00000000'
  };
  /**
   * WindowModel 单例
   */
  private static instance?: WindowModel;
  /**
   * 获取WindowModel单例实例
   * @returns {WindowModel} WindowModel
   */
  static getInstance(): WindowModel {
    if (!WindowModel.instance) {
      WindowModel.instance = new WindowModel();
    }
    return WindowModel.instance;
  }
  /**
   * 缓存的当前WindowStage实例
   */
  private windowStage?: window.WindowStage;
  /**
   * 缓存windowStage
   * @param windowStage 当前WindowStage实例
   * @returns {void}
   */
  setWindowStage(windowStage: window.WindowStage): void {
    this.windowStage = windowStage;
  }
  getWindowStage(): window.WindowStage | undefined {
    return this.windowStage
  }
  /**
   * 当前主窗口是否开启沉浸模式
   * @param enable 是否开启
   * @returns {void}
   */
  setMainWindowImmersive(enable: boolean, properties?: window.SystemBarProperties): void {
    if (this.windowStage === undefined) {
      console.error('windowStage is undefined.');
      return;
    }
    // 1.获取应用主窗口。
    let windowClass: window.Window | null = null;
    this.windowStage.getMainWindow((err: BusinessError, data) => {
      let errCode: number = err.code;
      if (errCode) {
        console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));
        return;
      }
      windowClass = data;
      console.info('Succeeded in obtaining the main window data.');
      // 2.实现沉浸式效果。方式二：设置窗口为全屏布局，配合设置导航栏、状态栏的透明度、背景/文字颜色及高亮图标等属性，与主窗口显示保持协调一致。
      windowClass.setWindowLayoutFullScreen(enable, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the window layout to full-screen mode.');
      });
      const p = properties ? properties : this.DEFAULT
      windowClass.setWindowSystemBarProperties(p, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the system bar properties.');
      });
    })
  }
  /**
   * 软键盘是否显示/隐藏
   * @param callback
   */
  getKeyBoardVisible(callback: (visible: boolean) => void) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      // 监听软键盘的隐藏和显示
      currentWindow.on('avoidAreaChange', data => {
        if (data.type == window.AvoidAreaType.TYPE_KEYBOARD) {
          const keyBoardHeight = px2vp(data.area.bottomRect.height);
          if (keyBoardHeight > 0) {
            callback(true)
          } else {
            callback(false)
          }
        }
      })
    })
  }
}
import dataPreferences from '@ohos.data.preferences';
import preferences from '@ohos.data.preferences';
import { HashMap } from '@kit.ArkTS';
import { common } from '@kit.AbilityKit';
import { GlobalContext } from './GlobalContext';
import { BusinessError } from '@kit.BasicServicesKit';
class Storage{
  private name: string = 'app_storage'
  private preferences: dataPreferences.Preferences | null = null
  private listenerKeyMap = new HashMap<string, HashMap<string, Callback<string>>>()
  constructor(name: string) {
    this.name = name;
  }
  initStorage() {
    const context = GlobalContext.getContext().getObject('context') as common.UIAbilityContext
    const options: dataPreferences.Options = { name: this.name }
    this.preferences = dataPreferences.getPreferencesSync(context, options)
    this.preferences?.on('change', (key: string) => {
      const pageMap = this.listenerKeyMap.get(key)
      pageMap?.forEach((callBack: Callback<string>) => {
        callBack(key)
      })
    })
  }
  /**
   * 存储key,value到preference缓存里面
   * @param key
   * @param value
   */
  saveValueSync(key: string, value: preferences.ValueType) {
    this.preferences?.putSync(key, value)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 根据key删除值
   * @param key
   */
  deleteValueSync(key: string) {
    this.preferences?.deleteSync(key)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns string
   */
  getStringValueSync(key: string, defaultValue: string) {
    return this.preferences?.getSync(key, defaultValue) as string
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns Array<string>
   */
  getArrayStringValueSync(key: string, defaultValue: Array<string>) {
    return this.preferences?.getSync(key, defaultValue) as Array<string>
  }
}
export const commonStorage = new Storage('common_storage')
export function initDataPreference() {
  commonStorage.initStorage()
}
// 与EntryAbility交互，获取ability当前的数据
export class GlobalContext {
  static readonly CONTEXT = 'context';
  static readonly WANT = 'want';
  //状态栏高度
  static readonly STATUS_BAR_HEIGHT = 'statusBarHeight';
  //导航栏高度
  static readonly NAVIGATION_HEIGHT = 'navigationHeight';
  private constructor() { }
  private static instance: GlobalContext;
  private _objects = new Map<string, Object>();
  public static getContext(): GlobalContext {
    if (!GlobalContext.instance) {
      GlobalContext.instance = new GlobalContext();
    }
    return GlobalContext.instance;
  }
  getObject(value: string): Object | undefined {
    return this._objects.get(value);
  }
  setObject(key: string, objectClass: Object): void {
    this._objects.set(key, objectClass);
  }
}
import display from '@ohos.display';
import { GlobalContext } from '.';
import window from '@ohos.window';
import common from '@ohos.app.ability.common';
import { StorageConst } from '../manager';
export class ScreenUtils {
  private static instance: ScreenUtils;
  setWindow(windowInfo: window.Window) {
    // 获取窗口属性
    const properties = windowInfo.getWindowProperties();
    this.setScreen(properties.windowRect.width, properties.windowRect.height)
    windowInfo.on("windowSizeChange", (size: Size) => {
      this.setScreen(size.width, size.height)
    })
  }
  private constructor() {
    this.defaultDisplay = display.getDefaultDisplaySync()
    this.defaultDisplay.getCutoutInfo((e, data) => {
      this.cutoutInfo = data
    })
    let callback: Callback<display.FoldDisplayMode> = (data: display.FoldDisplayMode) => {
      this.setFoldDisplayMode(data)
    };
    display.on("foldDisplayModeChange", callback)
  }
  private setScreen(width: number, height: number) {
    AppStorage.setOrCreate(StorageConst.SCREEN_WIDTH_VP, px2vp(width));
    AppStorage.setOrCreate(StorageConst.SCREEN_HEIGHT_VP, px2vp(height));
  }
  private setFoldDisplayMode(data: display.FoldDisplayMode) {
    AppStorage.setOrCreate(StorageConst.FOLD_DISPLAY_MODE, data);
  }
  public static getInstance(): ScreenUtils {
    if (!ScreenUtils.instance) {
      ScreenUtils.instance = new ScreenUtils();
    }
    return ScreenUtils.instance;
  }
  //屏幕数据
  private defaultDisplay: display.Display | null = null
  //挖孔屏状态栏区域
  private cutoutInfo: display.CutoutInfo | null = null
  getDisplay(): display.Display | null {
    return this.defaultDisplay
  }
  getScreenWidthPx(): number {
    return this.defaultDisplay?.width ?? -1
  }
  getScreenHeightPx(): number {
    return this.defaultDisplay?.height ?? -1
  }
  getScreenContentHeightPX(): number {
    return vp2px(this.getScreenHeightVp() - this.getStatusBarHeight())
  }
  getScreenContentHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenWidthVp(): number {
    return px2vp(this.getScreenWidthPx())
  }
  /**
   * 获取刘海屏状态栏最大的区域
   * @returns
   */
  getStatusBarHeight(): number {
    const statusBar = GlobalContext.getContext().getObject(GlobalContext.STATUS_BAR_HEIGHT) as number;
    return px2vp(statusBar)
  }
  // 底部安全距离
  getSafeBottomHeight() {
    const navigation = GlobalContext.getContext().getObject(GlobalContext.NAVIGATION_HEIGHT) as number;
    return px2vp(navigation)
  }
  /**
   * 获取底部导航栏的高度
   * @returns
   */
  async getBottomNavBarHeight(context: common.BaseContext): Promise<number> {
    const win = await window.getLastWindow(context)
    return px2vp(win.getWindowAvoidArea(window.AvoidAreaType.TYPE_NAVIGATION_INDICATOR).bottomRect.height)
  }
  async getStatusBarColor(): Promise<string> {
    const currentWindow = await window.getLastWindow(getContext(this))
    return currentWindow.getWindowSystemBarProperties().statusBarColor ?? '#000000'
  }
  // 改变状态栏文字颜色
  updateStatusBarColor(isBlack: boolean) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      currentWindow.setWindowSystemBarProperties({ statusBarContentColor: isBlack ? '#000000' : '#ffffff' })
    })
  }
  // 检查设备是否可折叠
  isFoldable() {
    return display.isFoldable()
  }
  // 设备当前折叠状态是否为为完全展开
  isFoldExpanded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_EXPANDED
  }
  // 设备当前折叠状态是否为为半折叠
  isFoldHalfFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_HALF_FOLDED
  }
  // 设备当前折叠状态为是否为折叠
  isFoldFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_FOLDED
  }
}
import { requestApiCall, Apis, toast } from "@tbs/common";
import { http } from "@kit.NetworkKit";
import { ChargeListData, OrderTypeData, PileListData, PriceListData } from "../model/ChargeModel";
import { BusinessError } from "@kit.BasicServicesKit";
//获取充电站
export function getStations(name: string, pageNo: number = 1, pageSize: number = 20) {
  return requestApiCall(`${Apis.CHARGE_STATION_LIST}?name=${name}&pageNo=${pageNo}&pageSize=${pageSize}`,
    http.RequestMethod.GET).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    const data = res.data as ChargeListData
    return data
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 获取充电站接口调用失败，${err.code}+${err.message}`)
  })
}
//获取充电桩
export function getPiles(stationId: number) {
  return requestApiCall(`${Apis.CHARGE_PILE_LIST}?stationId=${stationId}`, http.RequestMethod.GET).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    const data = res.data as PileListData
    return data.List
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 获取充电桩接口调用失败，${err.code}+${err.message}`)
  })
}
//获取充电价格
export function getChargePrice(pageNo: number = 1, pageSize: number = 20) {
  return requestApiCall(`${Apis.CHARGE_PRICE}?pageNo=${pageNo}&pageSize=${pageSize}`, http.RequestMethod.GET)
    .then(res => {
      if (res.code !== 0 && res.message) {
        toast(res.message)
      }
      const data = res.data as PriceListData
      return data.List
    }).catch((err: BusinessError) => {
      console.error(`lucy++ 获取充电价格接口调用失败，${err.code}+${err.message}`)
    })
}
//开始充电
export function getStartCharge(pileId: number) {
  const params: Record<string, Object> = {
    "pileId": pileId
  }
  return requestApiCall(Apis.CHARGE_START, http.RequestMethod.POST, params).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    return res.code
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 开始充电接口调用失败，${err.code}+${err.message}`)
  })
}
//获取充电订单列表
export function getChargeOrders(pageNo: number, pageSize: number) {
  return requestApiCall(`${Apis.CHARGE_ORDER_LIST}?pageNo=${pageNo}&pageSize=${pageSize}`, http.RequestMethod.GET)
    .then(res => {
      if (res.code !== 0 && res.message) {
        toast(res.message)
      }
      const data = res.data as OrderTypeData
      return data
    }).catch((err: BusinessError) => {
      console.error(`lucy++ 获取充电订单列表接口调用失败，${err.code}+${err.message}`)
    })
}
//结束充电
export function getStopCharge(orderId: number) {
  const params: Record<string, Object> = {
    "orderId": orderId
  }
  return requestApiCall(Apis.CHARGE_STOP, http.RequestMethod.POST, params).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    console.log('lucy== 结束res', JSON.stringify(res))
    return res.code
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 结束充电接口调用失败，${err.code}+${err.message}`)
  })
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
import { ScreenUtils, StyleConst, toast } from "@tbs/common";
import { ChargeType } from "../model/ChargeModel";
import { ChargeListView } from "../view/ChargeListView";
import { ChargeSearchBarView } from "../view/ChargeSearchBarView";
import { getStations } from "../viewModel/ChargeViewModel";
@Component
export struct ChargePage {
  @State @Watch('onChangeName')name: string = ''
  @State chargeList: ChargeType[] = []
  inputController: TextInputController = new TextInputController()
  aboutToAppear(): void {
    this.getStationData()
  }
  //获取充电站数据
  async getStationData() {
    let data = await getStations(this.name)
    if (data && data.List) {
      this.chargeList = data.List
    }
  }
  onChangeName(){
    if(this.name == ''){
      this.getStationData()
    }
  }
  //顶部搜索
  @Builder
  chargeSearchBar() {
    ChargeSearchBarView({
      name: this.name,
      maxLength: 30,
      inputController: this.inputController,
      searchButtonCallback: (value) => {
        if (!value) {
          toast('请输入搜索内容')
        } else {
          this.name = value.replace(/\s+/g, '')
          this.getStationData()
        }
      }
    })
  }
  //搜索结果
  @Builder
  chargeSearchList() {
    ChargeListView({ chargeList: this.chargeList })
      .margin({ top: 50 + ScreenUtils.getInstance().getStatusBarHeight() })
  }
  build() {
    Stack() {
      this.chargeSearchBar() //顶部搜索
      this.chargeSearchList() //搜索结果
    }
    .alignContent(Alignment.Top)
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_f0f2f4'))
  }
}
import { BottomLoadingBuilder, formatDate, StyleConst, TbsTitleBar, toast } from "@tbs/common"
import { OrderType } from "../model/ChargeModel"
import { getChargeOrders, getStopCharge } from "../viewModel/ChargeViewModel"
@Entry({ routeName: 'ChargeOrderPage' })
@Component
export struct ChargeOrderPage {
  @State Orders: OrderType[] = []
  @State loading: boolean = false // 加载状态
  @State pageNum: number = 1 //当前页，起始值为1
  @State pageSize: number = 5
  @State haveNextPage: boolean = false //是否还有下一页数据
  onPageShow(): void {
    this.resetPage()
    this.getChargeOrdersData(false)
  }
  // 重置分页状态
  resetPage() {
    this.pageNum = 1
    this.haveNextPage = true
    this.Orders = []
  }
  // 获取充电列表数据
  async getChargeOrdersData(isLoadMore: boolean = false) {
    // 如果没有下一页，不再请求
    if (isLoadMore && !this.haveNextPage) {
      return
    }
    this.loading = true
    try {
      // 计算当前请求的页码
      const currentPage: number = isLoadMore ? this.pageNum + 1 : 1
      let data = await getChargeOrders(currentPage, this.pageSize)
      if (data && data.List) {
        // 更新分页状态
        this.pageNum = currentPage
        this.haveNextPage = data.List.length >= this.pageSize
        // 更新订单列表
        if (isLoadMore) {
          this.Orders = [...this.Orders, ...data.List]
        } else {
          this.Orders = data.List
        }
      }
    } catch (error) {
      toast('加载订单失败')
      console.error('获取订单失败:', error)
    } finally {
      this.loading = false
    }
  }
  //结束充电
  async getStopChargeInfo(id: number) {
    let data = await getStopCharge(id)
    if (data != null && Number(data) === 0) {
      this.Orders = this.Orders.map(item => {
        if (item.id == id) {
          return {
            id: item.id,
            pileCode: item.pileCode,
            orderCode: item.orderCode,
            price: item.price,
            startAt: item.startAt,
            state: 1,
            stationName: item.stationName,
            stopAt: item.stopAt
          }
        }
        return item
      })
      toast('停止充电成功')
    } else {
      toast('停止充电失败')
    }
  }
  build() {
    Column({ space: 10 }) {
      //1.标题
      TbsTitleBar({ title: '充电订单', showBackIcon: true })
      //2.订单
      this.OrderCard()
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_efefef'))
  }
  @Builder
  OrderCard() {
    List({ space: 10 }) {
      ForEach(this.Orders, (item: OrderType) => {
        ListItem() {
          RelativeContainer() {
            Text(item.orderCode)
              .fontColor(Color.White)
              .height($r('app.float.size_40'))
              .padding($r('app.float.size_10'))
              .borderRadius({ bottomRight: $r('app.float.size_10'), bottomLeft: $r('app.float.size_10') })
              .backgroundColor($r('app.color.color_0aa671'))
              .id('code_text')
              .alignRules({
                right: { anchor: "__container__", align: HorizontalAlign.End },
              })
            Column({ space: 8 }) {
              if (item.state === 0) {
                Text($r('app.string.charging_in_progress')).fontWeight(FontWeight.Bold).fontColor(Color.Red)
              } else {
                Text($r('app.string.completed')).fontWeight(FontWeight.Bold).fontColor($r('app.color.color_0aa671'))
              }
              Row({ space: 10 }) {
                Text($r('app.string.pile_code'))
                Text(item.pileCode)
              }
              Row({ space: 10 }) {
                Text($r('app.string.charge_name'))
                Text(item.stationName)
              }
              Row({ space: 10 }) {
                Text($r('app.string.price'))
                Text(`${item.price}`)
              }
              Row({ space: 10 }) {
                Text($r('app.string.order_status'))
                Text(item.state == 0 ? '充电中' : item.state == 1 ? '已完成' : '未付账')
              }
              Row({ space: 10 }) {
                Text($r('app.string.start_time'))
                Text(formatDate(item.startAt ?? ''))
              }
              Row({ space: 10 }) {
                Text($r('app.string.end_time'))
                Text(item.stopAt && item.state !== 0 ? formatDate(item.stopAt) : '')
              }
              if (item.state === 0) {
                Button($r('app.string.stop_charge')).width($r('app.float.size_90')).backgroundColor(Color.Red)
                  .onClick(() => {
                    if (item.id) {
                      this.getStopChargeInfo(item.id)
                    }
                  })
              } else {
                Text('')
              }
            }
            .alignItems(HorizontalAlign.Start)
            .id('content')
            .alignRules({
              top: { anchor: "code_text", align: VerticalAlign.Bottom }
            })
          }
          .width(StyleConst.FULL_WIDTH)
          .height('auto')
          .padding({ left: $r('app.float.size_10'), bottom: $r('app.float.size_10') })
          .borderRadius($r('app.float.size_10'))
          .backgroundColor('#FFF')
        }
        .width(StyleConst.FULL_WIDTH)
      })
      ListItem() {
        BottomLoadingBuilder({
          haveNextPage: this.haveNextPage,
          loading: this.loading,
          dataLength: this.Orders.length
        })
      }
    }
    .width(StyleConst.FULL_WIDTH)
    .padding({ left: $r('app.float.size_10'), right: $r('app.float.size_10') })
    .layoutWeight(1)
    .onReachEnd(() => {
      if (this.haveNextPage && !this.loading) {
        this.getChargeOrdersData(true)
      }
    })
  }
}
import { StyleConst, TbsTitleBar, BottomPop, toast } from "@tbs/common"
import { router } from "@kit.ArkUI"
import { PileType, PriceType } from "../model/ChargeModel"
import { ChargePriceDialogView } from "../view/ChargePriceDialogView"
import { getChargePrice, getStartCharge } from "../viewModel/ChargeViewModel"
import './ChargeOrderPage'
//充电中
@Entry({ routeName: 'ChargingPage' })
@Component
export struct ChargingPage {
  @State pileItem: PileType = {}
  @State priceList: PriceType[] = []
  onPageShow(): void {
    const PileTypeParams = router.getParams() as Record<string, Object>
    if (PileTypeParams) {
      this.pileItem = PileTypeParams.item as PileType
    }
  }
  chargePriceController: CustomDialogController | null = new CustomDialogController({
    builder: BottomPop({
      title: '收费标准',
      bgColor: $r('app.color.color_f0f2f4'),
      titleBgColor: $r('app.color.color_f0f2f4'),
      contentBgColor: $r('app.color.color_f0f2f4'),
      keyboardAvoidMode: KeyboardAvoidMode.NONE,
      childBuilderParam: () => {
        this.chargePriceDialog()
      }
    }),
    customStyle: true,
    alignment: DialogAlignment.Bottom,
    maskColor: $r('app.color.color_80000000'),
  })
  @Builder
  chargePriceDialog() {
    ChargePriceDialogView({ priceList: this.priceList })
  }
  //获取不同时间段充电价格
  async getChargePriceData() {
    let data = await getChargePrice()
    if (data) {
      this.priceList = data
    }
  }
  //开始充电
  async getStartChargeData() {
    if (this.pileItem.id){
      let data = await getStartCharge(this.pileItem.id)
      if(data == 0){
        toast('充电成功')
        router.pushNamedRoute({
          name:'ChargeOrderPage'
        })
      }
    }
  }
  build() {
    Column({ space: 10 }) {
      //1.标题
      TbsTitleBar({ title: '充电ing', showBackIcon: true })
      //2.主体
      Column({ space: 10 }) {
        //2.1 充电站
        Row() {
          Text('充电站')
          Text(this.pileItem?.stationName)
        }
        .height($r('app.float.size_50'))
        .justifyContent(FlexAlign.SpaceBetween)
        .chargingSty()
        //2.2 设备编号
        Row() {
          Text('设备编号')
          Text(this.pileItem.code)
        }
        .height($r('app.float.size_50'))
        .justifyContent(FlexAlign.SpaceBetween)
        .chargingSty()
        //2.3 收费标准
        Column({ space: 20 }) {
          Row() {
            Text('收费标准')
            Text('收费规则 >>')
              .onClick(() => {
                this.chargePriceController?.open()
                this.getChargePriceData()
              })
          }
          .width(StyleConst.FULL_WIDTH)
          .justifyContent(FlexAlign.SpaceBetween)
          Row() {
            Text('充电时长')
            Text('充满即止 >>')
          }
          .width(StyleConst.FULL_WIDTH)
          .justifyContent(FlexAlign.SpaceBetween)
          Text('PS：此功能不涉及支付，只做演示使用')
            .fontColor(Color.Red)
        }
        .chargingSty()
        .alignItems(HorizontalAlign.Start)
        Button('充电')
          .onClick(() => {
            this.getStartChargeData()
          })
          .fontColor(Color.White)
          .backgroundColor($r('app.color.color_0aa671'))
          .width(StyleConst.PERCENT_95)
      }
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_efefef'))
  }
  //公共样式
  @Styles
  chargingSty(){
    .width(StyleConst.PERCENT_95)
    .padding($r('app.float.size_10'))
    .borderRadius($r('app.float.size_10'))
    .backgroundColor($r('app.color.color_fff'))
  }
}
export class ChargeListData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: ChargeType[]
}
export class ChargeType {
  address?: string //地址
  coordinate?: string //坐标
  distance?: number //距离
  freePileTotal?: number //空闲数据
  id?: number //id
  imageUrl?: string //图片
  name?: string //站名
  pileTotal?: number //剩余数据
  pricePerHour?: number //多少钱一度
  tenantId?: number //租户id
  tenantName?: string //租户
}
export class PileListData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: PileType[]
}
export class PileType {
  code?: string //编号
  id?: number //id
  state?: number //充电桩状态
  stationId?: number //充电站站id
  stationName?: string //充电站站名
}
export class PriceListData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: PriceType[]
}
export class PriceType {
  endHour?: number|string  //结束时间
  id?: number  //id
  price?: string   //价格
  startHour?: number|string  //开始时间
  tenantId?: number  //租户id
}
export class OrderTypeData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: OrderType[]
}
export class OrderType{
  id?: number  //id
  pileCode?: string  //充电桩编号
  orderCode?: string  //订单号
  price?: number  //价格
  startAt?: string  //开始时间
  state?: number  //订单状态
  stationName?: string  //充电站名
  stopAt?: string  //结束时间
}
export class mapListItem {
  name: ResourceStr = ''
  link: string = ''
  isAppInstall: boolean = false
}
export class AddressData {
  latitude?: number = 0.0;
  longitude?: number = 0.0;
}
//桩参数
export const pileParam: Array<pileParamType> = [
  { text: $r('app.string.fast_charge'), type: '1' },
  { text: $r('app.string.180KW'), type: '2' },
  { text: $r('app.string.0V'), type: '3' },
  { text: $r('app.string.national_standard'), type: '4' }
]
export class pileParamType {
  text?: ResourceStr
  type?: string
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
{
  "module": {
    "name": "scan",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
import { BottomLoadingBuilder, formatDate, StyleConst, TbsTitleBar, toast } from "@tbs/common"
import { OrderType } from "../model/ChargeModel"
import { getChargeOrders, getStopCharge } from "../viewModel/ChargeViewModel"
@Entry({ routeName: 'ChargeOrderPage' })
@Component
export struct ChargeOrderPage {
  @State Orders: OrderType[] = []
  @State loading: boolean = false // 加载状态
  @State pageNum: number = 1 //当前页，起始值为1
  @State pageSize: number = 5
  @State haveNextPage: boolean = false //是否还有下一页数据
  onPageShow(): void {
    this.resetPage()
    this.getChargeOrdersData(false)
  }
  // 重置分页状态
  resetPage() {
    this.pageNum = 1
    this.haveNextPage = true
    this.Orders = []
  }
  // 获取充电列表数据
  async getChargeOrdersData(isLoadMore: boolean = false) {
    // 如果没有下一页，不再请求
    if (isLoadMore && !this.haveNextPage) {
      return
    }
    this.loading = true
    try {
      // 计算当前请求的页码
      const currentPage: number = isLoadMore ? this.pageNum + 1 : 1
      let data = await getChargeOrders(currentPage, this.pageSize)
      if (data && data.List) {
        // 更新分页状态
        this.pageNum = currentPage
        this.haveNextPage = data.List.length >= this.pageSize
        // 更新订单列表
        if (isLoadMore) {
          this.Orders = [...this.Orders, ...data.List]
        } else {
          this.Orders = data.List
        }
      }
    } catch (error) {
      toast('加载订单失败')
      console.error('获取订单失败:', error)
    } finally {
      this.loading = false
    }
  }
  //结束充电
  async getStopChargeInfo(id: number) {
    let data = await getStopCharge(id)
    if (data != null && Number(data) === 0) {
      this.Orders = this.Orders.map(item => {
        if (item.id == id) {
          return {
            id: item.id,
            pileCode: item.pileCode,
            orderCode: item.orderCode,
            price: item.price,
            startAt: item.startAt,
            state: 1,
            stationName: item.stationName,
            stopAt: item.stopAt
          }
        }
        return item
      })
      toast('停止充电成功')
    } else {
      toast('停止充电失败')
    }
  }
  build() {
    Column({ space: 10 }) {
      //1.标题
      TbsTitleBar({ title: '充电订单', showBackIcon: true })
      //2.订单
      this.OrderCard()
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_efefef'))
  }
  @Builder
  OrderCard() {
    List({ space: 10 }) {
      ForEach(this.Orders, (item: OrderType) => {
        ListItem() {
          RelativeContainer() {
            Text(item.orderCode)
              .fontColor(Color.White)
              .height($r('app.float.size_40'))
              .padding($r('app.float.size_10'))
              .borderRadius({ bottomRight: $r('app.float.size_10'), bottomLeft: $r('app.float.size_10') })
              .backgroundColor($r('app.color.color_0aa671'))
              .id('code_text')
              .alignRules({
                right: { anchor: "__container__", align: HorizontalAlign.End },
              })
            Column({ space: 8 }) {
              if (item.state === 0) {
                Text($r('app.string.charging_in_progress')).fontWeight(FontWeight.Bold).fontColor(Color.Red)
              } else {
                Text($r('app.string.completed')).fontWeight(FontWeight.Bold).fontColor($r('app.color.color_0aa671'))
              }
              Row({ space: 10 }) {
                Text($r('app.string.pile_code'))
                Text(item.pileCode)
              }
              Row({ space: 10 }) {
                Text($r('app.string.charge_name'))
                Text(item.stationName)
              }
              Row({ space: 10 }) {
                Text($r('app.string.price'))
                Text(`${item.price}`)
              }
              Row({ space: 10 }) {
                Text($r('app.string.order_status'))
                Text(item.state == 0 ? '充电中' : item.state == 1 ? '已完成' : '未付账')
              }
              Row({ space: 10 }) {
                Text($r('app.string.start_time'))
                Text(formatDate(item.startAt ?? ''))
              }
              Row({ space: 10 }) {
                Text($r('app.string.end_time'))
                Text(item.stopAt && item.state !== 0 ? formatDate(item.stopAt) : '')
              }
              if (item.state === 0) {
                Button($r('app.string.stop_charge')).width($r('app.float.size_90')).backgroundColor(Color.Red)
                  .onClick(() => {
                    if (item.id) {
                      this.getStopChargeInfo(item.id)
                    }
                  })
              } else {
                Text('')
              }
            }
            .alignItems(HorizontalAlign.Start)
            .id('content')
            .alignRules({
              top: { anchor: "code_text", align: VerticalAlign.Bottom }
            })
          }
          .width(StyleConst.FULL_WIDTH)
          .height('auto')
          .padding({ left: $r('app.float.size_10'), bottom: $r('app.float.size_10') })
          .borderRadius($r('app.float.size_10'))
          .backgroundColor('#FFF')
        }
        .width(StyleConst.FULL_WIDTH)
      })
      ListItem() {
        BottomLoadingBuilder({
          haveNextPage: this.haveNextPage,
          loading: this.loading,
          dataLength: this.Orders.length
        })
      }
    }
    .width(StyleConst.FULL_WIDTH)
    .padding({ left: $r('app.float.size_10'), right: $r('app.float.size_10') })
    .layoutWeight(1)
    .onReachEnd(() => {
      if (this.haveNextPage && !this.loading) {
        this.getChargeOrdersData(true)
      }
    })
  }
}
import { StyleConst, TbsTitleBar, BottomPop, toast } from "@tbs/common"
import { router } from "@kit.ArkUI"
import { PileType, PriceType } from "../model/ChargeModel"
import { ChargePriceDialogView } from "../view/ChargePriceDialogView"
import { getChargePrice, getStartCharge } from "../viewModel/ChargeViewModel"
import './ChargeOrderPage'
//充电中
@Entry({ routeName: 'ChargingPage' })
@Component
export struct ChargingPage {
  @State pileItem: PileType = {}
  @State priceList: PriceType[] = []
  onPageShow(): void {
    const PileTypeParams = router.getParams() as Record<string, Object>
    if (PileTypeParams) {
      this.pileItem = PileTypeParams.item as PileType
    }
  }
  chargePriceController: CustomDialogController | null = new CustomDialogController({
    builder: BottomPop({
      title: '收费标准',
      bgColor: $r('app.color.color_f0f2f4'),
      titleBgColor: $r('app.color.color_f0f2f4'),
      contentBgColor: $r('app.color.color_f0f2f4'),
      keyboardAvoidMode: KeyboardAvoidMode.NONE,
      childBuilderParam: () => {
        this.chargePriceDialog()
      }
    }),
    customStyle: true,
    alignment: DialogAlignment.Bottom,
    maskColor: $r('app.color.color_80000000'),
  })
  @Builder
  chargePriceDialog() {
    ChargePriceDialogView({ priceList: this.priceList })
  }
  //获取不同时间段充电价格
  async getChargePriceData() {
    let data = await getChargePrice()
    if (data) {
      this.priceList = data
    }
  }
  //开始充电
  async getStartChargeData() {
    if (this.pileItem.id){
      let data = await getStartCharge(this.pileItem.id)
      if(data == 0){
        toast('充电成功')
        router.pushNamedRoute({
          name:'ChargeOrderPage'
        })
      }
    }
  }
  build() {
    Column({ space: 10 }) {
      //1.标题
      TbsTitleBar({ title: '充电ing', showBackIcon: true })
      //2.主体
      Column({ space: 10 }) {
        //2.1 充电站
        Row() {
          Text('充电站')
          Text(this.pileItem?.stationName)
        }
        .height($r('app.float.size_50'))
        .justifyContent(FlexAlign.SpaceBetween)
        .chargingSty()
        //2.2 设备编号
        Row() {
          Text('设备编号')
          Text(this.pileItem.code)
        }
        .height($r('app.float.size_50'))
        .justifyContent(FlexAlign.SpaceBetween)
        .chargingSty()
        //2.3 收费标准
        Column({ space: 20 }) {
          Row() {
            Text('收费标准')
            Text('收费规则 >>')
              .onClick(() => {
                this.chargePriceController?.open()
                this.getChargePriceData()
              })
          }
          .width(StyleConst.FULL_WIDTH)
          .justifyContent(FlexAlign.SpaceBetween)
          Row() {
            Text('充电时长')
            Text('充满即止 >>')
          }
          .width(StyleConst.FULL_WIDTH)
          .justifyContent(FlexAlign.SpaceBetween)
          Text('PS：此功能不涉及支付，只做演示使用')
            .fontColor(Color.Red)
        }
        .chargingSty()
        .alignItems(HorizontalAlign.Start)
        Button('充电')
          .onClick(() => {
            this.getStartChargeData()
          })
          .fontColor(Color.White)
          .backgroundColor($r('app.color.color_0aa671'))
          .width(StyleConst.PERCENT_95)
      }
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_efefef'))
  }
  //公共样式
  @Styles
  chargingSty(){
    .width(StyleConst.PERCENT_95)
    .padding($r('app.float.size_10'))
    .borderRadius($r('app.float.size_10'))
    .backgroundColor($r('app.color.color_fff'))
  }
}
import { ScreenUtils, StyleConst, toast } from "@tbs/common";
import { ChargeType } from "../model/ChargeModel";
import { ChargeListView } from "../view/ChargeListView";
import { ChargeSearchBarView } from "../view/ChargeSearchBarView";
import { getStations } from "../viewModel/ChargeViewModel";
@Component
export struct ChargePage {
  @State @Watch('onChangeName')name: string = ''
  @State chargeList: ChargeType[] = []
  inputController: TextInputController = new TextInputController()
  aboutToAppear(): void {
    this.getStationData()
  }
  //获取充电站数据
  async getStationData() {
    let data = await getStations(this.name)
    if (data && data.List) {
      this.chargeList = data.List
    }
  }
  onChangeName(){
    if(this.name == ''){
      this.getStationData()
    }
  }
  //顶部搜索
  @Builder
  chargeSearchBar() {
    ChargeSearchBarView({
      name: this.name,
      maxLength: 30,
      inputController: this.inputController,
      searchButtonCallback: (value) => {
        if (!value) {
          toast('请输入搜索内容')
        } else {
          this.name = value.replace(/\s+/g, '')
          this.getStationData()
        }
      }
    })
  }
  //搜索结果
  @Builder
  chargeSearchList() {
    ChargeListView({ chargeList: this.chargeList })
      .margin({ top: 50 + ScreenUtils.getInstance().getStatusBarHeight() })
  }
  build() {
    Stack() {
      this.chargeSearchBar() //顶部搜索
      this.chargeSearchList() //搜索结果
    }
    .alignContent(Alignment.Top)
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_f0f2f4'))
  }
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "common",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/common",
		"installationFree": false
	}
}
{
  "module": {
    "name": "common_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "module description"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "charge"
    },
    {
      "name": "scan",
      "value": "scan"
    },
    {
      "name": "mine",
      "value": "mine"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "Welcome to log in to the Groundhog charging platform"
    },
    {
      "name": "please_select_the_tenant",
      "value": "Please select the tenant"
    },
    {
      "name": "please_enter_the_username",
      "value": "Please enter the username"
    },
    {
      "name": "please_enter_the_password",
      "value": "Please enter your password"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "Please enter the verification code"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "Please enter the company name"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "Please enter the company website"
    },
    {
      "name": "login",
      "value": "Login"
    },
    {
      "name": "no_account",
      "value": "No account?"
    },
    {
      "name": "register",
      "value": "Register"
    },
    {
      "name": "login_in",
      "value": "login in"
    },
    {
      "name": "existing_account",
      "value": "existing account?"
    },
    {
      "name": "register_immediately",
      "value": "register immediately"
    },
    {
      "name": "company_website",
      "value": "The company 's website, such as www.example.com"
    },
    {
      "name": "company_name",
      "value": "company name"
    },
    {
      "name": "password_length",
      "value": "Password: At least 5 characters in length"
    },
    {
      "name": "get_code",
      "value": "get code"
    },
    {
      "name": "verification_code",
      "value": "Verification code :666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "Welcome to register on the Groundhog charging platform"
    },
    {
      "name": "search_content",
      "value": "Please enter the search content"
    },
    {
      "name": "search",
      "value": "search"
    },
    {
      "name": "no_data",
      "value": "no data"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "Selection of charging pile"
    },
    {
      "name": "fast_charge",
      "value": "fast charge"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "national standard"
    },
    {
      "name": "idle",
      "value": "Idle"
    },
    {
      "name": "faults",
      "value": "Faults"
    },
    {
      "name": "charging_in_progress",
      "value": "Charging in progress"
    },
    {
      "name": "pile_number",
      "value": "Pile_number:"
    },
    {
      "name": "station_name",
      "value": "Station name:"
    },
    {
      "name": "agreement",
      "value": "agreement"
    },
    {
      "name": "certification",
      "value": "certification"
    },
    {
      "name": "feat",
      "value": "feat"
    },
    {
      "name": "message",
      "value": "message"
    },
    {
      "name": "person",
      "value": "person"
    },
    {
      "name": "rule",
      "value": "rule"
    },
    {
      "name": "order",
      "value": "order"
    },
    {
      "name": "service",
      "value": "service"
    },
    {
      "name": "there_is_no_more_data",
      "value": "There is no more data"
    },
    {
      "name": "loading",
      "value": "loading..."
    },
    {
      "name": "completed",
      "value": "Completed"
    },
    {
      "name": "pile_code",
      "value": "Pile code:"
    },
    {
      "name": "charge_name",
      "value": "Charge name:"
    },
    {
      "name": "price",
      "value": "Price:"
    },
    {
      "name": "order_status",
      "value": "Order status:"
    },
    {
      "name": "start_time",
      "value": "Start time:"
    },
    {
      "name": "end_time",
      "value": "End time:"
    },
    {
      "name": "stop_charge",
      "value": "Stop charging"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "charge",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/charge",
		"installationFree": false
	}
}
{
  "module": {
    "name": "common",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
{
  "float": [
    {
      "name": "page_text_font_size",
      "value": "50fp"
    }
  ]
}
import display from '@ohos.display';
import { GlobalContext } from '.';
import window from '@ohos.window';
import common from '@ohos.app.ability.common';
import { StorageConst } from '../manager';
export class ScreenUtils {
  private static instance: ScreenUtils;
  setWindow(windowInfo: window.Window) {
    // 获取窗口属性
    const properties = windowInfo.getWindowProperties();
    this.setScreen(properties.windowRect.width, properties.windowRect.height)
    windowInfo.on("windowSizeChange", (size: Size) => {
      this.setScreen(size.width, size.height)
    })
  }
  private constructor() {
    this.defaultDisplay = display.getDefaultDisplaySync()
    this.defaultDisplay.getCutoutInfo((e, data) => {
      this.cutoutInfo = data
    })
    let callback: Callback<display.FoldDisplayMode> = (data: display.FoldDisplayMode) => {
      this.setFoldDisplayMode(data)
    };
    display.on("foldDisplayModeChange", callback)
  }
  private setScreen(width: number, height: number) {
    AppStorage.setOrCreate(StorageConst.SCREEN_WIDTH_VP, px2vp(width));
    AppStorage.setOrCreate(StorageConst.SCREEN_HEIGHT_VP, px2vp(height));
  }
  private setFoldDisplayMode(data: display.FoldDisplayMode) {
    AppStorage.setOrCreate(StorageConst.FOLD_DISPLAY_MODE, data);
  }
  public static getInstance(): ScreenUtils {
    if (!ScreenUtils.instance) {
      ScreenUtils.instance = new ScreenUtils();
    }
    return ScreenUtils.instance;
  }
  //屏幕数据
  private defaultDisplay: display.Display | null = null
  //挖孔屏状态栏区域
  private cutoutInfo: display.CutoutInfo | null = null
  getDisplay(): display.Display | null {
    return this.defaultDisplay
  }
  getScreenWidthPx(): number {
    return this.defaultDisplay?.width ?? -1
  }
  getScreenHeightPx(): number {
    return this.defaultDisplay?.height ?? -1
  }
  getScreenContentHeightPX(): number {
    return vp2px(this.getScreenHeightVp() - this.getStatusBarHeight())
  }
  getScreenContentHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenWidthVp(): number {
    return px2vp(this.getScreenWidthPx())
  }
  /**
   * 获取刘海屏状态栏最大的区域
   * @returns
   */
  getStatusBarHeight(): number {
    const statusBar = GlobalContext.getContext().getObject(GlobalContext.STATUS_BAR_HEIGHT) as number;
    return px2vp(statusBar)
  }
  // 底部安全距离
  getSafeBottomHeight() {
    const navigation = GlobalContext.getContext().getObject(GlobalContext.NAVIGATION_HEIGHT) as number;
    return px2vp(navigation)
  }
  /**
   * 获取底部导航栏的高度
   * @returns
   */
  async getBottomNavBarHeight(context: common.BaseContext): Promise<number> {
    const win = await window.getLastWindow(context)
    return px2vp(win.getWindowAvoidArea(window.AvoidAreaType.TYPE_NAVIGATION_INDICATOR).bottomRect.height)
  }
  async getStatusBarColor(): Promise<string> {
    const currentWindow = await window.getLastWindow(getContext(this))
    return currentWindow.getWindowSystemBarProperties().statusBarColor ?? '#000000'
  }
  // 改变状态栏文字颜色
  updateStatusBarColor(isBlack: boolean) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      currentWindow.setWindowSystemBarProperties({ statusBarContentColor: isBlack ? '#000000' : '#ffffff' })
    })
  }
  // 检查设备是否可折叠
  isFoldable() {
    return display.isFoldable()
  }
  // 设备当前折叠状态是否为为完全展开
  isFoldExpanded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_EXPANDED
  }
  // 设备当前折叠状态是否为为半折叠
  isFoldHalfFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_HALF_FOLDED
  }
  // 设备当前折叠状态为是否为折叠
  isFoldFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_FOLDED
  }
}
import { bundleManager } from "@kit.AbilityKit";
class AppBundleManager{
  private bundleInfo?: bundleManager.BundleInfo
  getBundleInfo(): bundleManager.BundleInfo {
    if (this.bundleInfo == null || this.bundleInfo == undefined) {
      return bundleManager.getBundleInfoForSelfSync(bundleManager.BundleFlag.GET_BUNDLE_INFO_WITH_APPLICATION)
    }
    return this.bundleInfo
  }
  getTokenId(): number {
    let bundleInfo = this.getBundleInfo();
    return bundleInfo.appInfo.accessTokenId;
  }
}
export const appBundleManager = new AppBundleManager()
import { componentUtils, inspector } from "@kit.ArkUI"
export class ComponentUtils {
  /**
   * 同步方式获取组件渲染后的实际高度
   * @param componentId 组件ID
   * @param callback 注册的回调函数
   */
  static getComponentHeightSync(componentId: string, callback: (width: number) => void): void {
    // 监听组件
    const listener = inspector.createComponentObserver(componentId)
    // 注册回调
    listener.on('layout', () => {
      const componentInfo = componentUtils.getRectangleById(componentId)
      const height = px2vp(componentInfo.size.height)
      callback?.(height)
      // 取消注册回调
      listener.off('layout')
    })
  }
}
import { BusinessError } from "@kit.BasicServicesKit"
import { bundleManager } from "@kit.AbilityKit"
export enum ThirdApp {
  Alipay = 'alipays://',
  Amapuri = "amapuri://", // 高德地图的 scheme
  Baidumap = "baidumap://map/direction", // 百度地图的 scheme
  Maps = "maps://", // 华为地图的 scheme
  Https = "https://" // App link scheme
}
class ThirdAppManager{
  /** 第三方应用是否安装 */
  isAppInstall(thirdApp: ThirdApp): boolean {
    try {
      return bundleManager.canOpenLink(thirdApp)
    } catch (e) {
      let code = (e as BusinessError)?.code
      let msg = (e as BusinessError)?.message ?? ''
      if (code !== undefined) {
        if (code === 17700056) {
          msg += ` Please include "${thirdApp.replace('://',
            '')}" inside the "querySchemes" element of module.json5 in your app module.`
        }
        console.log(`isAppInstall get error${msg}`)
      } else {
        console.log(`isAppInstall get error${e}`)
      }
      return false
    }
  }
}
export const thirdAppManager = new ThirdAppManager()
export * from './WindowModel'
export * from './GlobalContext'
export * from './TextUtil'
export { ScreenUtils } from './ScreenUtil';
export { initDataPreference, commonStorage } from './StorageUtils'
export * from './ComponentUtils'
export { formatDate } from './formatDate'
import { geoLocationManager } from "@kit.LocationKit";
import { PermissionConst } from "./PermissionConst";
import { permissionManager } from "./PermissionManager";
class LocationManager {
  async requestPermissionAgain() {
    return await permissionManager.requestPermissionAgain(PermissionConst.locationPermissions, getContext(this))
  }
  // 检查是否有定位权限，外部可直接调用，异常时返回false
  async checkLocationPermissions(): Promise<boolean> {
    try {
      return await permissionManager.checkPermissions(PermissionConst.locationPermissions) &&
      geoLocationManager.isLocationEnabled();
    } catch (e) {
      console.log(`lucy== hasLocationPermissions, ${JSON.stringify(e)}`)
      return false;
    }
  }
  // 校验并申请权限，如果申请权限返回false，则抛出异常，使用者需要使用catch接收。
  async checkAndApplyPermissions(context: Context): Promise<boolean> {
    let isGranted = await this.checkLocationPermissions();
    if (isGranted) {
      return true;
    }
    try {
      let userGranted = await permissionManager.reqPermissionsFromUser(PermissionConst.locationPermissions, context);
      if (userGranted) {
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }
}
export const locationManager = new LocationManager()
import { window } from "@kit.ArkUI";
import { BusinessError } from "@kit.BasicServicesKit";
export class WindowModel {
  private constructor() {
  }
  /**
   * 默认样式
   */
  private readonly DEFAULT: window.SystemBarProperties = {
    statusBarColor: '#00000000',
    navigationBarColor: '#00000000',
    // 以下两个属性从API Version 8开始支持
    statusBarContentColor: '#000000',
    navigationBarContentColor: '#00000000'
  };
  /**
   * WindowModel 单例
   */
  private static instance?: WindowModel;
  /**
   * 获取WindowModel单例实例
   * @returns {WindowModel} WindowModel
   */
  static getInstance(): WindowModel {
    if (!WindowModel.instance) {
      WindowModel.instance = new WindowModel();
    }
    return WindowModel.instance;
  }
  /**
   * 缓存的当前WindowStage实例
   */
  private windowStage?: window.WindowStage;
  /**
   * 缓存windowStage
   * @param windowStage 当前WindowStage实例
   * @returns {void}
   */
  setWindowStage(windowStage: window.WindowStage): void {
    this.windowStage = windowStage;
  }
  getWindowStage(): window.WindowStage | undefined {
    return this.windowStage
  }
  /**
   * 当前主窗口是否开启沉浸模式
   * @param enable 是否开启
   * @returns {void}
   */
  setMainWindowImmersive(enable: boolean, properties?: window.SystemBarProperties): void {
    if (this.windowStage === undefined) {
      console.error('windowStage is undefined.');
      return;
    }
    // 1.获取应用主窗口。
    let windowClass: window.Window | null = null;
    this.windowStage.getMainWindow((err: BusinessError, data) => {
      let errCode: number = err.code;
      if (errCode) {
        console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));
        return;
      }
      windowClass = data;
      console.info('Succeeded in obtaining the main window data.');
      // 2.实现沉浸式效果。方式二：设置窗口为全屏布局，配合设置导航栏、状态栏的透明度、背景/文字颜色及高亮图标等属性，与主窗口显示保持协调一致。
      windowClass.setWindowLayoutFullScreen(enable, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the window layout to full-screen mode.');
      });
      const p = properties ? properties : this.DEFAULT
      windowClass.setWindowSystemBarProperties(p, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the system bar properties.');
      });
    })
  }
  /**
   * 软键盘是否显示/隐藏
   * @param callback
   */
  getKeyBoardVisible(callback: (visible: boolean) => void) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      // 监听软键盘的隐藏和显示
      currentWindow.on('avoidAreaChange', data => {
        if (data.type == window.AvoidAreaType.TYPE_KEYBOARD) {
          const keyBoardHeight = px2vp(data.area.bottomRect.height);
          if (keyBoardHeight > 0) {
            callback(true)
          } else {
            callback(false)
          }
        }
      })
    })
  }
}
import { Permissions } from '@kit.AbilityKit';
export class PermissionConst {
  static readonly locationPermissions: Array<Permissions> = [
    'ohos.permission.APPROXIMATELY_LOCATION',
    'ohos.permission.LOCATION',
  ];
  static readonly mediaRWPermissions: Array<Permissions> = [
    'ohos.permission.READ_MEDIA',
    'ohos.permission.WRITE_MEDIA'
  ];
  static readonly imageVideoReadPermission: Permissions = 'ohos.permission.READ_IMAGEVIDEO';
  static readonly imageVideoWritePermission: Permissions = 'ohos.permission.WRITE_IMAGEVIDEO';
  static readonly cameraPermission: Permissions = 'ohos.permission.CAMERA';
  // 获取OAID
  static readonly oaIdPermission: Permissions = 'ohos.permission.APP_TRACKING_CONSENT';
}
import dataPreferences from '@ohos.data.preferences';
import preferences from '@ohos.data.preferences';
import { HashMap } from '@kit.ArkTS';
import { common } from '@kit.AbilityKit';
import { GlobalContext } from './GlobalContext';
import { BusinessError } from '@kit.BasicServicesKit';
class Storage{
  private name: string = 'app_storage'
  private preferences: dataPreferences.Preferences | null = null
  private listenerKeyMap = new HashMap<string, HashMap<string, Callback<string>>>()
  constructor(name: string) {
    this.name = name;
  }
  initStorage() {
    const context = GlobalContext.getContext().getObject('context') as common.UIAbilityContext
    const options: dataPreferences.Options = { name: this.name }
    this.preferences = dataPreferences.getPreferencesSync(context, options)
    this.preferences?.on('change', (key: string) => {
      const pageMap = this.listenerKeyMap.get(key)
      pageMap?.forEach((callBack: Callback<string>) => {
        callBack(key)
      })
    })
  }
  /**
   * 存储key,value到preference缓存里面
   * @param key
   * @param value
   */
  saveValueSync(key: string, value: preferences.ValueType) {
    this.preferences?.putSync(key, value)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 根据key删除值
   * @param key
   */
  deleteValueSync(key: string) {
    this.preferences?.deleteSync(key)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns string
   */
  getStringValueSync(key: string, defaultValue: string) {
    return this.preferences?.getSync(key, defaultValue) as string
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns Array<string>
   */
  getArrayStringValueSync(key: string, defaultValue: Array<string>) {
    return this.preferences?.getSync(key, defaultValue) as Array<string>
  }
}
export const commonStorage = new Storage('common_storage')
export function initDataPreference() {
  commonStorage.initStorage()
}
import measure from '@ohos.measure'
export class TextUtil{
  static getTextWidth(textContent: string,
    fontSize: number | string | Resource = $r('app.float.size_text_14'), maxLines: number = 1,
    weight: FontWeight | number = FontWeight.Regular): number {
    if (!textContent || textContent.length === 0) {
      return 0
    }
    const width: number = measure.measureText({
      textContent: textContent,
      fontSize: fontSize,
      fontWeight: weight,
      maxLines: maxLines
    })
    return px2vp(width)
  }
}
export * from './LocationManager';
export * from './ThirdAppManager'
import { abilityAccessCtrl, PermissionRequestResult, Permissions } from "@kit.AbilityKit";
import { BusinessError } from "@kit.BasicServicesKit";
import { appBundleManager } from "./AppBundleManager";
class PermissionManager{
  atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
  // 每次访问受目标权限保护的接口之前，都需要使用requestPermissionsFromUser()接口请求相应的权限。
  // 权限组：当应用请求权限时，同一个权限组的权限将会在一个弹窗内一起请求用户授权。用户点击同意，即同意了整个权限组。
  // 如定位权限组：['ohos.permission.APPROXIMATELY_LOCATION', 'ohos.permission.LOCATION']
  async checkPermissions(permissions: Array<Permissions>): Promise<boolean> {
    console.log(`check permission ${permissions}`);
    try {
      let grantStatusArray: abilityAccessCtrl.GrantStatus[] = [];
      for (let i = 0; i < permissions.length; i++) {
        grantStatusArray[i] = await this.checkPermissionInner(permissions[i]);
      }
      console.log(`checkPermissions: ${permissions}, grantStatus ${grantStatusArray} `);
      // todo 暂定全同意才算同意
      const denied = grantStatusArray.indexOf(abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) > -1;
      return !denied;
    } catch (e) {
      return Promise.reject(e);
    }
  }
  private async checkPermissionInner(permission: Permissions): Promise<abilityAccessCtrl.GrantStatus> {
    let grantStatus: abilityAccessCtrl.GrantStatus = abilityAccessCtrl.GrantStatus.PERMISSION_DENIED;
    // 校验应用是否被授予权限
    try {
      grantStatus = await this.atManager.checkAccessToken(appBundleManager.getTokenId(), permission);
    } catch (error) {
      const err: BusinessError = error as BusinessError;
      console.log(`Failed to check access token. Code is ${err.code}, message is ${err.message}`);
      return Promise.reject(`checkPermissionInner: checkAccessToken error: ${JSON.stringify(error)}`,);
    }
    return grantStatus;
  }
  async reqPermissionsFromUser(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
    // requestPermissionsFromUser会判断权限的授权状态来决定是否唤起弹窗
    try {
      let result: PermissionRequestResult = await atManager.requestPermissionsFromUser(context, permissions);
      let grantStatus: Array<number> = result.authResults;
      for (let i = 0; i < grantStatus.length; i++) {
        if (grantStatus[i] === 0) {
          // 用户授权，可以继续访问目标操作
          console.log(`reqPermissionsFromUser: ${permissions[i]} is granted`);
        } else {
          console.log(`reqPermissionsFromUser: ${permissions[i]} is denied`);
          return false;
        }
      }
      return true;
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
  //被拒绝后，再次点击全权限申请使用该方法
  async requestPermissionAgain(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    try {
      const result = await this.atManager.requestPermissionOnSetting(context, permissions)
      return result.every((status) => {
        return status === abilityAccessCtrl.GrantStatus.PERMISSION_GRANTED
      })
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
}
let permissionManager = new PermissionManager();
export { permissionManager };
// 与EntryAbility交互，获取ability当前的数据
export class GlobalContext {
  static readonly CONTEXT = 'context';
  static readonly WANT = 'want';
  //状态栏高度
  static readonly STATUS_BAR_HEIGHT = 'statusBarHeight';
  //导航栏高度
  static readonly NAVIGATION_HEIGHT = 'navigationHeight';
  private constructor() { }
  private static instance: GlobalContext;
  private _objects = new Map<string, Object>();
  public static getContext(): GlobalContext {
    if (!GlobalContext.instance) {
      GlobalContext.instance = new GlobalContext();
    }
    return GlobalContext.instance;
  }
  getObject(value: string): Object | undefined {
    return this._objects.get(value);
  }
  setObject(key: string, objectClass: Object): void {
    this._objects.set(key, objectClass);
  }
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    }
  ]
}
//封装一个函数：简化时间格式
export const formatDate = (dateStr:string)=>{
  const date = new Date(dateStr)
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}
import { ScreenUtils, StyleConst } from "../../../../Index"
import { router } from "@kit.ArkUI"
@Component
export struct TbsTitleBar {
  @Prop title: ResourceStr = ''
  @Prop showBackIcon: boolean = false
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight())
      RelativeContainer() {
        Text(this.title)
          .fontColor(Color.White)
          .fontSize($r('app.float.size_text_20'))
          .textAlign(TextAlign.Center)
          .maxLines(1)
          .id('text')
          .alignRules({
            center: { anchor: "__container__", align: VerticalAlign.Center },
            middle: { anchor: "__container__", align: HorizontalAlign.Center }
          })
        if (this.showBackIcon) {
          Image($r('app.media.back'))
            .width($r('app.float.size_45'))
            .id('image')
            .alignRules({
              left: { anchor: "__container__", align: HorizontalAlign.Start }
            })
            .onClick(() => {
              router.back()
            })
        }
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_45'))
    }
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
export class ResponseResult {
  code?: number
  message?: string
  data?: object
}
export class RoutePageConst {
  static readonly AppHomePage = "home/HomePage" //App-充电页面
  static readonly LoginPage = "login/LoginPage" //App-登录页面
}
export { requestApiCall } from './httpUtils'
export * from './Apis'
export * from './StyleConst'
export * from './TbsTitleBar'
export * from './BottomLoadingBuilder'
import { StorageConst } from "./StorageConst"
import { UserInfoData } from "../model/UserInfoModel"
import { commonStorage } from "../utils"
class UserCenterConst {
  userInfo: UserInfoData | null = null
  getUserInfoData(): UserInfoData | null {
    if (this.userInfo) {
      return this.userInfo;
    }
    const value = commonStorage.getStringValueSync(StorageConst.USER_INFO, '');
    // 如果已经是对象，直接使用
    if (value && typeof value === 'object') {
      this.userInfo = value as UserInfoData;
      return this.userInfo;
    }
    // 如果是字符串，尝试解析
    if (typeof value === 'string' && value) {
      const p = JsonParse<UserInfoData>(value);
      if (p) {
        this.userInfo = p;
        return this.userInfo;
      }
    }
    return null;
  }
}
function JsonParse<T>(text: string): T | undefined {
  try {
    return JSON.parse(text);
  } catch (e) {
    console.error(`JSON解析错误: ${text}, 错误信息: ${e}`);
    return undefined;
  }
}
export default new UserCenterConst()
export class StyleConst {
  // 宽高
  static readonly FULL_WIDTH: string = '100%';
  static readonly FULL_HEIGHT: string = '100%';
  static readonly PERCENT_10 = '10%'
  static readonly PERCENT_15 = '15%'
  static readonly PERCENT_17 = '17%'
  static readonly PERCENT_20 = '20%'
  static readonly PERCENT_25 = '25%'
  static readonly PERCENT_30 = '30%'
  static readonly PERCENT_35 = '35%'
  static readonly PERCENT_40 = '40%'
  static readonly PERCENT_45 = '45%'
  static readonly PERCENT_50 = '50%'
  static readonly PERCENT_60 = '60%'
  static readonly PERCENT_65 = '65%'
  static readonly PERCENT_70 = '70%'
  static readonly PERCENT_72 = '72%'
  static readonly PERCENT_75 = '75%'
  static readonly PERCENT_80 = '80%'
  static readonly PERCENT_85 = '85%'
  static readonly PERCENT_90 = '90%'
  static readonly PERCENT_95 = '95%'
  static readonly PERCENT_100 = '100%'
}
export class Apis {
  //注册
  static readonly USER_REGISTER = "/saas-api/tenant/register"
  //获取token-登录
  static readonly USER_LOGIN = "/saas-api/user/login"
  //获取租户ID
  static readonly USER_TENANT = "/saas-api/tenant/selects"
  //获取用户信息
  static readonly USER_INFO = "/wx-api/me/info"
  //获取充电站
  static readonly CHARGE_STATION_LIST = "/wx-api/station/list"
  //获取充电桩
  static readonly CHARGE_PILE_LIST = "/wx-api/pile/list"
  //获取充电价格
  static readonly CHARGE_PRICE = "/wx-api/price/list"
  //开始充电
  static readonly CHARGE_START = "/wx-api/charge/start"
  //结束充电
  static readonly CHARGE_STOP = "/wx-api/charge/stop"
  //获取充电订单列表
  static readonly CHARGE_ORDER_LIST = "/wx-api/charge/list"
}
import { StyleConst } from "../../../../Index"
@Component
export struct BottomLoadingBuilder {
  @Prop haveNextPage: boolean
  @Prop loading: boolean
  @Prop dataLength: number
  build() {
    if (this.haveNextPage && this.loading) {
      Row() {
        LoadingProgress()
          .width($r('app.float.size_30'))
          .height($r('app.float.size_30'))
          .margin({ right: $r('app.float.size_10') })
        Text($r('app.string.loading'))
          .fontSize($r('app.float.size_text_14'))
          .fontColor($r('app.color.color_666'))
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_60'))
      .justifyContent(FlexAlign.Center)
    } else if (!this.haveNextPage && this.dataLength > 0) {
      Text($r('app.string.there_is_no_more_data'))
        .fontSize($r('app.float.size_text_14'))
        .fontColor($r('app.color.color_999'))
        .textAlign(TextAlign.Center)
        .width(StyleConst.FULL_WIDTH)
        .margin({ top: $r('app.float.size_10'), bottom: $r('app.float.size_20') })
    }
  }
}
import http from '@ohos.net.http';
import { commonStorage } from '../../../../Index';
import { StorageConst } from '../manager';
import { ResponseResult } from './response';
export function requestApiCall(url: string,
  method: http.RequestMethod,
  data?: Record<string, number | boolean | string | Object | undefined>,
  headers?: Record<string, string>,
): Promise<ResponseResult> {
  const BASE_URL = 'https://charging.lusson.xyz'
  const httpRequest = http.createHttp();
  const defaultHeaders: Record<string, string> = {
    'Content-Type': 'application/json',
  }
  const token = commonStorage.getStringValueSync(StorageConst.TOKEN, "")
  if (token) {
    defaultHeaders['Authorization'] = `Bearer ${token}`
  }
  const finalHeaders: Record<string, string> = {};
  Object.keys(defaultHeaders).forEach(key => {
    finalHeaders[key] = defaultHeaders[key];
  });
  if (headers) {
    Object.keys(headers).forEach(key => {
      finalHeaders[key] = String(headers[key]);
    });
  }
  let responseResult = httpRequest.request(BASE_URL + url, {
    method: method,
    extraData: data ? JSON.stringify(data) : undefined,
    header: finalHeaders
  });
  let response: ResponseResult = new ResponseResult();
  return responseResult.then((value: http.HttpResponse) => {
    if (value.responseCode === 200) {
      let res: ResponseResult = JSON.parse(`${value.result}`);
      response.data = res.data;
      response.code = res.code;
      response.message = res.message;
    } else {
      response.message = '请求错误';
      response.code = 400;
    }
    return response;
  }).catch((error: Error) => {
    console.log('lucy++ error', JSON.stringify(error))
    response.message = '请求错误';
    response.code = 400;
    return response;
  })
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "module description"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "charge"
    },
    {
      "name": "scan",
      "value": "scan"
    },
    {
      "name": "mine",
      "value": "mine"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "Welcome to log in to the Groundhog charging platform"
    },
    {
      "name": "please_select_the_tenant",
      "value": "Please select the tenant"
    },
    {
      "name": "please_enter_the_username",
      "value": "Please enter the username"
    },
    {
      "name": "please_enter_the_password",
      "value": "Please enter your password"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "Please enter the verification code"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "Please enter the company name"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "Please enter the company website"
    },
    {
      "name": "login",
      "value": "Login"
    },
    {
      "name": "no_account",
      "value": "No account?"
    },
    {
      "name": "register",
      "value": "Register"
    },
    {
      "name": "login_in",
      "value": "login in"
    },
    {
      "name": "existing_account",
      "value": "existing account?"
    },
    {
      "name": "register_immediately",
      "value": "register immediately"
    },
    {
      "name": "company_website",
      "value": "The company 's website, such as www.example.com"
    },
    {
      "name": "company_name",
      "value": "company name"
    },
    {
      "name": "password_length",
      "value": "Password: At least 5 characters in length"
    },
    {
      "name": "get_code",
      "value": "get code"
    },
    {
      "name": "verification_code",
      "value": "Verification code :666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "Welcome to register on the Groundhog charging platform"
    },
    {
      "name": "search_content",
      "value": "Please enter the search content"
    },
    {
      "name": "search",
      "value": "search"
    },
    {
      "name": "no_data",
      "value": "no data"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "Selection of charging pile"
    },
    {
      "name": "fast_charge",
      "value": "fast charge"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "national standard"
    },
    {
      "name": "idle",
      "value": "Idle"
    },
    {
      "name": "faults",
      "value": "Faults"
    },
    {
      "name": "charging_in_progress",
      "value": "Charging in progress"
    },
    {
      "name": "pile_number",
      "value": "Pile_number:"
    },
    {
      "name": "station_name",
      "value": "Station name:"
    },
    {
      "name": "agreement",
      "value": "agreement"
    },
    {
      "name": "certification",
      "value": "certification"
    },
    {
      "name": "feat",
      "value": "feat"
    },
    {
      "name": "message",
      "value": "message"
    },
    {
      "name": "person",
      "value": "person"
    },
    {
      "name": "rule",
      "value": "rule"
    },
    {
      "name": "order",
      "value": "order"
    },
    {
      "name": "service",
      "value": "service"
    },
    {
      "name": "there_is_no_more_data",
      "value": "There is no more data"
    },
    {
      "name": "loading",
      "value": "loading..."
    },
    {
      "name": "completed",
      "value": "Completed"
    },
    {
      "name": "pile_code",
      "value": "Pile code:"
    },
    {
      "name": "charge_name",
      "value": "Charge name:"
    },
    {
      "name": "price",
      "value": "Price:"
    },
    {
      "name": "order_status",
      "value": "Order status:"
    },
    {
      "name": "start_time",
      "value": "Start time:"
    },
    {
      "name": "end_time",
      "value": "End time:"
    },
    {
      "name": "stop_charge",
      "value": "Stop charging"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
export * from './StorageConst'
export * from './RoutePageConst'
export * from './UserCenterConst'
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
export class StorageConst {
  static readonly TOKEN = 'token'
  static readonly USER_INFO = 'userInfo'
  // 屏幕宽高
  static readonly SCREEN_WIDTH_VP = 'screenWidthVp'
  static readonly SCREEN_HEIGHT_VP = 'screenHeightVp'
  // 折叠屏显示模式
  static readonly FOLD_DISPLAY_MODE = 'foldDisplayMode'
  static readonly SEARCH_HISTORY = "search_history"
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
{
  "module": {
    "name": "scan_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
export * from './ShowToast'
export * from './BottomPop'
import { StyleConst } from "../common";
import { ScreenUtils, WindowModel,ComponentUtils } from "../utils";
@CustomDialog
@Component
export struct BottomPop {
  controller: CustomDialogController;
  title: ResourceStr = '';
  titlePadding: Padding = { top: $r('app.float.size_16'), bottom: $r('app.float.size_16') }
  titleFontSize: ResourceStr = $r('app.float.size_text_16')
  titleTextColor: ResourceColor = Color.Black
  titleBgColor: ResourceColor = Color.Transparent
  contentBgColor: ResourceColor = Color.Transparent
  bgColor?: ResourceColor = Color.White
  // 软键盘是否显示
  @State keyBoardVisible: boolean = false
  keyboardAvoidMode: KeyboardAvoidMode = KeyboardAvoidMode.DEFAULT
  minHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.3 // 弹窗最低高度
  maxHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.8 // 弹窗最大高度
  @State dialogMaxHeight: number = 0 // 通过 maxHeight 计算出来的内容的高度
  @Builder
  child() {
  };
  @BuilderParam childBuilderParam: () => void = this.child;
  aboutToAppear(): void {
    if (this.isKeyboardAvoidNone()) {
      this.getKeyBoardVisible()
    }
    this.getTitleHeight()
  }
  // 软键盘是否拉起
  getKeyBoardVisible() {
    WindowModel.getInstance().getKeyBoardVisible((visible) => {
      this.keyBoardVisible = visible
    })
  }
  // 弹窗是否在拉起软键盘时进行自动避让
  isKeyboardAvoidNone() {
    return this.keyboardAvoidMode === KeyboardAvoidMode.NONE // 弹窗不避让软键盘
  }
  getTitleHeight() {
    ComponentUtils.getComponentHeightSync('BottomPop_title', (componentHeight) => {
      const safeBottomHeight = ScreenUtils.getInstance().getSafeBottomHeight() // 底部安全区高度
      // 内容最大高度 = 屏幕80%高度 - title高度 - 底部安全区高度
      this.dialogMaxHeight = Number(this.maxHeight) - componentHeight - safeBottomHeight
    })
  }
  build() {
    Stack({ alignContent: Alignment.TopEnd }) {
      Column() {
        Text(this.title)
          .padding(this.titlePadding)
          .fontColor(this.titleTextColor)
          .fontSize(this.titleFontSize)
          .fontWeight(FontWeight.Medium)
          .textAlign(TextAlign.Center)
          .width(StyleConst.FULL_WIDTH)
          .height($r('app.float.size_50'))
          .backgroundColor(this.titleBgColor)
          .id('BottomPop_title')
          .borderRadius({
            topLeft: $r('app.float.size_16'),
            topRight: $r('app.float.size_16')
          })
        Column() {
          this.childBuilderParam()
        }
        .backgroundColor(this.contentBgColor)
        .constraintSize({
          maxHeight: this.dialogMaxHeight,
        })
      }
      .padding({
        bottom: ScreenUtils.getInstance().getSafeBottomHeight(), // 设置padding避开底部安全区
      })
      .width(StyleConst.FULL_WIDTH)
      .backgroundColor(this.bgColor)
      .borderRadius({
        topLeft: $r('app.float.size_16'),
        topRight: $r('app.float.size_16')
      })
      .constraintSize({
        maxHeight: this.maxHeight,
        minHeight: this.minHeight
      })
      Image($r("app.media.common_bottom_sheet_close"))
        .size({ width: $r('app.float.size_20'), height: $r('app.float.size_20') })
        .margin({ top: $r('app.float.size_16'), right: $r('app.float.size_16') })
        .responseRegion({
          x: '-25%',
          y: '-25%',
          width: '150%',
          height: '150%'
        })
        .onClick(() => {
          this.controller.close();
        })
    }
  }
}
import { promptAction } from '@kit.ArkUI'
//轻提示工具类
export const toast = (hintContent: string | ResourceStr, alignment: Alignment = Alignment.Center): void => {
  promptAction.showToast({ message: hintContent, alignment: alignment })
}
{
  "color": [
    {
      "name": "color_0aa671",
      "value": "#0aa671"
    },
    {
      "name": "start_window_background",
      "value": "#FFFFFF"
    },
    {
      "name": "color_0165b8",
      "value": "#0165b8"
    },
    {
      "name": "color_182431",
      "value": "#182431"
    },
    {
      "name": "color_efefef",
      "value": "#EFEFEF"
    },
    {
      "name": "color_f5f5f5",
      "value": "#F5F5F5"
    },
    {
      "name": "color_adadb3",
      "value": "#adadb3"
    },
    {
      "name": "color_fff",
      "value": "#fff"
    },
    {
      "name": "color_898e92",
      "value": "#898e92"
    },
    {
      "name": "color_0165B8",
      "value": "#0165B8"
    },
    {
      "name": "color_f0f2f4",
      "value": "#f0f2f4"
    },
    {
      "name": "color_80000000",
      "value": "#80000000"
    },
    {
      "name": "color_009688",
      "value": "#009688"
    },
    {
      "name": "color_d68751",
      "value": "#d68751"
    },
    {
      "name": "color_F44336",
      "value": "#F44336"
    },
    {
      "name": "color_666",
      "value": "#666"
    },
    {
      "name": "color_999",
      "value": "#999"
    }
  ]
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    },
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
{
  "float": [
    {
      "name": "size_1",
      "value": "1vp"
    },
    {
      "name": "size_2",
      "value": "2vp"
    },
    {
      "name": "size_3",
      "value": "3vp"
    },
    {
      "name": "size_4",
      "value": "4vp"
    },
    {
      "name": "size_5",
      "value": "5vp"
    },
    {
      "name": "size_6",
      "value": "6vp"
    },
    {
      "name": "size_7",
      "value": "7vp"
    },
    {
      "name": "size_8",
      "value": "8vp"
    },
    {
      "name": "size_9",
      "value": "9vp"
    },
    {
      "name": "size_10",
      "value": "10vp"
    },
    {
      "name": "size_11",
      "value": "11vp"
    },
    {
      "name": "size_12",
      "value": "12vp"
    },
    {
      "name": "size_13",
      "value": "13vp"
    },
    {
      "name": "size_14",
      "value": "14vp"
    },
    {
      "name": "size_15",
      "value": "15vp"
    },
    {
      "name": "size_16",
      "value": "16vp"
    },
    {
      "name": "size_17",
      "value": "17vp"
    },
    {
      "name": "size_18",
      "value": "18vp"
    },
    {
      "name": "size_19",
      "value": "19vp"
    },
    {
      "name": "size_20",
      "value": "20vp"
    },
    {
      "name": "size_21",
      "value": "21vp"
    },
    {
      "name": "size_22",
      "value": "22vp"
    },
    {
      "name": "size_23",
      "value": "23vp"
    },
    {
      "name": "size_24",
      "value": "24vp"
    },
    {
      "name": "size_25",
      "value": "25vp"
    },
    {
      "name": "size_26",
      "value": "26vp"
    },
    {
      "name": "size_27",
      "value": "27vp"
    },
    {
      "name": "size_28",
      "value": "28vp"
    },
    {
      "name": "size_29",
      "value": "29vp"
    },
    {
      "name": "size_30",
      "value": "30vp"
    },
    {
      "name": "size_31",
      "value": "31vp"
    },
    {
      "name": "size_32",
      "value": "32vp"
    },
    {
      "name": "size_33",
      "value": "33vp"
    },
    {
      "name": "size_34",
      "value": "34vp"
    },
    {
      "name": "size_35",
      "value": "35vp"
    },
    {
      "name": "size_36",
      "value": "36vp"
    },
    {
      "name": "size_37",
      "value": "37vp"
    },
    {
      "name": "size_38",
      "value": "38vp"
    },
    {
      "name": "size_39",
      "value": "39vp"
    },
    {
      "name": "size_40",
      "value": "40vp"
    },
    {
      "name": "size_41",
      "value": "41vp"
    },
    {
      "name": "size_42",
      "value": "42vp"
    },
    {
      "name": "size_43",
      "value": "43vp"
    },
    {
      "name": "size_44",
      "value": "44vp"
    },
    {
      "name": "size_45",
      "value": "45vp"
    },
    {
      "name": "size_46",
      "value": "46vp"
    },
    {
      "name": "size_47",
      "value": "47vp"
    },
    {
      "name": "size_48",
      "value": "48vp"
    },
    {
      "name": "size_49",
      "value": "49vp"
    },
    {
      "name": "size_50",
      "value": "50vp"
    },
    {
      "name": "size_51",
      "value": "51vp"
    },
    {
      "name": "size_52",
      "value": "52vp"
    },
    {
      "name": "size_53",
      "value": "53vp"
    },
    {
      "name": "size_54",
      "value": "54vp"
    },
    {
      "name": "size_55",
      "value": "55vp"
    },
    {
      "name": "size_56",
      "value": "56vp"
    },
    {
      "name": "size_57",
      "value": "57vp"
    },
    {
      "name": "size_58",
      "value": "58vp"
    },
    {
      "name": "size_59",
      "value": "59vp"
    },
    {
      "name": "size_60",
      "value": "60vp"
    },
    {
      "name": "size_61",
      "value": "61vp"
    },
    {
      "name": "size_62",
      "value": "62vp"
    },
    {
      "name": "size_63",
      "value": "63vp"
    },
    {
      "name": "size_64",
      "value": "64vp"
    },
    {
      "name": "size_65",
      "value": "65vp"
    },
    {
      "name": "size_66",
      "value": "66vp"
    },
    {
      "name": "size_67",
      "value": "67vp"
    },
    {
      "name": "size_68",
      "value": "68vp"
    },
    {
      "name": "size_69",
      "value": "69vp"
    },
    {
      "name": "size_70",
      "value": "70vp"
    },
    {
      "name": "size_71",
      "value": "71vp"
    },
    {
      "name": "size_72",
      "value": "72vp"
    },
    {
      "name": "size_73",
      "value": "73vp"
    },
    {
      "name": "size_74",
      "value": "74vp"
    },
    {
      "name": "size_75",
      "value": "75vp"
    },
    {
      "name": "size_76",
      "value": "76vp"
    },
    {
      "name": "size_77",
      "value": "77vp"
    },
    {
      "name": "size_78",
      "value": "78vp"
    },
    {
      "name": "size_79",
      "value": "79vp"
    },
    {
      "name": "size_80",
      "value": "80vp"
    },
    {
      "name": "size_81",
      "value": "81vp"
    },
    {
      "name": "size_82",
      "value": "82vp"
    },
    {
      "name": "size_83",
      "value": "83vp"
    },
    {
      "name": "size_84",
      "value": "84vp"
    },
    {
      "name": "size_85",
      "value": "85vp"
    },
    {
      "name": "size_86",
      "value": "86vp"
    },
    {
      "name": "size_87",
      "value": "87vp"
    },
    {
      "name": "size_88",
      "value": "88vp"
    },
    {
      "name": "size_89",
      "value": "89vp"
    },
    {
      "name": "size_90",
      "value": "90vp"
    },
    {
      "name": "size_91",
      "value": "91vp"
    },
    {
      "name": "size_92",
      "value": "92vp"
    },
    {
      "name": "size_93",
      "value": "93vp"
    },
    {
      "name": "size_94",
      "value": "94vp"
    },
    {
      "name": "size_95",
      "value": "95vp"
    },
    {
      "name": "size_96",
      "value": "96vp"
    },
    {
      "name": "size_97",
      "value": "97vp"
    },
    {
      "name": "size_98",
      "value": "98vp"
    },
    {
      "name": "size_99",
      "value": "99vp"
    },
    {
      "name": "size_100",
      "value": "100vp"
    },
    {
      "name": "size_101",
      "value": "101vp"
    },
    {
      "name": "size_102",
      "value": "102vp"
    },
    {
      "name": "size_103",
      "value": "103vp"
    },
    {
      "name": "size_104",
      "value": "104vp"
    },
    {
      "name": "size_105",
      "value": "105vp"
    },
    {
      "name": "size_106",
      "value": "106vp"
    },
    {
      "name": "size_107",
      "value": "107vp"
    },
    {
      "name": "size_108",
      "value": "108vp"
    },
    {
      "name": "size_109",
      "value": "109vp"
    },
    {
      "name": "size_110",
      "value": "110vp"
    },
    {
      "name": "size_111",
      "value": "111vp"
    },
    {
      "name": "size_112",
      "value": "112vp"
    },
    {
      "name": "size_113",
      "value": "113vp"
    },
    {
      "name": "size_114",
      "value": "114vp"
    },
    {
      "name": "size_115",
      "value": "115vp"
    },
    {
      "name": "size_116",
      "value": "116vp"
    },
    {
      "name": "size_117",
      "value": "117vp"
    },
    {
      "name": "size_118",
      "value": "118vp"
    },
    {
      "name": "size_119",
      "value": "119vp"
    },
    {
      "name": "size_120",
      "value": "120vp"
    },
    {
      "name": "size_121",
      "value": "121vp"
    },
    {
      "name": "size_122",
      "value": "122vp"
    },
    {
      "name": "size_123",
      "value": "123vp"
    },
    {
      "name": "size_124",
      "value": "124vp"
    },
    {
      "name": "size_125",
      "value": "125vp"
    },
    {
      "name": "size_126",
      "value": "126vp"
    },
    {
      "name": "size_127",
      "value": "127vp"
    },
    {
      "name": "size_128",
      "value": "128vp"
    },
    {
      "name": "size_129",
      "value": "129vp"
    },
    {
      "name": "size_130",
      "value": "130vp"
    },
    {
      "name": "size_131",
      "value": "131vp"
    },
    {
      "name": "size_132",
      "value": "132vp"
    },
    {
      "name": "size_133",
      "value": "133vp"
    },
    {
      "name": "size_134",
      "value": "134vp"
    },
    {
      "name": "size_135",
      "value": "135vp"
    },
    {
      "name": "size_136",
      "value": "136vp"
    },
    {
      "name": "size_137",
      "value": "137vp"
    },
    {
      "name": "size_138",
      "value": "138vp"
    },
    {
      "name": "size_139",
      "value": "139vp"
    },
    {
      "name": "size_140",
      "value": "140vp"
    },
    {
      "name": "size_141",
      "value": "141vp"
    },
    {
      "name": "size_142",
      "value": "142vp"
    },
    {
      "name": "size_143",
      "value": "143vp"
    },
    {
      "name": "size_144",
      "value": "144vp"
    },
    {
      "name": "size_145",
      "value": "145vp"
    },
    {
      "name": "size_146",
      "value": "146vp"
    },
    {
      "name": "size_147",
      "value": "147vp"
    },
    {
      "name": "size_148",
      "value": "148vp"
    },
    {
      "name": "size_149",
      "value": "149vp"
    },
    {
      "name": "size_150",
      "value": "150vp"
    },
    {
      "name": "size_151",
      "value": "151vp"
    },
    {
      "name": "size_152",
      "value": "152vp"
    },
    {
      "name": "size_153",
      "value": "153vp"
    },
    {
      "name": "size_154",
      "value": "154vp"
    },
    {
      "name": "size_155",
      "value": "155vp"
    },
    {
      "name": "size_156",
      "value": "156vp"
    },
    {
      "name": "size_157",
      "value": "157vp"
    },
    {
      "name": "size_158",
      "value": "158vp"
    },
    {
      "name": "size_159",
      "value": "159vp"
    },
    {
      "name": "size_160",
      "value": "160vp"
    },
    {
      "name": "size_161",
      "value": "161vp"
    },
    {
      "name": "size_162",
      "value": "162vp"
    },
    {
      "name": "size_163",
      "value": "163vp"
    },
    {
      "name": "size_164",
      "value": "164vp"
    },
    {
      "name": "size_165",
      "value": "165vp"
    },
    {
      "name": "size_166",
      "value": "166vp"
    },
    {
      "name": "size_167",
      "value": "167vp"
    },
    {
      "name": "size_168",
      "value": "168vp"
    },
    {
      "name": "size_169",
      "value": "169vp"
    },
    {
      "name": "size_170",
      "value": "170vp"
    },
    {
      "name": "size_171",
      "value": "171vp"
    },
    {
      "name": "size_172",
      "value": "172vp"
    },
    {
      "name": "size_173",
      "value": "173vp"
    },
    {
      "name": "size_174",
      "value": "174vp"
    },
    {
      "name": "size_175",
      "value": "175vp"
    },
    {
      "name": "size_176",
      "value": "176vp"
    },
    {
      "name": "size_177",
      "value": "177vp"
    },
    {
      "name": "size_178",
      "value": "178vp"
    },
    {
      "name": "size_179",
      "value": "179vp"
    },
    {
      "name": "size_180",
      "value": "180vp"
    },
    {
      "name": "size_181",
      "value": "181vp"
    },
    {
      "name": "size_182",
      "value": "182vp"
    },
    {
      "name": "size_183",
      "value": "183vp"
    },
    {
      "name": "size_184",
      "value": "184vp"
    },
    {
      "name": "size_185",
      "value": "185vp"
    },
    {
      "name": "size_186",
      "value": "186vp"
    },
    {
      "name": "size_187",
      "value": "187vp"
    },
    {
      "name": "size_188",
      "value": "188vp"
    },
    {
      "name": "size_189",
      "value": "189vp"
    },
    {
      "name": "size_190",
      "value": "190vp"
    },
    {
      "name": "size_191",
      "value": "191vp"
    },
    {
      "name": "size_192",
      "value": "192vp"
    },
    {
      "name": "size_193",
      "value": "193vp"
    },
    {
      "name": "size_194",
      "value": "194vp"
    },
    {
      "name": "size_195",
      "value": "195vp"
    },
    {
      "name": "size_196",
      "value": "196vp"
    },
    {
      "name": "size_197",
      "value": "197vp"
    },
    {
      "name": "size_198",
      "value": "198vp"
    },
    {
      "name": "size_199",
      "value": "199vp"
    },
    {
      "name": "size_200",
      "value": "200vp"
    },
    {
      "name": "size_201",
      "value": "201vp"
    },
    {
      "name": "size_202",
      "value": "202vp"
    },
    {
      "name": "size_203",
      "value": "203vp"
    },
    {
      "name": "size_204",
      "value": "204vp"
    },
    {
      "name": "size_205",
      "value": "205vp"
    },
    {
      "name": "size_206",
      "value": "206vp"
    },
    {
      "name": "size_207",
      "value": "207vp"
    },
    {
      "name": "size_208",
      "value": "208vp"
    },
    {
      "name": "size_209",
      "value": "209vp"
    },
    {
      "name": "size_210",
      "value": "210vp"
    },
    {
      "name": "size_211",
      "value": "211vp"
    },
    {
      "name": "size_212",
      "value": "212vp"
    },
    {
      "name": "size_213",
      "value": "213vp"
    },
    {
      "name": "size_214",
      "value": "214vp"
    },
    {
      "name": "size_215",
      "value": "215vp"
    },
    {
      "name": "size_216",
      "value": "216vp"
    },
    {
      "name": "size_217",
      "value": "217vp"
    },
    {
      "name": "size_218",
      "value": "218vp"
    },
    {
      "name": "size_219",
      "value": "219vp"
    },
    {
      "name": "size_220",
      "value": "220vp"
    },
    {
      "name": "size_221",
      "value": "221vp"
    },
    {
      "name": "size_222",
      "value": "222vp"
    },
    {
      "name": "size_223",
      "value": "223vp"
    },
    {
      "name": "size_224",
      "value": "224vp"
    },
    {
      "name": "size_225",
      "value": "225vp"
    },
    {
      "name": "size_226",
      "value": "226vp"
    },
    {
      "name": "size_227",
      "value": "227vp"
    },
    {
      "name": "size_228",
      "value": "228vp"
    },
    {
      "name": "size_229",
      "value": "229vp"
    },
    {
      "name": "size_230",
      "value": "230vp"
    },
    {
      "name": "size_231",
      "value": "231vp"
    },
    {
      "name": "size_232",
      "value": "232vp"
    },
    {
      "name": "size_233",
      "value": "233vp"
    },
    {
      "name": "size_234",
      "value": "234vp"
    },
    {
      "name": "size_235",
      "value": "235vp"
    },
    {
      "name": "size_236",
      "value": "236vp"
    },
    {
      "name": "size_237",
      "value": "237vp"
    },
    {
      "name": "size_238",
      "value": "238vp"
    },
    {
      "name": "size_239",
      "value": "239vp"
    },
    {
      "name": "size_240",
      "value": "240vp"
    },
    {
      "name": "size_241",
      "value": "241vp"
    },
    {
      "name": "size_242",
      "value": "242vp"
    },
    {
      "name": "size_243",
      "value": "243vp"
    },
    {
      "name": "size_244",
      "value": "244vp"
    },
    {
      "name": "size_245",
      "value": "245vp"
    },
    {
      "name": "size_246",
      "value": "246vp"
    },
    {
      "name": "size_247",
      "value": "247vp"
    },
    {
      "name": "size_248",
      "value": "248vp"
    },
    {
      "name": "size_249",
      "value": "249vp"
    },
    {
      "name": "size_250",
      "value": "250vp"
    },
    {
      "name": "size_251",
      "value": "251vp"
    },
    {
      "name": "size_252",
      "value": "252vp"
    },
    {
      "name": "size_253",
      "value": "253vp"
    },
    {
      "name": "size_254",
      "value": "254vp"
    },
    {
      "name": "size_255",
      "value": "255vp"
    },
    {
      "name": "size_256",
      "value": "256vp"
    },
    {
      "name": "size_257",
      "value": "257vp"
    },
    {
      "name": "size_258",
      "value": "258vp"
    },
    {
      "name": "size_259",
      "value": "259vp"
    },
    {
      "name": "size_260",
      "value": "260vp"
    },
    {
      "name": "size_261",
      "value": "261vp"
    },
    {
      "name": "size_262",
      "value": "262vp"
    },
    {
      "name": "size_263",
      "value": "263vp"
    },
    {
      "name": "size_264",
      "value": "264vp"
    },
    {
      "name": "size_265",
      "value": "265vp"
    },
    {
      "name": "size_266",
      "value": "266vp"
    },
    {
      "name": "size_267",
      "value": "267vp"
    },
    {
      "name": "size_268",
      "value": "268vp"
    },
    {
      "name": "size_269",
      "value": "269vp"
    },
    {
      "name": "size_270",
      "value": "270vp"
    },
    {
      "name": "size_271",
      "value": "271vp"
    },
    {
      "name": "size_272",
      "value": "272vp"
    },
    {
      "name": "size_273",
      "value": "273vp"
    },
    {
      "name": "size_274",
      "value": "274vp"
    },
    {
      "name": "size_275",
      "value": "275vp"
    },
    {
      "name": "size_276",
      "value": "276vp"
    },
    {
      "name": "size_277",
      "value": "277vp"
    },
    {
      "name": "size_278",
      "value": "278vp"
    },
    {
      "name": "size_279",
      "value": "279vp"
    },
    {
      "name": "size_280",
      "value": "280vp"
    },
    {
      "name": "size_281",
      "value": "281vp"
    },
    {
      "name": "size_282",
      "value": "282vp"
    },
    {
      "name": "size_283",
      "value": "283vp"
    },
    {
      "name": "size_284",
      "value": "284vp"
    },
    {
      "name": "size_285",
      "value": "285vp"
    },
    {
      "name": "size_286",
      "value": "286vp"
    },
    {
      "name": "size_287",
      "value": "287vp"
    },
    {
      "name": "size_288",
      "value": "288vp"
    },
    {
      "name": "size_289",
      "value": "289vp"
    },
    {
      "name": "size_290",
      "value": "290vp"
    },
    {
      "name": "size_291",
      "value": "291vp"
    },
    {
      "name": "size_292",
      "value": "292vp"
    },
    {
      "name": "size_293",
      "value": "293vp"
    },
    {
      "name": "size_294",
      "value": "294vp"
    },
    {
      "name": "size_295",
      "value": "295vp"
    },
    {
      "name": "size_296",
      "value": "296vp"
    },
    {
      "name": "size_297",
      "value": "297vp"
    },
    {
      "name": "size_298",
      "value": "298vp"
    },
    {
      "name": "size_299",
      "value": "299vp"
    },
    {
      "name": "size_300",
      "value": "300vp"
    },
    {
      "name": "size_text_1",
      "value": "1fp"
    },
    {
      "name": "size_text_2",
      "value": "2fp"
    },
    {
      "name": "size_text_3",
      "value": "3fp"
    },
    {
      "name": "size_text_4",
      "value": "4fp"
    },
    {
      "name": "size_text_5",
      "value": "5fp"
    },
    {
      "name": "size_text_6",
      "value": "6fp"
    },
    {
      "name": "size_text_7",
      "value": "7fp"
    },
    {
      "name": "size_text_8",
      "value": "8fp"
    },
    {
      "name": "size_text_9",
      "value": "9fp"
    },
    {
      "name": "size_text_10",
      "value": "10fp"
    },
    {
      "name": "size_text_11",
      "value": "11fp"
    },
    {
      "name": "size_text_12",
      "value": "12fp"
    },
    {
      "name": "size_text_13",
      "value": "13fp"
    },
    {
      "name": "size_text_14",
      "value": "14fp"
    },
    {
      "name": "size_text_15",
      "value": "15fp"
    },
    {
      "name": "size_text_16",
      "value": "16fp"
    },
    {
      "name": "size_text_17",
      "value": "17fp"
    },
    {
      "name": "size_text_18",
      "value": "18fp"
    },
    {
      "name": "size_text_19",
      "value": "19fp"
    },
    {
      "name": "size_text_20",
      "value": "20fp"
    },
    {
      "name": "size_text_21",
      "value": "21fp"
    },
    {
      "name": "size_text_22",
      "value": "22fp"
    },
    {
      "name": "size_text_23",
      "value": "23fp"
    },
    {
      "name": "size_text_24",
      "value": "24fp"
    },
    {
      "name": "size_text_25",
      "value": "25fp"
    },
    {
      "name": "size_text_26",
      "value": "26fp"
    },
    {
      "name": "size_text_27",
      "value": "27fp"
    },
    {
      "name": "size_text_28",
      "value": "28fp"
    },
    {
      "name": "size_text_29",
      "value": "29fp"
    },
    {
      "name": "size_text_30",
      "value": "30fp"
    },
    {
      "name": "size_text_31",
      "value": "31fp"
    },
    {
      "name": "size_text_32",
      "value": "32fp"
    },
    {
      "name": "size_text_33",
      "value": "33fp"
    },
    {
      "name": "size_text_34",
      "value": "34fp"
    },
    {
      "name": "size_text_35",
      "value": "35fp"
    },
    {
      "name": "size_text_36",
      "value": "36fp"
    },
    {
      "name": "size_text_37",
      "value": "37fp"
    },
    {
      "name": "size_text_38",
      "value": "38fp"
    },
    {
      "name": "size_text_39",
      "value": "39fp"
    },
    {
      "name": "size_text_40",
      "value": "40fp"
    },
    {
      "name": "size_text_41",
      "value": "41fp"
    },
    {
      "name": "size_text_42",
      "value": "42fp"
    },
    {
      "name": "size_text_43",
      "value": "43fp"
    },
    {
      "name": "size_text_44",
      "value": "44fp"
    },
    {
      "name": "size_text_45",
      "value": "45fp"
    },
    {
      "name": "size_text_46",
      "value": "46fp"
    },
    {
      "name": "size_text_47",
      "value": "47fp"
    },
    {
      "name": "size_text_48",
      "value": "48fp"
    },
    {
      "name": "size_text_49",
      "value": "49fp"
    },
    {
      "name": "size_text_50",
      "value": "50fp"
    },
    {
      "name": "size_text_51",
      "value": "51fp"
    },
    {
      "name": "size_text_52",
      "value": "52fp"
    },
    {
      "name": "size_text_53",
      "value": "53fp"
    },
    {
      "name": "size_text_54",
      "value": "54fp"
    },
    {
      "name": "size_text_55",
      "value": "55fp"
    },
    {
      "name": "size_text_56",
      "value": "56fp"
    },
    {
      "name": "size_text_57",
      "value": "57fp"
    },
    {
      "name": "size_text_58",
      "value": "58fp"
    },
    {
      "name": "size_text_59",
      "value": "59fp"
    },
    {
      "name": "size_text_60",
      "value": "60fp"
    },
    {
      "name": "size_text_61",
      "value": "61fp"
    },
    {
      "name": "size_text_62",
      "value": "62fp"
    },
    {
      "name": "size_text_63",
      "value": "63fp"
    },
    {
      "name": "size_text_64",
      "value": "64fp"
    },
    {
      "name": "size_text_65",
      "value": "65fp"
    },
    {
      "name": "size_text_66",
      "value": "66fp"
    },
    {
      "name": "size_text_67",
      "value": "67fp"
    },
    {
      "name": "size_text_68",
      "value": "68fp"
    },
    {
      "name": "size_text_69",
      "value": "69fp"
    },
    {
      "name": "size_text_70",
      "value": "70fp"
    },
    {
      "name": "size_text_71",
      "value": "71fp"
    },
    {
      "name": "size_text_72",
      "value": "72fp"
    },
    {
      "name": "size_text_73",
      "value": "73fp"
    },
    {
      "name": "size_text_74",
      "value": "74fp"
    },
    {
      "name": "size_text_75",
      "value": "75fp"
    },
    {
      "name": "size_text_76",
      "value": "76fp"
    },
    {
      "name": "size_text_77",
      "value": "77fp"
    },
    {
      "name": "size_text_78",
      "value": "78fp"
    },
    {
      "name": "size_text_79",
      "value": "79fp"
    },
    {
      "name": "size_text_80",
      "value": "80fp"
    },
    {
      "name": "size_text_81",
      "value": "81fp"
    },
    {
      "name": "size_text_82",
      "value": "82fp"
    },
    {
      "name": "size_text_83",
      "value": "83fp"
    },
    {
      "name": "size_text_84",
      "value": "84fp"
    },
    {
      "name": "size_text_85",
      "value": "85fp"
    },
    {
      "name": "size_text_86",
      "value": "86fp"
    },
    {
      "name": "size_text_87",
      "value": "87fp"
    },
    {
      "name": "size_text_88",
      "value": "88fp"
    },
    {
      "name": "size_text_89",
      "value": "89fp"
    },
    {
      "name": "size_text_90",
      "value": "90fp"
    },
    {
      "name": "size_text_91",
      "value": "91fp"
    },
    {
      "name": "size_text_92",
      "value": "92fp"
    },
    {
      "name": "size_text_93",
      "value": "93fp"
    },
    {
      "name": "size_text_94",
      "value": "94fp"
    },
    {
      "name": "size_text_95",
      "value": "95fp"
    },
    {
      "name": "size_text_96",
      "value": "96fp"
    },
    {
      "name": "size_text_97",
      "value": "97fp"
    },
    {
      "name": "size_text_98",
      "value": "98fp"
    },
    {
      "name": "size_text_99",
      "value": "99fp"
    },
    {
      "name": "size_text_100",
      "value": "100fp"
    }
  ]
}
{
  "modelVersion": "5.0.4",
  "description": "Please describe the basic information.",
  "dependencies": {
  },
  "devDependencies": {
    "@ohos/hypium": "1.0.21",
    "@ohos/hamock": "1.0.0"
  }
}
{
  "meta": {
    "stableOrder": true
  },
  "lockfileVersion": 3,
  "ATTENTION": "THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.",
  "specifiers": {
    "@ohos/hamock@1.0.0": "@ohos/hamock@1.0.0",
    "@ohos/hypium@1.0.21": "@ohos/hypium@1.0.21"
  },
  "packages": {
    "@ohos/hamock@1.0.0": {
      "name": "@ohos/hamock",
      "version": "1.0.0",
      "integrity": "sha512-K6lDPYc6VkKe6ZBNQa9aoG+ZZMiwqfcR/7yAVFSUGIuOAhPvCJAo9+t1fZnpe0dBRBPxj2bxPPbKh69VuyAtDg==",
      "resolved": "https://ohpm.openharmony.cn/ohpm/@ohos/hamock/-/hamock-1.0.0.har",
      "registryType": "ohpm"
    },
    "@ohos/hypium@1.0.21": {
      "name": "@ohos/hypium",
      "version": "1.0.21",
      "integrity": "sha512-iyKGMXxE+9PpCkqEwu0VykN/7hNpb+QOeIuHwkmZnxOpI+dFZt6yhPB7k89EgV1MiSK/ieV/hMjr5Z2mWwRfMQ==",
      "resolved": "https://ohpm.openharmony.cn/ohpm/@ohos/hypium/-/hypium-1.0.21.har",
      "registryType": "ohpm"
    }
  }
}
{
  "string": [
    {
      "name": "app_name",
      "value": "TbsChargeHarmonyOs"
    }
  ]
}
export class UserInfoData {
  id?: number
  username?: string
  nickname?: string
  balance?: number
  avatarUrl?: string
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
export class CommonDataSource<T> implements IDataSource {
  private listeners: DataChangeListener[] = [];
  protected items: T[] = []
  public totalCount(): number {
    return this.items.length
  }
  public getData(index: number): T | void {
    return this.items[index]
  };
  public getList(): T[] {
    return this.items
  }
  public clearData() {
    this.items = [];
    this.notifyDataReload()
  }
  public resetData(data: T | T[]) {
    this.items = [];
    if (Array.isArray(data)) {
      this.items.push(...data);
    } else {
      this.items.push(data);
    }
    this.notifyDataReload()
  }
  public setDataArray(data: T[]) {
    this.items = data
    this.notifyDataReload()
  }
  // 向列表追加数据
  public pushData(data: T | T[]): void {
    let fromIndex = this.items.length
    if (Array.isArray(data)) {
      this.items.push(...data)
    } else {
      this.items.push(data)
    }
    this.notifyDatasetAdd(fromIndex, this.items.length - fromIndex)
  }
  public changeItem(index: number) {
    this.notifyDataChange(index)
  }
  public deleteData(index: number): void {
    this.items.splice(index, 1);
    this.notifyDataDelete(index);
  }
  registerDataChangeListener(listener: DataChangeListener): void {
    if (this.listeners.indexOf(listener) < 0) {
      this.listeners.push(listener);
    }
  }
  unregisterDataChangeListener(listener: DataChangeListener): void {
    const pos = this.listeners.indexOf(listener);
    if (pos >= 0) {
      this.listeners.splice(pos, 1);
    }
  }
  notifyDataReload(): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.RELOAD }]);
    });
  }
  notifyDatasetAdd(insertIndex: number, addCount: number): void {
    this.listeners.forEach(listener => {
      listener.onDatasetChange([{ type: DataOperationType.ADD, index: insertIndex, count: addCount }]);
    })
  }
  notifyDataChange(changeIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.CHANGE, index: changeIndex }]);
    });
  }
  notifyDataDelete(deleteIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.DELETE, index: deleteIndex }]);
    });
  }
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
# This file is automatically generated by DevEco Studio.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
#
# This file should *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# For customization when using a Version Control System, please read the header note.
import { appTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: appTasks,  
    plugins:[]         
}
{
  "modelVersion": "5.0.4",
  "dependencies": {
  },
  "execution": {
    // "analyze": "normal",                     /* Define the build analyze mode. Value: [ "normal" | "advanced" | false ]. Default: "normal" */
    // "daemon": true,                          /* Enable daemon compilation. Value: [ true | false ]. Default: true */
    // "incremental": true,                     /* Enable incremental compilation. Value: [ true | false ]. Default: true */
    // "parallel": true,                        /* Enable parallel compilation. Value: [ true | false ]. Default: true */
    // "typeCheck": false,                      /* Enable typeCheck. Value: [ true | false ]. Default: false */
  },
  "logging": {
    // "level": "info"                          /* Define the log level. Value: [ "debug" | "info" | "warn" | "error" ]. Default: "info" */
  },
  "debugging": {
    // "stacktrace": false                      /* Disable stacktrace compilation. Value: [ true | false ]. Default: false */
  },
  "nodeOptions": {
    // "maxOldSpaceSize": 8192                  /* Enable nodeOptions maxOldSpaceSize compilation. Unit M. Used for the daemon process. Default: 8192*/
    // "exposeGC": true                         /* Enable to trigger garbage collection explicitly. Default: true*/
  }
}
export * from './src/main/ets/common'
export * from './src/main/ets/http'
export * from './src/main/ets/widgets'
export * from './src/main/ets/manager'
export * from './src/main/ets/utils'
export { CommonDataSource } from './src/main/ets/model/CommonDataSource'
export * from './src/main/ets/location'
{
  "name": "@tbs/common",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {}
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    },
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
import { hapTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: hapTasks,  
    plugins:[]         
}
{
  "color": [
    {
      "name": "color_0aa671",
      "value": "#0aa671"
    },
    {
      "name": "start_window_background",
      "value": "#FFFFFF"
    },
    {
      "name": "color_0165b8",
      "value": "#0165b8"
    },
    {
      "name": "color_182431",
      "value": "#182431"
    },
    {
      "name": "color_efefef",
      "value": "#EFEFEF"
    },
    {
      "name": "color_f5f5f5",
      "value": "#F5F5F5"
    },
    {
      "name": "color_adadb3",
      "value": "#adadb3"
    },
    {
      "name": "color_fff",
      "value": "#fff"
    },
    {
      "name": "color_898e92",
      "value": "#898e92"
    },
    {
      "name": "color_0165B8",
      "value": "#0165B8"
    },
    {
      "name": "color_f0f2f4",
      "value": "#f0f2f4"
    },
    {
      "name": "color_80000000",
      "value": "#80000000"
    },
    {
      "name": "color_009688",
      "value": "#009688"
    },
    {
      "name": "color_d68751",
      "value": "#d68751"
    },
    {
      "name": "color_F44336",
      "value": "#F44336"
    },
    {
      "name": "color_666",
      "value": "#666"
    },
    {
      "name": "color_999",
      "value": "#999"
    }
  ]
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
{
  "float": [
    {
      "name": "size_1",
      "value": "1vp"
    },
    {
      "name": "size_2",
      "value": "2vp"
    },
    {
      "name": "size_3",
      "value": "3vp"
    },
    {
      "name": "size_4",
      "value": "4vp"
    },
    {
      "name": "size_5",
      "value": "5vp"
    },
    {
      "name": "size_6",
      "value": "6vp"
    },
    {
      "name": "size_7",
      "value": "7vp"
    },
    {
      "name": "size_8",
      "value": "8vp"
    },
    {
      "name": "size_9",
      "value": "9vp"
    },
    {
      "name": "size_10",
      "value": "10vp"
    },
    {
      "name": "size_11",
      "value": "11vp"
    },
    {
      "name": "size_12",
      "value": "12vp"
    },
    {
      "name": "size_13",
      "value": "13vp"
    },
    {
      "name": "size_14",
      "value": "14vp"
    },
    {
      "name": "size_15",
      "value": "15vp"
    },
    {
      "name": "size_16",
      "value": "16vp"
    },
    {
      "name": "size_17",
      "value": "17vp"
    },
    {
      "name": "size_18",
      "value": "18vp"
    },
    {
      "name": "size_19",
      "value": "19vp"
    },
    {
      "name": "size_20",
      "value": "20vp"
    },
    {
      "name": "size_21",
      "value": "21vp"
    },
    {
      "name": "size_22",
      "value": "22vp"
    },
    {
      "name": "size_23",
      "value": "23vp"
    },
    {
      "name": "size_24",
      "value": "24vp"
    },
    {
      "name": "size_25",
      "value": "25vp"
    },
    {
      "name": "size_26",
      "value": "26vp"
    },
    {
      "name": "size_27",
      "value": "27vp"
    },
    {
      "name": "size_28",
      "value": "28vp"
    },
    {
      "name": "size_29",
      "value": "29vp"
    },
    {
      "name": "size_30",
      "value": "30vp"
    },
    {
      "name": "size_31",
      "value": "31vp"
    },
    {
      "name": "size_32",
      "value": "32vp"
    },
    {
      "name": "size_33",
      "value": "33vp"
    },
    {
      "name": "size_34",
      "value": "34vp"
    },
    {
      "name": "size_35",
      "value": "35vp"
    },
    {
      "name": "size_36",
      "value": "36vp"
    },
    {
      "name": "size_37",
      "value": "37vp"
    },
    {
      "name": "size_38",
      "value": "38vp"
    },
    {
      "name": "size_39",
      "value": "39vp"
    },
    {
      "name": "size_40",
      "value": "40vp"
    },
    {
      "name": "size_41",
      "value": "41vp"
    },
    {
      "name": "size_42",
      "value": "42vp"
    },
    {
      "name": "size_43",
      "value": "43vp"
    },
    {
      "name": "size_44",
      "value": "44vp"
    },
    {
      "name": "size_45",
      "value": "45vp"
    },
    {
      "name": "size_46",
      "value": "46vp"
    },
    {
      "name": "size_47",
      "value": "47vp"
    },
    {
      "name": "size_48",
      "value": "48vp"
    },
    {
      "name": "size_49",
      "value": "49vp"
    },
    {
      "name": "size_50",
      "value": "50vp"
    },
    {
      "name": "size_51",
      "value": "51vp"
    },
    {
      "name": "size_52",
      "value": "52vp"
    },
    {
      "name": "size_53",
      "value": "53vp"
    },
    {
      "name": "size_54",
      "value": "54vp"
    },
    {
      "name": "size_55",
      "value": "55vp"
    },
    {
      "name": "size_56",
      "value": "56vp"
    },
    {
      "name": "size_57",
      "value": "57vp"
    },
    {
      "name": "size_58",
      "value": "58vp"
    },
    {
      "name": "size_59",
      "value": "59vp"
    },
    {
      "name": "size_60",
      "value": "60vp"
    },
    {
      "name": "size_61",
      "value": "61vp"
    },
    {
      "name": "size_62",
      "value": "62vp"
    },
    {
      "name": "size_63",
      "value": "63vp"
    },
    {
      "name": "size_64",
      "value": "64vp"
    },
    {
      "name": "size_65",
      "value": "65vp"
    },
    {
      "name": "size_66",
      "value": "66vp"
    },
    {
      "name": "size_67",
      "value": "67vp"
    },
    {
      "name": "size_68",
      "value": "68vp"
    },
    {
      "name": "size_69",
      "value": "69vp"
    },
    {
      "name": "size_70",
      "value": "70vp"
    },
    {
      "name": "size_71",
      "value": "71vp"
    },
    {
      "name": "size_72",
      "value": "72vp"
    },
    {
      "name": "size_73",
      "value": "73vp"
    },
    {
      "name": "size_74",
      "value": "74vp"
    },
    {
      "name": "size_75",
      "value": "75vp"
    },
    {
      "name": "size_76",
      "value": "76vp"
    },
    {
      "name": "size_77",
      "value": "77vp"
    },
    {
      "name": "size_78",
      "value": "78vp"
    },
    {
      "name": "size_79",
      "value": "79vp"
    },
    {
      "name": "size_80",
      "value": "80vp"
    },
    {
      "name": "size_81",
      "value": "81vp"
    },
    {
      "name": "size_82",
      "value": "82vp"
    },
    {
      "name": "size_83",
      "value": "83vp"
    },
    {
      "name": "size_84",
      "value": "84vp"
    },
    {
      "name": "size_85",
      "value": "85vp"
    },
    {
      "name": "size_86",
      "value": "86vp"
    },
    {
      "name": "size_87",
      "value": "87vp"
    },
    {
      "name": "size_88",
      "value": "88vp"
    },
    {
      "name": "size_89",
      "value": "89vp"
    },
    {
      "name": "size_90",
      "value": "90vp"
    },
    {
      "name": "size_91",
      "value": "91vp"
    },
    {
      "name": "size_92",
      "value": "92vp"
    },
    {
      "name": "size_93",
      "value": "93vp"
    },
    {
      "name": "size_94",
      "value": "94vp"
    },
    {
      "name": "size_95",
      "value": "95vp"
    },
    {
      "name": "size_96",
      "value": "96vp"
    },
    {
      "name": "size_97",
      "value": "97vp"
    },
    {
      "name": "size_98",
      "value": "98vp"
    },
    {
      "name": "size_99",
      "value": "99vp"
    },
    {
      "name": "size_100",
      "value": "100vp"
    },
    {
      "name": "size_101",
      "value": "101vp"
    },
    {
      "name": "size_102",
      "value": "102vp"
    },
    {
      "name": "size_103",
      "value": "103vp"
    },
    {
      "name": "size_104",
      "value": "104vp"
    },
    {
      "name": "size_105",
      "value": "105vp"
    },
    {
      "name": "size_106",
      "value": "106vp"
    },
    {
      "name": "size_107",
      "value": "107vp"
    },
    {
      "name": "size_108",
      "value": "108vp"
    },
    {
      "name": "size_109",
      "value": "109vp"
    },
    {
      "name": "size_110",
      "value": "110vp"
    },
    {
      "name": "size_111",
      "value": "111vp"
    },
    {
      "name": "size_112",
      "value": "112vp"
    },
    {
      "name": "size_113",
      "value": "113vp"
    },
    {
      "name": "size_114",
      "value": "114vp"
    },
    {
      "name": "size_115",
      "value": "115vp"
    },
    {
      "name": "size_116",
      "value": "116vp"
    },
    {
      "name": "size_117",
      "value": "117vp"
    },
    {
      "name": "size_118",
      "value": "118vp"
    },
    {
      "name": "size_119",
      "value": "119vp"
    },
    {
      "name": "size_120",
      "value": "120vp"
    },
    {
      "name": "size_121",
      "value": "121vp"
    },
    {
      "name": "size_122",
      "value": "122vp"
    },
    {
      "name": "size_123",
      "value": "123vp"
    },
    {
      "name": "size_124",
      "value": "124vp"
    },
    {
      "name": "size_125",
      "value": "125vp"
    },
    {
      "name": "size_126",
      "value": "126vp"
    },
    {
      "name": "size_127",
      "value": "127vp"
    },
    {
      "name": "size_128",
      "value": "128vp"
    },
    {
      "name": "size_129",
      "value": "129vp"
    },
    {
      "name": "size_130",
      "value": "130vp"
    },
    {
      "name": "size_131",
      "value": "131vp"
    },
    {
      "name": "size_132",
      "value": "132vp"
    },
    {
      "name": "size_133",
      "value": "133vp"
    },
    {
      "name": "size_134",
      "value": "134vp"
    },
    {
      "name": "size_135",
      "value": "135vp"
    },
    {
      "name": "size_136",
      "value": "136vp"
    },
    {
      "name": "size_137",
      "value": "137vp"
    },
    {
      "name": "size_138",
      "value": "138vp"
    },
    {
      "name": "size_139",
      "value": "139vp"
    },
    {
      "name": "size_140",
      "value": "140vp"
    },
    {
      "name": "size_141",
      "value": "141vp"
    },
    {
      "name": "size_142",
      "value": "142vp"
    },
    {
      "name": "size_143",
      "value": "143vp"
    },
    {
      "name": "size_144",
      "value": "144vp"
    },
    {
      "name": "size_145",
      "value": "145vp"
    },
    {
      "name": "size_146",
      "value": "146vp"
    },
    {
      "name": "size_147",
      "value": "147vp"
    },
    {
      "name": "size_148",
      "value": "148vp"
    },
    {
      "name": "size_149",
      "value": "149vp"
    },
    {
      "name": "size_150",
      "value": "150vp"
    },
    {
      "name": "size_151",
      "value": "151vp"
    },
    {
      "name": "size_152",
      "value": "152vp"
    },
    {
      "name": "size_153",
      "value": "153vp"
    },
    {
      "name": "size_154",
      "value": "154vp"
    },
    {
      "name": "size_155",
      "value": "155vp"
    },
    {
      "name": "size_156",
      "value": "156vp"
    },
    {
      "name": "size_157",
      "value": "157vp"
    },
    {
      "name": "size_158",
      "value": "158vp"
    },
    {
      "name": "size_159",
      "value": "159vp"
    },
    {
      "name": "size_160",
      "value": "160vp"
    },
    {
      "name": "size_161",
      "value": "161vp"
    },
    {
      "name": "size_162",
      "value": "162vp"
    },
    {
      "name": "size_163",
      "value": "163vp"
    },
    {
      "name": "size_164",
      "value": "164vp"
    },
    {
      "name": "size_165",
      "value": "165vp"
    },
    {
      "name": "size_166",
      "value": "166vp"
    },
    {
      "name": "size_167",
      "value": "167vp"
    },
    {
      "name": "size_168",
      "value": "168vp"
    },
    {
      "name": "size_169",
      "value": "169vp"
    },
    {
      "name": "size_170",
      "value": "170vp"
    },
    {
      "name": "size_171",
      "value": "171vp"
    },
    {
      "name": "size_172",
      "value": "172vp"
    },
    {
      "name": "size_173",
      "value": "173vp"
    },
    {
      "name": "size_174",
      "value": "174vp"
    },
    {
      "name": "size_175",
      "value": "175vp"
    },
    {
      "name": "size_176",
      "value": "176vp"
    },
    {
      "name": "size_177",
      "value": "177vp"
    },
    {
      "name": "size_178",
      "value": "178vp"
    },
    {
      "name": "size_179",
      "value": "179vp"
    },
    {
      "name": "size_180",
      "value": "180vp"
    },
    {
      "name": "size_181",
      "value": "181vp"
    },
    {
      "name": "size_182",
      "value": "182vp"
    },
    {
      "name": "size_183",
      "value": "183vp"
    },
    {
      "name": "size_184",
      "value": "184vp"
    },
    {
      "name": "size_185",
      "value": "185vp"
    },
    {
      "name": "size_186",
      "value": "186vp"
    },
    {
      "name": "size_187",
      "value": "187vp"
    },
    {
      "name": "size_188",
      "value": "188vp"
    },
    {
      "name": "size_189",
      "value": "189vp"
    },
    {
      "name": "size_190",
      "value": "190vp"
    },
    {
      "name": "size_191",
      "value": "191vp"
    },
    {
      "name": "size_192",
      "value": "192vp"
    },
    {
      "name": "size_193",
      "value": "193vp"
    },
    {
      "name": "size_194",
      "value": "194vp"
    },
    {
      "name": "size_195",
      "value": "195vp"
    },
    {
      "name": "size_196",
      "value": "196vp"
    },
    {
      "name": "size_197",
      "value": "197vp"
    },
    {
      "name": "size_198",
      "value": "198vp"
    },
    {
      "name": "size_199",
      "value": "199vp"
    },
    {
      "name": "size_200",
      "value": "200vp"
    },
    {
      "name": "size_201",
      "value": "201vp"
    },
    {
      "name": "size_202",
      "value": "202vp"
    },
    {
      "name": "size_203",
      "value": "203vp"
    },
    {
      "name": "size_204",
      "value": "204vp"
    },
    {
      "name": "size_205",
      "value": "205vp"
    },
    {
      "name": "size_206",
      "value": "206vp"
    },
    {
      "name": "size_207",
      "value": "207vp"
    },
    {
      "name": "size_208",
      "value": "208vp"
    },
    {
      "name": "size_209",
      "value": "209vp"
    },
    {
      "name": "size_210",
      "value": "210vp"
    },
    {
      "name": "size_211",
      "value": "211vp"
    },
    {
      "name": "size_212",
      "value": "212vp"
    },
    {
      "name": "size_213",
      "value": "213vp"
    },
    {
      "name": "size_214",
      "value": "214vp"
    },
    {
      "name": "size_215",
      "value": "215vp"
    },
    {
      "name": "size_216",
      "value": "216vp"
    },
    {
      "name": "size_217",
      "value": "217vp"
    },
    {
      "name": "size_218",
      "value": "218vp"
    },
    {
      "name": "size_219",
      "value": "219vp"
    },
    {
      "name": "size_220",
      "value": "220vp"
    },
    {
      "name": "size_221",
      "value": "221vp"
    },
    {
      "name": "size_222",
      "value": "222vp"
    },
    {
      "name": "size_223",
      "value": "223vp"
    },
    {
      "name": "size_224",
      "value": "224vp"
    },
    {
      "name": "size_225",
      "value": "225vp"
    },
    {
      "name": "size_226",
      "value": "226vp"
    },
    {
      "name": "size_227",
      "value": "227vp"
    },
    {
      "name": "size_228",
      "value": "228vp"
    },
    {
      "name": "size_229",
      "value": "229vp"
    },
    {
      "name": "size_230",
      "value": "230vp"
    },
    {
      "name": "size_231",
      "value": "231vp"
    },
    {
      "name": "size_232",
      "value": "232vp"
    },
    {
      "name": "size_233",
      "value": "233vp"
    },
    {
      "name": "size_234",
      "value": "234vp"
    },
    {
      "name": "size_235",
      "value": "235vp"
    },
    {
      "name": "size_236",
      "value": "236vp"
    },
    {
      "name": "size_237",
      "value": "237vp"
    },
    {
      "name": "size_238",
      "value": "238vp"
    },
    {
      "name": "size_239",
      "value": "239vp"
    },
    {
      "name": "size_240",
      "value": "240vp"
    },
    {
      "name": "size_241",
      "value": "241vp"
    },
    {
      "name": "size_242",
      "value": "242vp"
    },
    {
      "name": "size_243",
      "value": "243vp"
    },
    {
      "name": "size_244",
      "value": "244vp"
    },
    {
      "name": "size_245",
      "value": "245vp"
    },
    {
      "name": "size_246",
      "value": "246vp"
    },
    {
      "name": "size_247",
      "value": "247vp"
    },
    {
      "name": "size_248",
      "value": "248vp"
    },
    {
      "name": "size_249",
      "value": "249vp"
    },
    {
      "name": "size_250",
      "value": "250vp"
    },
    {
      "name": "size_251",
      "value": "251vp"
    },
    {
      "name": "size_252",
      "value": "252vp"
    },
    {
      "name": "size_253",
      "value": "253vp"
    },
    {
      "name": "size_254",
      "value": "254vp"
    },
    {
      "name": "size_255",
      "value": "255vp"
    },
    {
      "name": "size_256",
      "value": "256vp"
    },
    {
      "name": "size_257",
      "value": "257vp"
    },
    {
      "name": "size_258",
      "value": "258vp"
    },
    {
      "name": "size_259",
      "value": "259vp"
    },
    {
      "name": "size_260",
      "value": "260vp"
    },
    {
      "name": "size_261",
      "value": "261vp"
    },
    {
      "name": "size_262",
      "value": "262vp"
    },
    {
      "name": "size_263",
      "value": "263vp"
    },
    {
      "name": "size_264",
      "value": "264vp"
    },
    {
      "name": "size_265",
      "value": "265vp"
    },
    {
      "name": "size_266",
      "value": "266vp"
    },
    {
      "name": "size_267",
      "value": "267vp"
    },
    {
      "name": "size_268",
      "value": "268vp"
    },
    {
      "name": "size_269",
      "value": "269vp"
    },
    {
      "name": "size_270",
      "value": "270vp"
    },
    {
      "name": "size_271",
      "value": "271vp"
    },
    {
      "name": "size_272",
      "value": "272vp"
    },
    {
      "name": "size_273",
      "value": "273vp"
    },
    {
      "name": "size_274",
      "value": "274vp"
    },
    {
      "name": "size_275",
      "value": "275vp"
    },
    {
      "name": "size_276",
      "value": "276vp"
    },
    {
      "name": "size_277",
      "value": "277vp"
    },
    {
      "name": "size_278",
      "value": "278vp"
    },
    {
      "name": "size_279",
      "value": "279vp"
    },
    {
      "name": "size_280",
      "value": "280vp"
    },
    {
      "name": "size_281",
      "value": "281vp"
    },
    {
      "name": "size_282",
      "value": "282vp"
    },
    {
      "name": "size_283",
      "value": "283vp"
    },
    {
      "name": "size_284",
      "value": "284vp"
    },
    {
      "name": "size_285",
      "value": "285vp"
    },
    {
      "name": "size_286",
      "value": "286vp"
    },
    {
      "name": "size_287",
      "value": "287vp"
    },
    {
      "name": "size_288",
      "value": "288vp"
    },
    {
      "name": "size_289",
      "value": "289vp"
    },
    {
      "name": "size_290",
      "value": "290vp"
    },
    {
      "name": "size_291",
      "value": "291vp"
    },
    {
      "name": "size_292",
      "value": "292vp"
    },
    {
      "name": "size_293",
      "value": "293vp"
    },
    {
      "name": "size_294",
      "value": "294vp"
    },
    {
      "name": "size_295",
      "value": "295vp"
    },
    {
      "name": "size_296",
      "value": "296vp"
    },
    {
      "name": "size_297",
      "value": "297vp"
    },
    {
      "name": "size_298",
      "value": "298vp"
    },
    {
      "name": "size_299",
      "value": "299vp"
    },
    {
      "name": "size_300",
      "value": "300vp"
    },
    {
      "name": "size_text_1",
      "value": "1fp"
    },
    {
      "name": "size_text_2",
      "value": "2fp"
    },
    {
      "name": "size_text_3",
      "value": "3fp"
    },
    {
      "name": "size_text_4",
      "value": "4fp"
    },
    {
      "name": "size_text_5",
      "value": "5fp"
    },
    {
      "name": "size_text_6",
      "value": "6fp"
    },
    {
      "name": "size_text_7",
      "value": "7fp"
    },
    {
      "name": "size_text_8",
      "value": "8fp"
    },
    {
      "name": "size_text_9",
      "value": "9fp"
    },
    {
      "name": "size_text_10",
      "value": "10fp"
    },
    {
      "name": "size_text_11",
      "value": "11fp"
    },
    {
      "name": "size_text_12",
      "value": "12fp"
    },
    {
      "name": "size_text_13",
      "value": "13fp"
    },
    {
      "name": "size_text_14",
      "value": "14fp"
    },
    {
      "name": "size_text_15",
      "value": "15fp"
    },
    {
      "name": "size_text_16",
      "value": "16fp"
    },
    {
      "name": "size_text_17",
      "value": "17fp"
    },
    {
      "name": "size_text_18",
      "value": "18fp"
    },
    {
      "name": "size_text_19",
      "value": "19fp"
    },
    {
      "name": "size_text_20",
      "value": "20fp"
    },
    {
      "name": "size_text_21",
      "value": "21fp"
    },
    {
      "name": "size_text_22",
      "value": "22fp"
    },
    {
      "name": "size_text_23",
      "value": "23fp"
    },
    {
      "name": "size_text_24",
      "value": "24fp"
    },
    {
      "name": "size_text_25",
      "value": "25fp"
    },
    {
      "name": "size_text_26",
      "value": "26fp"
    },
    {
      "name": "size_text_27",
      "value": "27fp"
    },
    {
      "name": "size_text_28",
      "value": "28fp"
    },
    {
      "name": "size_text_29",
      "value": "29fp"
    },
    {
      "name": "size_text_30",
      "value": "30fp"
    },
    {
      "name": "size_text_31",
      "value": "31fp"
    },
    {
      "name": "size_text_32",
      "value": "32fp"
    },
    {
      "name": "size_text_33",
      "value": "33fp"
    },
    {
      "name": "size_text_34",
      "value": "34fp"
    },
    {
      "name": "size_text_35",
      "value": "35fp"
    },
    {
      "name": "size_text_36",
      "value": "36fp"
    },
    {
      "name": "size_text_37",
      "value": "37fp"
    },
    {
      "name": "size_text_38",
      "value": "38fp"
    },
    {
      "name": "size_text_39",
      "value": "39fp"
    },
    {
      "name": "size_text_40",
      "value": "40fp"
    },
    {
      "name": "size_text_41",
      "value": "41fp"
    },
    {
      "name": "size_text_42",
      "value": "42fp"
    },
    {
      "name": "size_text_43",
      "value": "43fp"
    },
    {
      "name": "size_text_44",
      "value": "44fp"
    },
    {
      "name": "size_text_45",
      "value": "45fp"
    },
    {
      "name": "size_text_46",
      "value": "46fp"
    },
    {
      "name": "size_text_47",
      "value": "47fp"
    },
    {
      "name": "size_text_48",
      "value": "48fp"
    },
    {
      "name": "size_text_49",
      "value": "49fp"
    },
    {
      "name": "size_text_50",
      "value": "50fp"
    },
    {
      "name": "size_text_51",
      "value": "51fp"
    },
    {
      "name": "size_text_52",
      "value": "52fp"
    },
    {
      "name": "size_text_53",
      "value": "53fp"
    },
    {
      "name": "size_text_54",
      "value": "54fp"
    },
    {
      "name": "size_text_55",
      "value": "55fp"
    },
    {
      "name": "size_text_56",
      "value": "56fp"
    },
    {
      "name": "size_text_57",
      "value": "57fp"
    },
    {
      "name": "size_text_58",
      "value": "58fp"
    },
    {
      "name": "size_text_59",
      "value": "59fp"
    },
    {
      "name": "size_text_60",
      "value": "60fp"
    },
    {
      "name": "size_text_61",
      "value": "61fp"
    },
    {
      "name": "size_text_62",
      "value": "62fp"
    },
    {
      "name": "size_text_63",
      "value": "63fp"
    },
    {
      "name": "size_text_64",
      "value": "64fp"
    },
    {
      "name": "size_text_65",
      "value": "65fp"
    },
    {
      "name": "size_text_66",
      "value": "66fp"
    },
    {
      "name": "size_text_67",
      "value": "67fp"
    },
    {
      "name": "size_text_68",
      "value": "68fp"
    },
    {
      "name": "size_text_69",
      "value": "69fp"
    },
    {
      "name": "size_text_70",
      "value": "70fp"
    },
    {
      "name": "size_text_71",
      "value": "71fp"
    },
    {
      "name": "size_text_72",
      "value": "72fp"
    },
    {
      "name": "size_text_73",
      "value": "73fp"
    },
    {
      "name": "size_text_74",
      "value": "74fp"
    },
    {
      "name": "size_text_75",
      "value": "75fp"
    },
    {
      "name": "size_text_76",
      "value": "76fp"
    },
    {
      "name": "size_text_77",
      "value": "77fp"
    },
    {
      "name": "size_text_78",
      "value": "78fp"
    },
    {
      "name": "size_text_79",
      "value": "79fp"
    },
    {
      "name": "size_text_80",
      "value": "80fp"
    },
    {
      "name": "size_text_81",
      "value": "81fp"
    },
    {
      "name": "size_text_82",
      "value": "82fp"
    },
    {
      "name": "size_text_83",
      "value": "83fp"
    },
    {
      "name": "size_text_84",
      "value": "84fp"
    },
    {
      "name": "size_text_85",
      "value": "85fp"
    },
    {
      "name": "size_text_86",
      "value": "86fp"
    },
    {
      "name": "size_text_87",
      "value": "87fp"
    },
    {
      "name": "size_text_88",
      "value": "88fp"
    },
    {
      "name": "size_text_89",
      "value": "89fp"
    },
    {
      "name": "size_text_90",
      "value": "90fp"
    },
    {
      "name": "size_text_91",
      "value": "91fp"
    },
    {
      "name": "size_text_92",
      "value": "92fp"
    },
    {
      "name": "size_text_93",
      "value": "93fp"
    },
    {
      "name": "size_text_94",
      "value": "94fp"
    },
    {
      "name": "size_text_95",
      "value": "95fp"
    },
    {
      "name": "size_text_96",
      "value": "96fp"
    },
    {
      "name": "size_text_97",
      "value": "97fp"
    },
    {
      "name": "size_text_98",
      "value": "98fp"
    },
    {
      "name": "size_text_99",
      "value": "99fp"
    },
    {
      "name": "size_text_100",
      "value": "100fp"
    }
  ]
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          }
        }
      }
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest",
    }
  ]
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "scan",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/scan",
		"installationFree": false
	}
}
export { harTasks } from '@ohos/hvigor-ohos-plugin';
export * from './ShowToast'
export * from './BottomPop'
# Hamock
## 简介
Hamock 是 OpenHarmony 上的模拟框架，提供预览场景的模拟功能。
## 下载安装
```bash
ohpm install @ohos/hamock
```
OpenHarmony ohpm 环境配置等更多内容，请参考[如何安装 OpenHarmony ohpm 包](https:
## 使用示例
Hamock 提供了 @MockSetup 用于修饰 Mock 方法，仅支持声明式范式的组件。当开发者预览该组件时，预览运行时将在组件初始化时执行被 @MockSetup 修饰的方法。因此，开发者可以在这个被修饰的方法内重定义组件的方法或重赋值组件的属性，其将在预览时生效。
> 说明：
> @MockSetup 修饰的方法仅在预览场景会自动触发，并先于组件的 aboutToAppear 执行。
### UI组件的方法
在 ArkTS 页面代码中引入 Hamock。在目标组件中定义一个方法，并用 @MockSetup 修饰该方法。在这个方法中，使用 MockKit 模拟目标方法。
```typescript
import { MockKit, when, MockSetup } from '@ohos/hamock';
@Entry
@Component
struct Index {
  ...
  @MockSetup
  randomName() {
    let mocker: MockKit = new MockKit();
    let mockfunc: Object = mocker.mockFunc(this, this.method1);
    // mock 指定的方法在指定入参的返回值
    when(mockfunc)('test').afterReturn(1);
  }
  ...
  // 业务场景调用方法
  const result: number = this.method1('test'); // in previewer, result = 1
}
```
### UI组件的属性
在 ArkTS 页面代码中引入 Hamock。在目标组件中定义一个方法，并用 @MockSetup 修饰该方法。在这个方法中，对于需要 Mock 的属性，可以重新赋值。
```typescript
import { MockSetup } from '@ohos/hamock';
@Component
struct Person {
  @Prop species: string;
  ...
  // 在 @MockSetup 片段中，定义对象属性
  @MockSetup
  randomName() {
    this.species = 'primates';
  }
  ...
  // 业务场景调用属性（如果从初始化到调用期间，该属性无变化）
  const result: string = this.species; // in previewer, result = primates
}
```
## 约束与限制
在下述版本验证通过：
DevEco Studio: 4.1 (4.1.3.400), SDK: API11 (4.1.0.36) 
MockSetup 仅在 API11 支持。
## 贡献代码
使用过程中发现任何问题都可以提[Issue](https:
## 开源协议
本项目基于 [Apache License 2.0](https:
export { MockSetup, MockKit, when } from './src/main/mock/MockKit.js';
export { ArgumentMatchers } from './src/main/mock/ArgumentMatchers.js';
import { StyleConst } from "../common";
import { ScreenUtils, WindowModel,ComponentUtils } from "../utils";
@CustomDialog
@Component
export struct BottomPop {
  controller: CustomDialogController;
  title: ResourceStr = '';
  titlePadding: Padding = { top: $r('app.float.size_16'), bottom: $r('app.float.size_16') }
  titleFontSize: ResourceStr = $r('app.float.size_text_16')
  titleTextColor: ResourceColor = Color.Black
  titleBgColor: ResourceColor = Color.Transparent
  contentBgColor: ResourceColor = Color.Transparent
  bgColor?: ResourceColor = Color.White
  // 软键盘是否显示
  @State keyBoardVisible: boolean = false
  keyboardAvoidMode: KeyboardAvoidMode = KeyboardAvoidMode.DEFAULT
  minHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.3 // 弹窗最低高度
  maxHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.8 // 弹窗最大高度
  @State dialogMaxHeight: number = 0 // 通过 maxHeight 计算出来的内容的高度
  @Builder
  child() {
  };
  @BuilderParam childBuilderParam: () => void = this.child;
  aboutToAppear(): void {
    if (this.isKeyboardAvoidNone()) {
      this.getKeyBoardVisible()
    }
    this.getTitleHeight()
  }
  // 软键盘是否拉起
  getKeyBoardVisible() {
    WindowModel.getInstance().getKeyBoardVisible((visible) => {
      this.keyBoardVisible = visible
    })
  }
  // 弹窗是否在拉起软键盘时进行自动避让
  isKeyboardAvoidNone() {
    return this.keyboardAvoidMode === KeyboardAvoidMode.NONE // 弹窗不避让软键盘
  }
  getTitleHeight() {
    ComponentUtils.getComponentHeightSync('BottomPop_title', (componentHeight) => {
      const safeBottomHeight = ScreenUtils.getInstance().getSafeBottomHeight() // 底部安全区高度
      // 内容最大高度 = 屏幕80%高度 - title高度 - 底部安全区高度
      this.dialogMaxHeight = Number(this.maxHeight) - componentHeight - safeBottomHeight
    })
  }
  build() {
    Stack({ alignContent: Alignment.TopEnd }) {
      Column() {
        Text(this.title)
          .padding(this.titlePadding)
          .fontColor(this.titleTextColor)
          .fontSize(this.titleFontSize)
          .fontWeight(FontWeight.Medium)
          .textAlign(TextAlign.Center)
          .width(StyleConst.FULL_WIDTH)
          .height($r('app.float.size_50'))
          .backgroundColor(this.titleBgColor)
          .id('BottomPop_title')
          .borderRadius({
            topLeft: $r('app.float.size_16'),
            topRight: $r('app.float.size_16')
          })
        Column() {
          this.childBuilderParam()
        }
        .backgroundColor(this.contentBgColor)
        .constraintSize({
          maxHeight: this.dialogMaxHeight,
        })
      }
      .padding({
        bottom: ScreenUtils.getInstance().getSafeBottomHeight(), // 设置padding避开底部安全区
      })
      .width(StyleConst.FULL_WIDTH)
      .backgroundColor(this.bgColor)
      .borderRadius({
        topLeft: $r('app.float.size_16'),
        topRight: $r('app.float.size_16')
      })
      .constraintSize({
        maxHeight: this.maxHeight,
        minHeight: this.minHeight
      })
      Image($r("app.media.common_bottom_sheet_close"))
        .size({ width: $r('app.float.size_20'), height: $r('app.float.size_20') })
        .margin({ top: $r('app.float.size_16'), right: $r('app.float.size_16') })
        .responseRegion({
          x: '-25%',
          y: '-25%',
          width: '150%',
          height: '150%'
        })
        .onClick(() => {
          this.controller.close();
        })
    }
  }
}
export class ArgumentMatchers {
    static any;
    static anyString;
    static anyBoolean;
    static anyNumber;
    static anyObj;
    static anyFunction;
    static matchRegexs(Regex: RegExp): void
}
declare interface when {
    afterReturn(value: any): any
    afterReturnNothing(): undefined
    afterAction(action: any): any
    afterThrow(e_msg: string): string
    (argMatchers?: any): when;
}
export const when: when;
export interface VerificationMode {
    times(count: Number): void
    never(): void
    once(): void
    atLeast(count: Number): void
    atMost(count: Number): void
}
export class MockKit {
    constructor()
    mockFunc(obj: Object, func: Function): Function
    mockObject(obj: Object): Object
    verify(methodName: String, argsArray: Array<any>): VerificationMode
    ignoreMock(obj: Object, func: Function): void
    clear(obj: Object): void
    clearAll(): void
}
export declare function MockSetup(
    target: Object,
    propertyName: string | Symbol,
    descriptor: TypedPropertyDescriptor<() => void>
): void;
{
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
export { MockSetup, MockKit, when } from './src/main/mock/MockKit.js';
export { ArgumentMatchers } from './src/main/mock/ArgumentMatchers.js';
export { harTasks } from '@ohos/hvigor-ohos-plugin';
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "targets": [
    {
      "name": "default"
    }
  ]
}
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export { MockSetup, MockKit, when } from './src/main/mock/MockKit';
export { ArgumentMatchers } from './src/main/mock/ArgumentMatchers';
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
{
  name: '@ohos/hamock',
  version: '1.0.0',
  description: 'A mock framework for OpenHarmony application.',
  main: 'index.ets',
  author: 'huawei',
  license: 'Apache-2.0',
  dependencies: {},
  ohos: {
    org: 'ohos',
  },
  types: 'index.d.ts'
}
import { promptAction } from '@kit.ArkUI'
//轻提示工具类
export const toast = (hintContent: string | ResourceStr, alignment: Alignment = Alignment.Center): void => {
  promptAction.showToast({ message: hintContent, alignment: alignment })
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
export class UserInfoData {
  id?: number
  username?: string
  nickname?: string
  balance?: number
  avatarUrl?: string
}
export class CommonDataSource<T> implements IDataSource {
  private listeners: DataChangeListener[] = [];
  protected items: T[] = []
  public totalCount(): number {
    return this.items.length
  }
  public getData(index: number): T | void {
    return this.items[index]
  };
  public getList(): T[] {
    return this.items
  }
  public clearData() {
    this.items = [];
    this.notifyDataReload()
  }
  public resetData(data: T | T[]) {
    this.items = [];
    if (Array.isArray(data)) {
      this.items.push(...data);
    } else {
      this.items.push(data);
    }
    this.notifyDataReload()
  }
  public setDataArray(data: T[]) {
    this.items = data
    this.notifyDataReload()
  }
  // 向列表追加数据
  public pushData(data: T | T[]): void {
    let fromIndex = this.items.length
    if (Array.isArray(data)) {
      this.items.push(...data)
    } else {
      this.items.push(data)
    }
    this.notifyDatasetAdd(fromIndex, this.items.length - fromIndex)
  }
  public changeItem(index: number) {
    this.notifyDataChange(index)
  }
  public deleteData(index: number): void {
    this.items.splice(index, 1);
    this.notifyDataDelete(index);
  }
  registerDataChangeListener(listener: DataChangeListener): void {
    if (this.listeners.indexOf(listener) < 0) {
      this.listeners.push(listener);
    }
  }
  unregisterDataChangeListener(listener: DataChangeListener): void {
    const pos = this.listeners.indexOf(listener);
    if (pos >= 0) {
      this.listeners.splice(pos, 1);
    }
  }
  notifyDataReload(): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.RELOAD }]);
    });
  }
  notifyDatasetAdd(insertIndex: number, addCount: number): void {
    this.listeners.forEach(listener => {
      listener.onDatasetChange([{ type: DataOperationType.ADD, index: insertIndex, count: addCount }]);
    })
  }
  notifyDataChange(changeIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.CHANGE, index: changeIndex }]);
    });
  }
  notifyDataDelete(deleteIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.DELETE, index: deleteIndex }]);
    });
  }
}
## 1.0.0
- 修复once断言问题
## 1.0.0-rc
- 提供DevEco Studio预览器场景使能的MockSetup装饰器
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "common",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/common",
		"installationFree": false
	}
}
{
  "module": {
    "name": "entry_test",
    "type": "feature",
    "deviceTypes": [
      "phone",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
export class ResponseResult {
  code?: number
  message?: string
  data?: object
}
export { requestApiCall } from './httpUtils'
export * from './Apis'
export class Apis {
  //注册
  static readonly USER_REGISTER = "/saas-api/tenant/register"
  //获取token-登录
  static readonly USER_LOGIN = "/saas-api/user/login"
  //获取租户ID
  static readonly USER_TENANT = "/saas-api/tenant/selects"
  //获取用户信息
  static readonly USER_INFO = "/wx-api/me/info"
  //获取充电站
  static readonly CHARGE_STATION_LIST = "/wx-api/station/list"
  //获取充电桩
  static readonly CHARGE_PILE_LIST = "/wx-api/pile/list"
  //获取充电价格
  static readonly CHARGE_PRICE = "/wx-api/price/list"
  //开始充电
  static readonly CHARGE_START = "/wx-api/charge/start"
  //结束充电
  static readonly CHARGE_STOP = "/wx-api/charge/stop"
  //获取充电订单列表
  static readonly CHARGE_ORDER_LIST = "/wx-api/charge/list"
}
export * from './StyleConst'
export * from './TbsTitleBar'
export * from './BottomLoadingBuilder'
{
  "module": {
    "name": "entry",
    "type": "entry",
    "description": "$string:module_desc",
    "mainElement": "EntryAbility",
    "deviceTypes": [
      "phone",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false,
    "pages": "$profile:main_pages",
    "querySchemes": [
      "amapuri",  // 高德地图的 scheme
      "baidumap", // 百度地图的 scheme
      "maps"      // 华为地图的 scheme
    ],
    "requestPermissions": [
      {
        "name": "ohos.permission.INTERNET"
      },
      {
        "name": "ohos.permission.APPROXIMATELY_LOCATION",
        "reason": "$string:permission_approximately_location",
        "usedScene": {
          "abilities": [
            "EntryAbility"
          ],
          "when": "always"
        }
      },
      {
        "name": "ohos.permission.LOCATION",
        "reason": "$string:location_permission_reason",  // 必须符合格式要求
        "usedScene": {
          "abilities": ["EntryAbility"],
          "when": "always"
        }
      }
    ],
    "abilities": [
      {
        "name": "EntryAbility",
        "srcEntry": "./ets/entryability/EntryAbility.ets",
        "description": "$string:EntryAbility_desc",
        "icon": "$media:layered_image",
        "label": "$string:EntryAbility_label",
        "startWindowIcon": "$media:startIcon",
        "startWindowBackground": "$color:start_window_background",
        "exported": true,
        "skills": [
          {
            "entities": [
              "entity.system.home"
            ],
            "actions": [
              "action.system.home"
            ]
          }
        ]
      }
    ],
    "extensionAbilities": [
      {
        "name": "EntryBackupAbility",
        "srcEntry": "./ets/entrybackupability/EntryBackupAbility.ets",
        "type": "backup",
        "exported": false,
        "metadata": [
          {
            "name": "ohos.extension.backup",
            "resource": "$profile:backup_config"
          }
        ],
      }
    ]
  }
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
{
	"app": {
		"bundleName": "com.example.hamock",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 9,
		"targetAPIVersion": 9,
		"apiReleaseType": "Release"
	},
	"module": {
		"name": "hamock",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"tv",
			"wearable",
			"car"
		]
	}
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
import { ScreenUtils, StyleConst } from "../../../../Index"
import { router } from "@kit.ArkUI"
@Component
export struct TbsTitleBar {
  @Prop title: ResourceStr = ''
  @Prop showBackIcon: boolean = false
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight())
      RelativeContainer() {
        Text(this.title)
          .fontColor(Color.White)
          .fontSize($r('app.float.size_text_20'))
          .textAlign(TextAlign.Center)
          .maxLines(1)
          .id('text')
          .alignRules({
            center: { anchor: "__container__", align: VerticalAlign.Center },
            middle: { anchor: "__container__", align: HorizontalAlign.Center }
          })
        if (this.showBackIcon) {
          Image($r('app.media.back'))
            .width($r('app.float.size_45'))
            .id('image')
            .alignRules({
              left: { anchor: "__container__", align: HorizontalAlign.Start }
            })
            .onClick(() => {
              router.back()
            })
        }
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_45'))
    }
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
export class StyleConst {
  // 宽高
  static readonly FULL_WIDTH: string = '100%';
  static readonly FULL_HEIGHT: string = '100%';
  static readonly PERCENT_10 = '10%'
  static readonly PERCENT_15 = '15%'
  static readonly PERCENT_17 = '17%'
  static readonly PERCENT_20 = '20%'
  static readonly PERCENT_25 = '25%'
  static readonly PERCENT_30 = '30%'
  static readonly PERCENT_35 = '35%'
  static readonly PERCENT_40 = '40%'
  static readonly PERCENT_45 = '45%'
  static readonly PERCENT_50 = '50%'
  static readonly PERCENT_60 = '60%'
  static readonly PERCENT_65 = '65%'
  static readonly PERCENT_70 = '70%'
  static readonly PERCENT_72 = '72%'
  static readonly PERCENT_75 = '75%'
  static readonly PERCENT_80 = '80%'
  static readonly PERCENT_85 = '85%'
  static readonly PERCENT_90 = '90%'
  static readonly PERCENT_95 = '95%'
  static readonly PERCENT_100 = '100%'
}
import { StyleConst } from "../../../../Index"
@Component
export struct BottomLoadingBuilder {
  @Prop haveNextPage: boolean
  @Prop loading: boolean
  @Prop dataLength: number
  build() {
    if (this.haveNextPage && this.loading) {
      Row() {
        LoadingProgress()
          .width($r('app.float.size_30'))
          .height($r('app.float.size_30'))
          .margin({ right: $r('app.float.size_10') })
        Text($r('app.string.loading'))
          .fontSize($r('app.float.size_text_14'))
          .fontColor($r('app.color.color_666'))
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_60'))
      .justifyContent(FlexAlign.Center)
    } else if (!this.haveNextPage && this.dataLength > 0) {
      Text($r('app.string.there_is_no_more_data'))
        .fontSize($r('app.float.size_text_14'))
        .fontColor($r('app.color.color_999'))
        .textAlign(TextAlign.Center)
        .width(StyleConst.FULL_WIDTH)
        .margin({ top: $r('app.float.size_10'), bottom: $r('app.float.size_20') })
    }
  }
}
import http from '@ohos.net.http';
import { commonStorage } from '../../../../Index';
import { StorageConst } from '../manager';
import { ResponseResult } from './response';
export function requestApiCall(url: string,
  method: http.RequestMethod,
  data?: Record<string, number | boolean | string | Object | undefined>,
  headers?: Record<string, string>,
): Promise<ResponseResult> {
  const BASE_URL = 'https://charging.lusson.xyz'
  const httpRequest = http.createHttp();
  const defaultHeaders: Record<string, string> = {
    'Content-Type': 'application/json',
  }
  const token = commonStorage.getStringValueSync(StorageConst.TOKEN, "")
  if (token) {
    defaultHeaders['Authorization'] = `Bearer ${token}`
  }
  const finalHeaders: Record<string, string> = {};
  Object.keys(defaultHeaders).forEach(key => {
    finalHeaders[key] = defaultHeaders[key];
  });
  if (headers) {
    Object.keys(headers).forEach(key => {
      finalHeaders[key] = String(headers[key]);
    });
  }
  let responseResult = httpRequest.request(BASE_URL + url, {
    method: method,
    extraData: data ? JSON.stringify(data) : undefined,
    header: finalHeaders
  });
  let response: ResponseResult = new ResponseResult();
  return responseResult.then((value: http.HttpResponse) => {
    if (value.responseCode === 200) {
      let res: ResponseResult = JSON.parse(`${value.result}`);
      response.data = res.data;
      response.code = res.code;
      response.message = res.message;
    } else {
      response.message = '请求错误';
      response.code = 400;
    }
    return response;
  }).catch((error: Error) => {
    console.log('lucy++ error', JSON.stringify(error))
    response.message = '请求错误';
    response.code = 400;
    return response;
  })
}
export * from './StorageConst'
export * from './RoutePageConst'
export * from './UserCenterConst'
export class StorageConst {
  static readonly TOKEN = 'token'
  static readonly USER_INFO = 'userInfo'
  // 屏幕宽高
  static readonly SCREEN_WIDTH_VP = 'screenWidthVp'
  static readonly SCREEN_HEIGHT_VP = 'screenHeightVp'
  // 折叠屏显示模式
  static readonly FOLD_DISPLAY_MODE = 'foldDisplayMode'
  static readonly SEARCH_HISTORY = "search_history"
}
{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "JSON schema for mock-config.json5 file",
  "definitions": {
    "sourceRedirection": {
      "description": "A source redirection for mocked module.",
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        }
      }
    }
  },
  "patternProperties": {
    ".+": {
      "$ref": "#/definitions/sourceRedirection"
    }
  }
}
import { StorageConst } from "./StorageConst"
import { UserInfoData } from "../model/UserInfoModel"
import { commonStorage } from "../utils"
class UserCenterConst {
  userInfo: UserInfoData | null = null
  getUserInfoData(): UserInfoData | null {
    if (this.userInfo) {
      return this.userInfo;
    }
    const value = commonStorage.getStringValueSync(StorageConst.USER_INFO, '');
    // 如果已经是对象，直接使用
    if (value && typeof value === 'object') {
      this.userInfo = value as UserInfoData;
      return this.userInfo;
    }
    // 如果是字符串，尝试解析
    if (typeof value === 'string' && value) {
      const p = JsonParse<UserInfoData>(value);
      if (p) {
        this.userInfo = p;
        return this.userInfo;
      }
    }
    return null;
  }
}
function JsonParse<T>(text: string): T | undefined {
  try {
    return JSON.parse(text);
  } catch (e) {
    console.error(`JSON解析错误: ${text}, 错误信息: ${e}`);
    return undefined;
  }
}
export default new UserCenterConst()
import { hilog } from '@kit.PerformanceAnalysisKit';
import { BackupExtensionAbility, BundleVersion } from '@kit.CoreFileKit';
const DOMAIN = 0x0000;
export default class EntryBackupAbility extends BackupExtensionAbility {
  async onBackup() {
    hilog.info(DOMAIN, 'testTag', 'onBackup ok');
    await Promise.resolve();
  }
  async onRestore(bundleVersion: BundleVersion) {
    hilog.info(DOMAIN, 'testTag', 'onRestore ok %{public}s', JSON.stringify(bundleVersion));
    await Promise.resolve();
  }
}
import { StyleConst, toast } from '@tbs/common'
import { router } from '@kit.ArkUI'
import { getRegister } from './viewModel/RegisterViewModel'
@Entry
@Component
struct RegisterPage {
  @State adminUsername: string = '' //用户名
  @State adminPassword: string = '' //密码
  @State validCode: string = '' //验证码
  @State name: string = '' //企业名称
  @State domain: string = '' //网站
  //注册
  async getRegisterInfo(){
    if(!this.adminUsername){
      toast($r('app.string.please_enter_the_username'))
      return
    }
    if(!this.adminPassword){
      toast($r('app.string.please_enter_the_password'))
      return
    }
    if(!this.validCode){
      toast($r('app.string.please_enter_the_verification_code'))
      return
    }
    if(!this.name){
      toast($r('app.string.please_enter_the_company_name'))
      return
    }
    if(!this.domain){
      toast($r('app.string.please_enter_the_company_website'))
      return
    }
  let data = await getRegister(this.name,this.domain,this.adminUsername,this.adminPassword,this.validCode)
    console.log('lucy== data',JSON.stringify(data))
  }
  build() {
    Column({ space: 15 }) {
      Image($r('app.media.Groundhog'))
        .width($r('app.float.size_100'))
        .borderRadius($r('app.float.size_50'))
        .margin({ top: $r('app.float.size_120') })
      Text($r('app.string.welcome_register_groundhog')).fontColor(Color.Gray).fontSize($r('app.float.size_text_20'))
      TextInput({
        placeholder: $r('app.string.please_enter_the_username')
      })
        .width(StyleConst.PERCENT_90)
        .onChange((val: string) => {
          this.adminUsername = val
        })
      Row() {
        TextInput({ placeholder: $r('app.string.verification_code') })
          .width(StyleConst.PERCENT_50)
          .onChange((val: string) => this.validCode = val)
        Button($r('app.string.get_code'))
          .width(StyleConst.PERCENT_40)
          .backgroundColor($r('app.color.color_0aa671'))
      }.justifyContent(FlexAlign.SpaceBetween)
      .width(StyleConst.PERCENT_90)
      TextInput({
        placeholder: $r('app.string.password_length')
      })
        .width(StyleConst.PERCENT_90)
        .onChange((val: string) => this.adminPassword = val).type(InputType.Password)
      TextInput({
        placeholder: $r('app.string.company_name')
      })
        .width(StyleConst.PERCENT_90)
        .onChange((val: string) => {
          this.name = val
        })
      TextInput({
        placeholder: $r('app.string.company_website')
      })
        .width(StyleConst.PERCENT_90)
        .onChange((val: string) => {
          this.domain = val
        })
      Button($r('app.string.register_immediately'))
        .width(StyleConst.PERCENT_90)
        .backgroundColor($r('app.color.color_0aa671'))
        .onClick(() => {
          this.getRegisterInfo()
        })
      Row() {
        Text($r('app.string.existing_account'))
        Text($r('app.string.login_in')).fontWeight(FontWeight.Bold).fontColor($r('app.color.color_0aa671'))
          .onClick(() => {
            router.back()
          })
      }
      LoadingProgress()
        .color($r('app.color.color_0aa671')).width($r('app.float.size_50')).height($r('app.float.size_50'))
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundImage($r('app.media.rect'))
  }
}
class ExtendInterface {
    constructor(mocker) {
        this.mocker = mocker;
    }
    stub() {
        this.params = arguments;
        return this;
    }
    stubMockedCall(returnInfo) {
        this.mocker.stubApply(this, this.params, returnInfo);
    }
    afterReturn(value) {
        this.stubMockedCall(function () {
            return value;
        });
    }
    afterReturnNothing() {
        this.stubMockedCall(function () {
            return undefined;
        });
    }
    afterAction(action) {
        this.stubMockedCall(action);
    }
    afterThrow(msg) {
        this.stubMockedCall(function () {
            throw msg;
        });
    }
    clear(obj) {
        this.mocker.clear(obj);
    }
}
export default ExtendInterface;
import { http } from "@kit.NetworkKit";
import { Apis, requestApiCall } from "@tbs/common";
//注册
export function getRegister(name: string, domain: string, adminUsername: string, adminPassword: string,
  validCode: string) {
  // const params: Record<string, Object> = {
  //   "name": name,
  //   "domain": domain,
  //   "adminUsername": adminUsername,
  //   "adminPassword": adminPassword,
  //   "validCode": validCode
  // }
  return requestApiCall(Apis.USER_REGISTER, http.RequestMethod.POST, {}, { 'Content-Type': 'application/json' }).then(res=>{
  })
}
class VerificationMode {
    private doTimes: number
    constructor(times: number) {
        this.doTimes = times;
    }
    times(count: number) {
        if(count !== this.doTimes) {
            throw Error(`expect ${count} actual ${this.doTimes}`);
        }
    }
    never() {
        if (this.doTimes !== 0) {
            throw Error(`expect 0 actual ${this.doTimes}`);
        }
    }
    once() {
        if (this.doTimes !== 1) {
            throw Error(`expect 1 actual ${this.doTimes}`);
        }
    }
    atLeast(count: number) {
        if (count > this.doTimes) {
            throw Error('failed ' + count + ' greater than the actual execution times of method');
        }
    }
    atMost(count: number) {
        if (count < this.doTimes) {
            throw Error('failed ' + count + ' less than the actual execution times of method');
        }
    }
}
export default VerificationMode;
import {StyleConst} from '@tbs/common/Index'
import { ChargePage } from '@tbs/charge'
import { MinePage } from '@tbs/mine'
import { ScanPage } from '@tbs/scan'
import { buttonInfo, ButtonInfoModel } from './viewModel/homeData'
@Entry
@Component
struct HomePage {
  controller: TabsController = new TabsController()
  @State currentIndex: number = 0
  build() {
    Flex({ direction: FlexDirection.Column, justifyContent: FlexAlign.End, alignItems: ItemAlign.Center }) {
      Tabs({ barPosition: BarPosition.End, index: 0, controller: this.controller }) {
        ForEach(buttonInfo, (item: ButtonInfoModel, index?: number) => {
          TabContent() {
            if (index == 0) {
              ChargePage()
            } else if (index == 1) {
              ScanPage()
            }else if(index == 2){
              MinePage()
            }
          }.tabBar(this.BottomNavigation(item))
        })
      }
      .width(StyleConst.FULL_WIDTH)
      .height(StyleConst.FULL_HEIGHT)
      .vertical(false)
      .scrollable(false)
      .animationDuration(0)
      .divider({ strokeWidth: 1, color: '#f0f2f4' })
      .barHeight($r('app.float.size_50'))
      .margin({ bottom: $r('app.float.size_20') })
      .onChange((index) => {
        this.currentIndex = index
      })
    }
    .borderWidth(1).borderColor(Color.Blue)
  }
  @Builder
  BottomNavigation(item: ButtonInfoModel) {
    Column({ space: 6 }) {
      Image(this.currentIndex === item.index ? item.selectImg : item.img)
        .objectFit(ImageFit.Contain)
        .width($r('app.float.size_24'))
        .height($r('app.float.size_24'))
      Text(item.title)
        .fontColor(this.currentIndex === item.index ? $r('app.color.color_0165b8') : Color.Black)
        .opacity(this.currentIndex === item.index ? 1 : 0.6)
        .fontWeight(FontWeight.Medium)
        .textAlign(TextAlign.Center)
        .fontSize($r('app.float.size_text_10'))
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .alignItems(HorizontalAlign.Center)
    .justifyContent(FlexAlign.Center)
  }
}
export class ArgumentMatchers {
    constructor() {
        this.ANY = "<any>";
        this.ANY_STRING = "<any String>";
        this.ANY_BOOLEAN = "<any Boolean>";
        this.ANY_NUMBER = "<any Number>";
        this.ANY_OBJECT = "<any Object>";
        this.ANY_FUNCTION = "<any Function>";
        this.MATCH_REGEXS = "<match regexs>";
    }
    static any() {
    }
    static anyString() {
    }
    static anyBoolean() {
    }
    static anyNumber() {
    }
    static anyObj() {
    }
    static anyFunction() {
    }
    static matchRegexs(regex) {
        if (ArgumentMatchers.isRegExp(regex)) {
            return regex;
        }
        throw Error("not a regex");
    }
    static isRegExp(value) {
        return Object.prototype.toString.call(value) === "[object RegExp]";
    }
    matcheReturnKey(...args) {
        let arg = args[0];
        let regex = args[1];
        let stubSetKey = args[2];
        if (stubSetKey && stubSetKey == this.ANY) {
            return this.ANY;
        }
        if (typeof arg === "string" && !regex) {
            return this.ANY_STRING;
        }
        if (typeof arg === "boolean" && !regex) {
            return this.ANY_BOOLEAN;
        }
        if (typeof arg === "number" && !regex) {
            return this.ANY_NUMBER;
        }
        if (typeof arg === "object" && !regex) {
            return this.ANY_OBJECT;
        }
        if (typeof arg === "function" && !regex) {
            return this.ANY_FUNCTION;
        }
        if (typeof arg === "string" && regex) {
            return regex.test(arg);
        }
        return null;
    }
    matcheStubKey(key) {
        if (key === ArgumentMatchers.any) {
            return this.ANY;
        }
        if (key === ArgumentMatchers.anyString) {
            return this.ANY_STRING;
        }
        if (key === ArgumentMatchers.anyBoolean) {
            return this.ANY_BOOLEAN;
        }
        if (key === ArgumentMatchers.anyNumber) {
            return this.ANY_NUMBER;
        }
        if (key === ArgumentMatchers.anyObj) {
            return this.ANY_OBJECT;
        }
        if (key === ArgumentMatchers.anyFunction) {
            return this.ANY_FUNCTION;
        }
        if (ArgumentMatchers.isRegExp(key)) {
            return key;
        }
        return null;
    }
}
class VerificationMode {
    constructor(times) {
        this.doTimes = times;
    }
    times(count) {
        if (count !== this.doTimes) {
            throw Error(`expect ${count} actual ${this.doTimes}`);
        }
    }
    never() {
        if (this.doTimes !== 0) {
            throw Error(`expect 0 actual ${this.doTimes}`);
        }
    }
    once() {
        if (this.doTimes !== 1) {
            throw Error(`expect 1 actual ${this.doTimes}`);
        }
    }
    atLeast(count) {
        if (count > this.doTimes) {
            throw Error('failed ' + count + ' greater than the actual execution times of method');
        }
    }
    atMost(count) {
        if (count < this.doTimes) {
            throw Error('failed ' + count + ' less than the actual execution times of method');
        }
    }
}
export default VerificationMode;
import ExtendInterface from "./ExtendInterface.js";
import VerificationMode from "./VerificationMode.js";
import { ArgumentMatchers } from "./ArgumentMatchers.js";
class MockKit {
    constructor() {
        this.mFunctions = [];
        this.stubs = new Map();
        this.recordCalls = new Map();
        this.currentSetKey = new Map();
        this.mockObj = null;
        this.recordMockedMethod = new Map();
        this.mFunctions = [];
        this.stubs = new Map();
        this.recordCalls = new Map();
        this.currentSetKey = new Map();
        this.mockObj = null;
        this.recordMockedMethod = new Map();
    }
    init() {
        this.reset();
    }
    reset() {
        this.mFunctions = [];
        this.stubs = new Map();
        this.recordCalls = new Map();
        this.currentSetKey = new Map();
        this.mockObj = null;
        this.recordMockedMethod = new Map();
    }
    clearAll() {
        this.reset();
    }
    clear(obj) {
        if (!obj) throw Error("Please enter an object to be cleaned");
        if (typeof (obj) !== 'object' && typeof (obj) !== 'function') throw new Error('Not a object or static class');
        this.recordMockedMethod.forEach(function (value, key, map) {
            if (key) {
                obj[key] = value;
            }
        });
    }
    ignoreMock(obj, method) {
        if (typeof (obj) !== 'object' && typeof (obj) !== 'function') throw new Error('Not a object or static class');
        if (typeof (method) !== 'function') throw new Error('Not a function');
        let og = this.recordMockedMethod.get(method.propName);
        if (og) {
            obj[method.propName] = og;
            this.recordMockedMethod.set(method.propName, undefined);
        }
    }
    extend(dest, source) {
        dest["stub"] = source["stub"];
        dest["afterReturn"] = source["afterReturn"];
        dest["afterReturnNothing"] = source["afterReturnNothing"];
        dest["afterAction"] = source["afterAction"];
        dest["afterThrow"] = source["afterThrow"];
        dest["stubMockedCall"] = source["stubMockedCall"];
        dest["clear"] = source["clear"];
        return dest;
    }
    stubApply(f, params, returnInfo) {
        let values = this.stubs.get(f);
        if (!values) {
            values = new Map();
        }
        let key = params[0];
        if (typeof key === "undefined") {
            key = "anonymous-mock-" + f.propName;
        }
        let matcher = new ArgumentMatchers();
        if (matcher.matcheStubKey(key)) {
            key = matcher.matcheStubKey(key);
            if (key) {
                this.currentSetKey.set(f, key);
            }
        }
        values.set(key, returnInfo);
        this.stubs.set(f, values);
    }
    getReturnInfo(f, params) {
        let values = this.stubs.get(f);
        if (!values) {
            return undefined;
        }
        let retrunKet = params[0];
        if (typeof retrunKet === "undefined") {
            retrunKet = "anonymous-mock-" + f.propName;
        }
        let stubSetKey = this.currentSetKey.get(f);
        if (stubSetKey && (typeof (retrunKet) !== "undefined")) {
            retrunKet = stubSetKey;
        }
        let matcher = new ArgumentMatchers();
        if (matcher.matcheReturnKey(params[0], undefined, stubSetKey) && matcher.matcheReturnKey(params[0], undefined, stubSetKey) !== stubSetKey) {
            retrunKet = params[0];
        }
        values.forEach(function (value, key, map) {
            if (ArgumentMatchers.isRegExp(key) && matcher.matcheReturnKey(params[0], key)) {
                retrunKet = key;
            }
        });
        return values.get(retrunKet);
    }
    findName(obj, value) {
        let properties = this.findProperties(obj);
        let name = '';
        properties.filter((item) => (item !== 'caller' && item !== 'arguments')).forEach(function (va1, idx, array) {
            if (obj[va1] === value) {
                name = va1;
            }
        });
        return name;
    }
    isFunctionFromPrototype(f, container, propName) {
        if (container.constructor !== Object && container.constructor.prototype !== container) {
            return container.constructor.prototype[propName] === f;
        }
        return false;
    }
    findProperties(obj, ...arg) {
        function getProperty(new_obj) {
            if (new_obj.__proto__ === null) {
                return [];
            }
            let properties = Object.getOwnPropertyNames(new_obj);
            return [...properties, ...getProperty(new_obj.__proto__)];
        }
        return getProperty(obj);
    }
    recordMethodCall(originalMethod, args) {
        originalMethod['getName'] = function () {
            return this.name || this.toString().match(/function\s*([^(]*)\(/)[1];
        };
        let name = originalMethod.getName();
        let arglistString = name + '(' + Array.from(args).toString() + ')';
        let records = this.recordCalls.get(arglistString);
        if (!records) {
            records = 0;
        }
        records++;
        this.recordCalls.set(arglistString, records);
    }
    mockFunc(originalObject, originalMethod) {
        let tmp = this;
        this.originalMethod = originalMethod;
        const _this = this;
        let f = function () {
            let args = arguments;
            let action = tmp.getReturnInfo(f, args);
            if (originalMethod) {
                tmp.recordMethodCall(originalMethod, args);
            }
            if (action) {
                return action.apply(_this, args);
            }
        };
        f.container = null || originalObject;
        f.original = originalMethod || null;
        if (originalObject && originalMethod) {
            if (typeof (originalMethod) != 'function')
                throw new Error('Not a function');
            var name = this.findName(originalObject, originalMethod);
            originalObject[name] = f;
            this.recordMockedMethod.set(name, originalMethod);
            f.propName = name;
            f.originalFromPrototype = this.isFunctionFromPrototype(f.original, originalObject, f.propName);
        }
        f.mocker = this;
        this.mFunctions.push(f);
        this.extend(f, new ExtendInterface(this));
        return f;
    }
    verify(methodName, argsArray) {
        if (!methodName) {
            throw Error("not a function name");
        }
        let a = this.recordCalls.get(methodName + '(' + argsArray.toString() + ')');
        return new VerificationMode(a ? a : 0);
    }
    mockObject(object) {
        if (!object || typeof object === "string") {
            throw Error(`this ${object} cannot be mocked`);
        }
        const _this = this;
        let mockedObject = {};
        let keys = Reflect.ownKeys(object);
        keys.filter(key => (typeof Reflect.get(object, key)) === 'function')
            .forEach((key) => {
            mockedObject[key] = object[key];
            mockedObject[key] = _this.mockFunc(mockedObject, mockedObject[key]);
        });
        return mockedObject;
    }
}
function ifMockedFunction(f) {
    if (Object.prototype.toString.call(f) != "[object Function]" &&
        Object.prototype.toString.call(f) != "[object AsyncFunction]") {
        throw Error("not a function");
    }
    if (!f.stub) {
        throw Error("not a mock function");
    }
    return true;
}
function when(f) {
    if (ifMockedFunction(f)) {
        return f.stub.bind(f);
    }
}
function MockSetup(target, propertyName, descriptor) {
    const aboutToAppearOrigin = target.aboutToAppear;
    const setup = descriptor.value;
    target.aboutToAppear = function (...args) {
        if (target.__Param) { 
            try {
                const map = target.__Param;
                for (const [key, val] of map) {
                    this[key] = val; 
                }
            }
            catch (e) {
                throw new Error(`Mock setup param error: ${e}`);
            }
        }
        if (setup) { 
            try {
                setup.apply(this);
            }
            catch (e) {
                throw new Error(`Mock setup apply error: ${e}`);
            }
        }
        if (aboutToAppearOrigin) { 
            aboutToAppearOrigin.apply(this, args);
        }
    };
}
export { MockSetup, MockKit, when };
import { MockKit } from "./MockKit.js";
class ExtendInterface {
    private mocker: MockKit
    private params: any
    constructor(mocker: MockKit) {
        this.mocker = mocker;
    }
    stub() {
        this.params = arguments;
        return this;
    }
    stubMockedCall(returnInfo: any) {
        this.mocker.stubApply(this, this.params, returnInfo);
    }
    afterReturn(value: any) {
        this.stubMockedCall(function () {
            return value;
        });
    }
    afterReturnNothing() {
        this.stubMockedCall(function () {
            return undefined;
        });
    }
    afterAction(action: Function) {
        this.stubMockedCall(action);
    }
    afterThrow(msg: string) {
        this.stubMockedCall(function () {
            throw msg;
        });
    }
    clear(obj?: any) {
        this.mocker.clear(obj);
    }
}
export default ExtendInterface;
export class ArgumentMatchers {
    ANY = "<any>";
    ANY_STRING = "<any String>";
    ANY_BOOLEAN = "<any Boolean>";
    ANY_NUMBER = "<any Number>";
    ANY_OBJECT = "<any Object>";
    ANY_FUNCTION = "<any Function>";
    MATCH_REGEXS = "<match regexs>";
    static any() {
    }
    static anyString() {
    }
    static anyBoolean() {
    }
    static anyNumber() {
    }
    static anyObj() {
    }
    static anyFunction() {
    }
    static matchRegexs(regex: any) {
        if (ArgumentMatchers.isRegExp(regex)) {
            return regex;
        }
        throw Error("not a regex");
    }
    static isRegExp(value: string) {
        return Object.prototype.toString.call(value) === "[object RegExp]";
    }
    matcheReturnKey(...args: Array<any>) {
        let arg = args[0];
        let regex = args[1];
        let stubSetKey = args[2];
        if (stubSetKey && stubSetKey == this.ANY) {
            return this.ANY;
        }
        if (typeof arg === "string" && !regex) {
            return this.ANY_STRING;
        }
        if (typeof arg === "boolean" && !regex) {
            return this.ANY_BOOLEAN;
        }
        if (typeof arg === "number" && !regex) {
            return this.ANY_NUMBER;
        }
        if (typeof arg === "object" && !regex) {
            return this.ANY_OBJECT;
        }
        if (typeof arg === "function" && !regex) {
            return this.ANY_FUNCTION;
        }
        if (typeof arg === "string" && regex) {
            return regex.test(arg);
        }
        return null;
    }
    matcheStubKey(key: any) {
        if (key === ArgumentMatchers.any) {
            return this.ANY;
        }
        if (key === ArgumentMatchers.anyString) {
            return this.ANY_STRING;
        }
        if (key === ArgumentMatchers.anyBoolean) {
            return this.ANY_BOOLEAN;
        }
        if (key === ArgumentMatchers.anyNumber) {
            return this.ANY_NUMBER;
        }
        if (key === ArgumentMatchers.anyObj) {
            return this.ANY_OBJECT;
        }
        if (key === ArgumentMatchers.anyFunction) {
            return this.ANY_FUNCTION;
        }
        if (ArgumentMatchers.isRegExp(key)) {
            return key;
        }
        return null;
    }
}
import { StyleConst, toast } from '@tbs/common';
import { TenantItem, TenantValueItem } from './model/LoginModel';
import { router } from '@kit.ArkUI';
import { getTenant, getToken } from './viewModel/LoginViewModel';
@Entry
@Component
struct LoginPage {
  @State tenant: string = ''
  @State username: string = ''
  @State password: string = ''
  @State Tenants: TenantValueItem[] = []
  aboutToAppear() {
    this.getTenantData()
  }
  //获取租户信息
  async getTenantData() {
    let data = await getTenant()
    if (data) {
      this.Tenants = data.map((item: TenantItem): TenantValueItem => ({
        value: item.name || ''
      })) || [];
    }
  }
  //去登录
  async login() {
    if (!this.tenant) {
      toast($r('app.string.please_select_the_tenant'))
      return
    }
    if (!this.username) {
      toast($r('app.string.please_enter_the_username'))
      return
    }
    if (!this.password) {
      toast($r('app.string.please_enter_the_password'))
      return
    }
    let data = await getToken(this.tenant, this.username, this.password)
    if (data) {
      router.replaceUrl({
        url: 'home/HomePage'
      })
    }
  }
  build() {
    Column({ space: 15 }) {
      Image($r('app.media.Groundhog'))
        .width($r('app.float.size_100'))
        .borderRadius($r('app.float.size_50'))
        .margin({ top: $r('app.float.size_120') })
      Text($r('app.string.welcome_login_groundhog')).fontColor(Color.Gray).fontSize($r('app.float.size_text_20'))
      Select(this.Tenants)
        .selected(0)
        .value($r('app.string.please_select_the_tenant'))
        .font({ size: $r('app.float.size_16'), weight: FontWeight.Bold })
        .fontColor($r('app.color.color_182431'))
        .selectedOptionFont({ size: $r('app.float.size_16'), weight: FontWeight.Regular })
        .optionFont({ size: $r('app.float.size_16'), weight: FontWeight.Regular })
        .width(StyleConst.PERCENT_60)
        .onSelect((index: number) => {
          this.tenant = (index + 1).toString()
        })
      TextInput({
        placeholder: $r('app.string.please_enter_the_username')
      })
        .width(StyleConst.PERCENT_90)
        .onChange((val: string) => {
          this.username = val
        })
      TextInput({
        placeholder: $r('app.string.please_enter_the_password')
      })
        .width(StyleConst.PERCENT_90)
        .onChange((val) => {
          this.password = val
        }).type(InputType.Password)
      Button($r('app.string.login'))
        .width(StyleConst.PERCENT_90)
        .backgroundColor($r('app.color.color_0aa671'))
        .onClick(() => {
          this.login()
        })
      Row() {
        Text($r('app.string.no_account'))
        Text($r('app.string.register')).fontWeight(FontWeight.Bold).fontColor($r('app.color.color_0aa671'))
          .onClick(() => {
            router.pushUrl({ url: 'register/RegisterPage' })
          })
      }
      LoadingProgress()
        .color($r('app.color.color_0aa671')).width($r('app.float.size_50')).height($r('app.float.size_50'))
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundImage($r('app.media.rect'))
  }
}
export class TenantValueItem {
  value: string = '';
}
export class TenantsData {
  Data?: TenantItem[]
}
export class TenantItem {
  id?: number;
  name?: string;
  domain?: string;
}
export class LoginData {
  token?: string
  role?: string
}
export class ButtonInfoModel {
  index: number = 0;
  img: Resource = $r('app.media.home');
  selectImg: Resource = $r('app.media.home_active');
  title: Resource = $r('app.string.charge');
}
const buttonInfo: ButtonInfoModel[] = [
  {
    index: 0,
    img: $r("app.media.home"),
    selectImg: $r("app.media.home_active"),
    title: $r('app.string.charge')
  },
  {
    index: 1,
    img: $r("app.media.scan"),
    selectImg: $r("app.media.scan_active"),
    title: $r('app.string.scan')
  },
  {
    index: 2,
    img: $r("app.media.my"),
    selectImg: $r("app.media.my_active"),
    title: $r('app.string.mine')
  }
]
export { buttonInfo }
import ExtendInterface from "./ExtendInterface.js";
import VerificationMode from "./VerificationMode.js";
import { ArgumentMatchers } from "./ArgumentMatchers.js";
interface IFunction extends Function {
    container: any;
    original: any;
    propName: string;
    originalFromPrototype: boolean
    mocker: MockKit
}
class MockKit {
    private mFunctions:Array<any> = [];
    private stubs = new Map();
    private recordCalls = new Map();
    private currentSetKey = new Map();
    private mockObj = null;
    private recordMockedMethod = new Map();
    private originalMethod: any;
    constructor() {
        this.mFunctions = [];
        this.stubs = new Map();
        this.recordCalls = new Map();
        this.currentSetKey = new Map();
        this.mockObj = null;
        this.recordMockedMethod = new Map();
    }
    init() {
        this.reset();
    }
    reset() {
        this.mFunctions = [];
        this.stubs = new Map()
        this.recordCalls = new Map();
        this.currentSetKey = new Map();
        this.mockObj = null;
        this.recordMockedMethod = new Map();
    }
    clearAll() {
        this.reset();
    }
    clear(obj: any) {
        if (!obj) throw Error("Please enter an object to be cleaned");
        if (typeof (obj) != 'object') throw new Error('Not a object');
        this.recordMockedMethod.forEach(function (value, key, map) {
            if (key) {
                obj[key] = value;
            }
        });
    }
    ignoreMock(obj:any, method: any) {
        if (typeof (obj) != 'object') throw new Error('Not a object');
        if (typeof (method) != 'function') throw new Error('Not a function');
        let og = this.recordMockedMethod.get(method.propName);
        if (og) {
            obj[method.propName] = og;
            this.recordMockedMethod.set(method.propName, undefined);
        }
    }
    extend(dest: any, source:any) {
        dest["stub"] = source["stub"];
        dest["afterReturn"] = source["afterReturn"];
        dest["afterReturnNothing"] = source["afterReturnNothing"];
        dest["afterAction"] = source["afterAction"];
        dest["afterThrow"] = source["afterThrow"];
        dest["stubMockedCall"] = source["stubMockedCall"];
        dest["clear"] = source["clear"];
        return dest;
    }
    stubApply(f: any, params:any, returnInfo:any) {
        let values = this.stubs.get(f);
        if (!values) {
            values = new Map();
        }
        let key = params[0];
        if (typeof key == "undefined") {
            key = "anonymous-mock-" + f.propName;
        }
        let matcher = new ArgumentMatchers();
        if (matcher.matcheStubKey(key)) {
            key = matcher.matcheStubKey(key);
            if (key) {
                this.currentSetKey.set(f, key);
            }
        }
        values.set(key, returnInfo);
        this.stubs.set(f, values);
    }
    getReturnInfo(f: any, params:any) {
        let values = this.stubs.get(f);
        if (!values) {
            return undefined;
        }
        let retrunKet = params[0];
        if (typeof retrunKet == "undefined") {
            retrunKet = "anonymous-mock-" + f.propName;
        }
        let stubSetKey = this.currentSetKey.get(f);
        if (stubSetKey && (typeof (retrunKet) != "undefined")) {
            retrunKet = stubSetKey;
        }
        let matcher = new ArgumentMatchers();
        if (matcher.matcheReturnKey(params[0], undefined, stubSetKey) && matcher.matcheReturnKey(params[0], undefined, stubSetKey) != stubSetKey) {
            retrunKet = params[0];
        }
        values.forEach(function (value: any, key: any, map: any) {
            if (ArgumentMatchers.isRegExp(key) && matcher.matcheReturnKey(params[0], key)) {
                retrunKet = key;
            }
        });
        return values.get(retrunKet);
    }
    findName(obj: any, value: any) {
        let properties = this.findProperties(obj);
        let name = '';
        properties.filter((item:any) => (item !== 'caller' && item !== 'arguments')).forEach(
            function (va1:any, idx:any, array:any) {
                if (obj[va1] === value) {
                    name = va1;
                }
            }
        );
        return name;
    }
    isFunctionFromPrototype(f: Function, container:Function, propName: string) {
        if (container.constructor != Object && container.constructor.prototype !== container) {
            return container.constructor.prototype[propName] === f;
        }
        return false;
    }
    findProperties(obj: any, ...arg: Array<any>) {
        function getProperty(new_obj:any): Array<any> {
            if (new_obj.__proto__ === null) {
                return [];
            }
            let properties = Object.getOwnPropertyNames(new_obj);
            return [...properties, ...getProperty(new_obj.__proto__)];
        }
        return getProperty(obj);
    }
    recordMethodCall(originalMethod: any, args: any) {
        originalMethod['getName'] = function () {
            return this.name || this.toString().match(/function\s*([^(]*)\(/)[1];
        }
        let name = originalMethod.getName();
        let arglistString = name + '(' + Array.from(args).toString() + ')';
        let records = this.recordCalls.get(arglistString);
        if (!records) {
            records = 0;
        }
        records++;
        this.recordCalls.set(arglistString, records);
    }
    mockFunc(originalObject:any, originalMethod:any) {
        let tmp = this;
        this.originalMethod = originalMethod;
        const _this = this;
        let f:any  = function () {
            let args = arguments;
            let action = tmp.getReturnInfo(f, args);
            if (originalMethod) {
                tmp.recordMethodCall(originalMethod, args);
            }
            if (action) {
                return <IFunction> action.apply(_this, args);
            }
        };
        f.container = null || originalObject;
        f.original = originalMethod || null;
        if (originalObject && originalMethod) {
            if (typeof (originalMethod) != 'function') throw new Error('Not a function');
            var name = this.findName(originalObject, originalMethod);
            originalObject[name] = f;
            this.recordMockedMethod.set(name, originalMethod);
            f.propName = name;
            f.originalFromPrototype = this.isFunctionFromPrototype(f.original, originalObject, f.propName);
        }
        f.mocker = this;
        this.mFunctions.push(f);
        this.extend(f, new ExtendInterface(this));
        return f;
    }
    verify(methodName:any, argsArray:any) {
        if (!methodName) {
            throw Error("not a function name");
        }
        let a = this.recordCalls.get(methodName + '(' + argsArray.toString() + ')');
        return new VerificationMode(a ? a : 0);
    }
    mockObject(object: any) {
        if (!object || typeof object === "string") {
            throw Error(`this ${object} cannot be mocked`);
        }
        const _this = this;
        let mockedObject:any = {};
        let keys = Reflect.ownKeys(object);
        keys.filter(key => (typeof Reflect.get(object, key)) === 'function')
            .forEach((key:any) => {
                mockedObject[key] = object[key];
                mockedObject[key] = _this.mockFunc(mockedObject, mockedObject[key]);
            });
        return mockedObject;
    }
}
function ifMockedFunction(f: any) {
    if (Object.prototype.toString.call(f) != "[object Function]" &&
        Object.prototype.toString.call(f) != "[object AsyncFunction]") {
        throw Error("not a function");
    }
    if (!f.stub) {
        throw Error("not a mock function");
    }
    return true;
}
function when(f: any) {
    if (ifMockedFunction(f)) {
        return f.stub.bind(f);
    }
}
function MockSetup(target: Object, propertyName: string | Symbol, descriptor: TypedPropertyDescriptor<() => void>): void {
    const aboutToAppearOrigin = target.aboutToAppear;
    const setup = descriptor.value;
    target.aboutToAppear = function (...args: any[]) {
        if (target.__Param) { 
            try {
                const map = target.__Param as Map<string, unknown>;
                for (const [key, val] of map) {
                    this[key] = val; 
                }
            } catch (e) {
                throw new Error(`Mock setup param error: ${e}`);
            }
        }
        if (setup) { 
            try {
                setup.apply(this);
            } catch (e) {
                throw new Error(`Mock setup apply error: ${e}`);
            }
        }
        if (aboutToAppearOrigin) { 
            aboutToAppearOrigin.apply(this, args);
        }
    }
}
export {
    MockSetup,
    MockKit,
    when
};
export class RoutePageConst {
  static readonly AppHomePage = "home/HomePage" //App-充电页面
  static readonly LoginPage = "login/LoginPage" //App-登录页面
}
import { AbilityConstant, ConfigurationConstant, UIAbility, Want } from '@kit.AbilityKit';
import { hilog } from '@kit.PerformanceAnalysisKit';
import { window } from '@kit.ArkUI';
import {
  commonStorage,
  GlobalContext,
  initDataPreference,
  RoutePageConst,
  StorageConst,
  WindowModel
} from '@tbs/common';
const DOMAIN = 0x0000;
export default class EntryAbility extends UIAbility {
  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {
    this.context.getApplicationContext().setColorMode(ConfigurationConstant.ColorMode.COLOR_MODE_NOT_SET);
    hilog.info(DOMAIN, 'testTag', '%{public}s', 'Ability onCreate');
    // 绑定上下文信息
    GlobalContext.getContext().setObject(GlobalContext.CONTEXT, this.context);
    initDataPreference()
  }
  onDestroy(): void {
    hilog.info(DOMAIN, 'testTag', '%{public}s', 'Ability onDestroy');
  }
  onWindowStageCreate(windowStage: window.WindowStage): void {
    // Main window is created, set main page for this ability
    hilog.info(DOMAIN, 'testTag', '%{public}s', 'Ability onWindowStageCreate');
    this.setMainWindowImmersive(windowStage)
    //有登录信息->跳转至App充电页，无登录信息->登录页
    let destPageUrl = RoutePageConst.AppHomePage
    if (!commonStorage.getStringValueSync(StorageConst.TOKEN, "")) {
      destPageUrl = RoutePageConst.LoginPage
    }
    windowStage.loadContent(destPageUrl, (err) => {
      if (err.code) {
        hilog.error(DOMAIN, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err));
        return;
      }
      hilog.info(DOMAIN, 'testTag', 'Succeeded in loading the content.');
    });
  }
  onWindowStageDestroy(): void {
    // Main window is destroyed, release UI related resources
    hilog.info(DOMAIN, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');
  }
  onForeground(): void {
    // Ability has brought to foreground
    hilog.info(DOMAIN, 'testTag', '%{public}s', 'Ability onForeground');
  }
  onBackground(): void {
    // Ability has back to background
    hilog.info(DOMAIN, 'testTag', '%{public}s', 'Ability onBackground');
  }
  /**
   * 设置沉浸式状态栏
   * 默认情况：状态栏、导航栏透明，状态栏字体颜色黑色
   * @param windowStage
   */
  setMainWindowImmersive(windowStage: window.WindowStage) {
    WindowModel.getInstance().setWindowStage(windowStage)
    WindowModel.getInstance().setMainWindowImmersive(true)
    let type = window.AvoidAreaType.TYPE_SYSTEM;
    try {
      let mainWindow = windowStage.getMainWindowSync()
      let avoidArea = mainWindow.getWindowAvoidArea(type)
      GlobalContext.getContext().setObject(GlobalContext.STATUS_BAR_HEIGHT, avoidArea.topRect.height); //状态栏高度
      //获取导航条避让遮挡的区域
      let t = window.AvoidAreaType.TYPE_NAVIGATION_INDICATOR
      let avoidAreaIndicator = mainWindow.getWindowAvoidArea(t);
      let bottomRectHeight = avoidAreaIndicator.bottomRect.height; // 获取到导航条区域的高度
      GlobalContext.getContext().setObject(GlobalContext.NAVIGATION_HEIGHT, bottomRectHeight);
    } catch (e) {
      console.error('lucy++ EntryAbility getMainWindowSync error:' + e.message)
    }
  }
}
import { http } from "@kit.NetworkKit";
import { LoginData, TenantsData } from "../model/LoginModel";
import { Apis, StorageConst, commonStorage, requestApiCall, toast } from "@tbs/common";
import { UserInfoData } from "@tbs/mine/src/main/ets/model/MineModel";
import { BusinessError } from "@kit.BasicServicesKit";
//获取租户ID
export function getTenant() {
  return requestApiCall(Apis.USER_TENANT, http.RequestMethod.GET).then((res) => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    const data = res.data as TenantsData
    return data.Data
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 获取租户ID接口调用失败，${err.code}+${err.message}`)
  })
}
//获取token-登录
export function getToken(tenant: string, username: string, password: string) {
  const headers: Record<string, string> = {
    'X-Tenant-ID': tenant,
  }
  const params: Record<string, Object> = {
    "username": username,
    "password": password
  }
  return requestApiCall(Apis.USER_LOGIN, http.RequestMethod.POST, params, headers).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    const data = res.data as LoginData
    let token = data.token
    console.log('lucy== token', token)
    if (token) {
      commonStorage.saveValueSync(StorageConst.TOKEN, token)
      //登录成功后，获取下用户信息
      getUserInfo()
    }
    return token
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 获取登录接口调用失败，${err.code}+${err.message}`)
  })
}
//获取用户信息
export function getUserInfo() {
  return requestApiCall(Apis.USER_INFO, http.RequestMethod.GET).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    const data = res.data as UserInfoData
    if (data) {
      commonStorage.saveValueSync(StorageConst.USER_INFO, data)
    }
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 获取用户信息接口调用失败，${err.code}+${err.message}`)
  })
}
{
  "layered-image":
  {
    "background" : "$media:background",
    "foreground" : "$media:foreground"
  }
}
{
  "allowToBackupRestore": true
}
{
  "src": [
    "home/HomePage",
    "login/LoginPage",
    "register/RegisterPage"
  ]
}
import { BusinessError } from "@kit.BasicServicesKit"
import { bundleManager } from "@kit.AbilityKit"
export enum ThirdApp {
  Alipay = 'alipays://',
  Amapuri = "amapuri://", // 高德地图的 scheme
  Baidumap = "baidumap://map/direction", // 百度地图的 scheme
  Maps = "maps://", // 华为地图的 scheme
  Https = "https://" // App link scheme
}
class ThirdAppManager{
  /** 第三方应用是否安装 */
  isAppInstall(thirdApp: ThirdApp): boolean {
    try {
      return bundleManager.canOpenLink(thirdApp)
    } catch (e) {
      let code = (e as BusinessError)?.code
      let msg = (e as BusinessError)?.message ?? ''
      if (code !== undefined) {
        if (code === 17700056) {
          msg += ` Please include "${thirdApp.replace('://',
            '')}" inside the "querySchemes" element of module.json5 in your app module.`
        }
        console.log(`isAppInstall get error${msg}`)
      } else {
        console.log(`isAppInstall get error${e}`)
      }
      return false
    }
  }
}
export const thirdAppManager = new ThirdAppManager()
{
  "float": [
    {
      "name": "page_text_font_size",
      "value": "50fp"
    }
  ]
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "module description"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "label"
    }
  ]
}
{
  "color": [
    {
      "name": "start_window_background",
      "value": "#FFFFFF"
    }
  ]
}
import { geoLocationManager } from "@kit.LocationKit";
import { PermissionConst } from "./PermissionConst";
import { permissionManager } from "./PermissionManager";
class LocationManager {
  async requestPermissionAgain() {
    return await permissionManager.requestPermissionAgain(PermissionConst.locationPermissions, getContext(this))
  }
  // 检查是否有定位权限，外部可直接调用，异常时返回false
  async checkLocationPermissions(): Promise<boolean> {
    try {
      return await permissionManager.checkPermissions(PermissionConst.locationPermissions) &&
      geoLocationManager.isLocationEnabled();
    } catch (e) {
      console.log(`lucy== hasLocationPermissions, ${JSON.stringify(e)}`)
      return false;
    }
  }
  // 校验并申请权限，如果申请权限返回false，则抛出异常，使用者需要使用catch接收。
  async checkAndApplyPermissions(context: Context): Promise<boolean> {
    let isGranted = await this.checkLocationPermissions();
    if (isGranted) {
      return true;
    }
    try {
      let userGranted = await permissionManager.reqPermissionsFromUser(PermissionConst.locationPermissions, context);
      if (userGranted) {
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }
}
export const locationManager = new LocationManager()
import { Permissions } from '@kit.AbilityKit';
export class PermissionConst {
  static readonly locationPermissions: Array<Permissions> = [
    'ohos.permission.APPROXIMATELY_LOCATION',
    'ohos.permission.LOCATION',
  ];
  static readonly mediaRWPermissions: Array<Permissions> = [
    'ohos.permission.READ_MEDIA',
    'ohos.permission.WRITE_MEDIA'
  ];
  static readonly imageVideoReadPermission: Permissions = 'ohos.permission.READ_IMAGEVIDEO';
  static readonly imageVideoWritePermission: Permissions = 'ohos.permission.WRITE_IMAGEVIDEO';
  static readonly cameraPermission: Permissions = 'ohos.permission.CAMERA';
  // 获取OAID
  static readonly oaIdPermission: Permissions = 'ohos.permission.APP_TRACKING_CONSENT';
}
export * from './LocationManager';
export * from './ThirdAppManager'
import { abilityAccessCtrl, PermissionRequestResult, Permissions } from "@kit.AbilityKit";
import { BusinessError } from "@kit.BasicServicesKit";
import { appBundleManager } from "./AppBundleManager";
class PermissionManager{
  atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
  // 每次访问受目标权限保护的接口之前，都需要使用requestPermissionsFromUser()接口请求相应的权限。
  // 权限组：当应用请求权限时，同一个权限组的权限将会在一个弹窗内一起请求用户授权。用户点击同意，即同意了整个权限组。
  // 如定位权限组：['ohos.permission.APPROXIMATELY_LOCATION', 'ohos.permission.LOCATION']
  async checkPermissions(permissions: Array<Permissions>): Promise<boolean> {
    console.log(`check permission ${permissions}`);
    try {
      let grantStatusArray: abilityAccessCtrl.GrantStatus[] = [];
      for (let i = 0; i < permissions.length; i++) {
        grantStatusArray[i] = await this.checkPermissionInner(permissions[i]);
      }
      console.log(`checkPermissions: ${permissions}, grantStatus ${grantStatusArray} `);
      // todo 暂定全同意才算同意
      const denied = grantStatusArray.indexOf(abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) > -1;
      return !denied;
    } catch (e) {
      return Promise.reject(e);
    }
  }
  private async checkPermissionInner(permission: Permissions): Promise<abilityAccessCtrl.GrantStatus> {
    let grantStatus: abilityAccessCtrl.GrantStatus = abilityAccessCtrl.GrantStatus.PERMISSION_DENIED;
    // 校验应用是否被授予权限
    try {
      grantStatus = await this.atManager.checkAccessToken(appBundleManager.getTokenId(), permission);
    } catch (error) {
      const err: BusinessError = error as BusinessError;
      console.log(`Failed to check access token. Code is ${err.code}, message is ${err.message}`);
      return Promise.reject(`checkPermissionInner: checkAccessToken error: ${JSON.stringify(error)}`,);
    }
    return grantStatus;
  }
  async reqPermissionsFromUser(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
    // requestPermissionsFromUser会判断权限的授权状态来决定是否唤起弹窗
    try {
      let result: PermissionRequestResult = await atManager.requestPermissionsFromUser(context, permissions);
      let grantStatus: Array<number> = result.authResults;
      for (let i = 0; i < grantStatus.length; i++) {
        if (grantStatus[i] === 0) {
          // 用户授权，可以继续访问目标操作
          console.log(`reqPermissionsFromUser: ${permissions[i]} is granted`);
        } else {
          console.log(`reqPermissionsFromUser: ${permissions[i]} is denied`);
          return false;
        }
      }
      return true;
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
  //被拒绝后，再次点击全权限申请使用该方法
  async requestPermissionAgain(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    try {
      const result = await this.atManager.requestPermissionOnSetting(context, permissions)
      return result.every((status) => {
        return status === abilityAccessCtrl.GrantStatus.PERMISSION_GRANTED
      })
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
}
let permissionManager = new PermissionManager();
export { permissionManager };
import { bundleManager } from "@kit.AbilityKit";
class AppBundleManager{
  private bundleInfo?: bundleManager.BundleInfo
  getBundleInfo(): bundleManager.BundleInfo {
    if (this.bundleInfo == null || this.bundleInfo == undefined) {
      return bundleManager.getBundleInfoForSelfSync(bundleManager.BundleFlag.GET_BUNDLE_INFO_WITH_APPLICATION)
    }
    return this.bundleInfo
  }
  getTokenId(): number {
    let bundleInfo = this.getBundleInfo();
    return bundleInfo.appInfo.accessTokenId;
  }
}
export const appBundleManager = new AppBundleManager()
{
  "module": {
    "name": "common",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
{
  "color": [
    {
      "name": "start_window_background",
      "value": "#000000"
    }
  ]
}
import { componentUtils, inspector } from "@kit.ArkUI"
export class ComponentUtils {
  /**
   * 同步方式获取组件渲染后的实际高度
   * @param componentId 组件ID
   * @param callback 注册的回调函数
   */
  static getComponentHeightSync(componentId: string, callback: (width: number) => void): void {
    // 监听组件
    const listener = inspector.createComponentObserver(componentId)
    // 注册回调
    listener.on('layout', () => {
      const componentInfo = componentUtils.getRectangleById(componentId)
      const height = px2vp(componentInfo.size.height)
      callback?.(height)
      // 取消注册回调
      listener.off('layout')
    })
  }
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
{
  "module": {
    "name": "common_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
import measure from '@ohos.measure'
export class TextUtil{
  static getTextWidth(textContent: string,
    fontSize: number | string | Resource = $r('app.float.size_text_14'), maxLines: number = 1,
    weight: FontWeight | number = FontWeight.Regular): number {
    if (!textContent || textContent.length === 0) {
      return 0
    }
    const width: number = measure.measureText({
      textContent: textContent,
      fontSize: fontSize,
      fontWeight: weight,
      maxLines: maxLines
    })
    return px2vp(width)
  }
}
export * from './WindowModel'
export * from './GlobalContext'
export * from './TextUtil'
export { ScreenUtils } from './ScreenUtil';
export { initDataPreference, commonStorage } from './StorageUtils'
export * from './ComponentUtils'
export { formatDate } from './formatDate'
import { window } from "@kit.ArkUI";
import { BusinessError } from "@kit.BasicServicesKit";
export class WindowModel {
  private constructor() {
  }
  /**
   * 默认样式
   */
  private readonly DEFAULT: window.SystemBarProperties = {
    statusBarColor: '#00000000',
    navigationBarColor: '#00000000',
    // 以下两个属性从API Version 8开始支持
    statusBarContentColor: '#000000',
    navigationBarContentColor: '#00000000'
  };
  /**
   * WindowModel 单例
   */
  private static instance?: WindowModel;
  /**
   * 获取WindowModel单例实例
   * @returns {WindowModel} WindowModel
   */
  static getInstance(): WindowModel {
    if (!WindowModel.instance) {
      WindowModel.instance = new WindowModel();
    }
    return WindowModel.instance;
  }
  /**
   * 缓存的当前WindowStage实例
   */
  private windowStage?: window.WindowStage;
  /**
   * 缓存windowStage
   * @param windowStage 当前WindowStage实例
   * @returns {void}
   */
  setWindowStage(windowStage: window.WindowStage): void {
    this.windowStage = windowStage;
  }
  getWindowStage(): window.WindowStage | undefined {
    return this.windowStage
  }
  /**
   * 当前主窗口是否开启沉浸模式
   * @param enable 是否开启
   * @returns {void}
   */
  setMainWindowImmersive(enable: boolean, properties?: window.SystemBarProperties): void {
    if (this.windowStage === undefined) {
      console.error('windowStage is undefined.');
      return;
    }
    // 1.获取应用主窗口。
    let windowClass: window.Window | null = null;
    this.windowStage.getMainWindow((err: BusinessError, data) => {
      let errCode: number = err.code;
      if (errCode) {
        console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));
        return;
      }
      windowClass = data;
      console.info('Succeeded in obtaining the main window data.');
      // 2.实现沉浸式效果。方式二：设置窗口为全屏布局，配合设置导航栏、状态栏的透明度、背景/文字颜色及高亮图标等属性，与主窗口显示保持协调一致。
      windowClass.setWindowLayoutFullScreen(enable, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the window layout to full-screen mode.');
      });
      const p = properties ? properties : this.DEFAULT
      windowClass.setWindowSystemBarProperties(p, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the system bar properties.');
      });
    })
  }
  /**
   * 软键盘是否显示/隐藏
   * @param callback
   */
  getKeyBoardVisible(callback: (visible: boolean) => void) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      // 监听软键盘的隐藏和显示
      currentWindow.on('avoidAreaChange', data => {
        if (data.type == window.AvoidAreaType.TYPE_KEYBOARD) {
          const keyBoardHeight = px2vp(data.area.bottomRect.height);
          if (keyBoardHeight > 0) {
            callback(true)
          } else {
            callback(false)
          }
        }
      })
    })
  }
}
import dataPreferences from '@ohos.data.preferences';
import preferences from '@ohos.data.preferences';
import { HashMap } from '@kit.ArkTS';
import { common } from '@kit.AbilityKit';
import { GlobalContext } from './GlobalContext';
import { BusinessError } from '@kit.BasicServicesKit';
class Storage{
  private name: string = 'app_storage'
  private preferences: dataPreferences.Preferences | null = null
  private listenerKeyMap = new HashMap<string, HashMap<string, Callback<string>>>()
  constructor(name: string) {
    this.name = name;
  }
  initStorage() {
    const context = GlobalContext.getContext().getObject('context') as common.UIAbilityContext
    const options: dataPreferences.Options = { name: this.name }
    this.preferences = dataPreferences.getPreferencesSync(context, options)
    this.preferences?.on('change', (key: string) => {
      const pageMap = this.listenerKeyMap.get(key)
      pageMap?.forEach((callBack: Callback<string>) => {
        callBack(key)
      })
    })
  }
  /**
   * 存储key,value到preference缓存里面
   * @param key
   * @param value
   */
  saveValueSync(key: string, value: preferences.ValueType) {
    this.preferences?.putSync(key, value)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 根据key删除值
   * @param key
   */
  deleteValueSync(key: string) {
    this.preferences?.deleteSync(key)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns string
   */
  getStringValueSync(key: string, defaultValue: string) {
    return this.preferences?.getSync(key, defaultValue) as string
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns Array<string>
   */
  getArrayStringValueSync(key: string, defaultValue: Array<string>) {
    return this.preferences?.getSync(key, defaultValue) as Array<string>
  }
}
export const commonStorage = new Storage('common_storage')
export function initDataPreference() {
  commonStorage.initStorage()
}
// 与EntryAbility交互，获取ability当前的数据
export class GlobalContext {
  static readonly CONTEXT = 'context';
  static readonly WANT = 'want';
  //状态栏高度
  static readonly STATUS_BAR_HEIGHT = 'statusBarHeight';
  //导航栏高度
  static readonly NAVIGATION_HEIGHT = 'navigationHeight';
  private constructor() { }
  private static instance: GlobalContext;
  private _objects = new Map<string, Object>();
  public static getContext(): GlobalContext {
    if (!GlobalContext.instance) {
      GlobalContext.instance = new GlobalContext();
    }
    return GlobalContext.instance;
  }
  getObject(value: string): Object | undefined {
    return this._objects.get(value);
  }
  setObject(key: string, objectClass: Object): void {
    this._objects.set(key, objectClass);
  }
}
//封装一个函数：简化时间格式
export const formatDate = (dateStr:string)=>{
  const date = new Date(dateStr)
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "module description"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "charge"
    },
    {
      "name": "scan",
      "value": "scan"
    },
    {
      "name": "mine",
      "value": "mine"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "Welcome to log in to the Groundhog charging platform"
    },
    {
      "name": "please_select_the_tenant",
      "value": "Please select the tenant"
    },
    {
      "name": "please_enter_the_username",
      "value": "Please enter the username"
    },
    {
      "name": "please_enter_the_password",
      "value": "Please enter your password"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "Please enter the verification code"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "Please enter the company name"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "Please enter the company website"
    },
    {
      "name": "login",
      "value": "Login"
    },
    {
      "name": "no_account",
      "value": "No account?"
    },
    {
      "name": "register",
      "value": "Register"
    },
    {
      "name": "login_in",
      "value": "login in"
    },
    {
      "name": "existing_account",
      "value": "existing account?"
    },
    {
      "name": "register_immediately",
      "value": "register immediately"
    },
    {
      "name": "company_website",
      "value": "The company 's website, such as www.example.com"
    },
    {
      "name": "company_name",
      "value": "company name"
    },
    {
      "name": "password_length",
      "value": "Password: At least 5 characters in length"
    },
    {
      "name": "get_code",
      "value": "get code"
    },
    {
      "name": "verification_code",
      "value": "Verification code :666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "Welcome to register on the Groundhog charging platform"
    },
    {
      "name": "search_content",
      "value": "Please enter the search content"
    },
    {
      "name": "search",
      "value": "search"
    },
    {
      "name": "no_data",
      "value": "no data"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "Selection of charging pile"
    },
    {
      "name": "fast_charge",
      "value": "fast charge"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "national standard"
    },
    {
      "name": "idle",
      "value": "Idle"
    },
    {
      "name": "faults",
      "value": "Faults"
    },
    {
      "name": "charging_in_progress",
      "value": "Charging in progress"
    },
    {
      "name": "pile_number",
      "value": "Pile_number:"
    },
    {
      "name": "station_name",
      "value": "Station name:"
    },
    {
      "name": "agreement",
      "value": "agreement"
    },
    {
      "name": "certification",
      "value": "certification"
    },
    {
      "name": "feat",
      "value": "feat"
    },
    {
      "name": "message",
      "value": "message"
    },
    {
      "name": "person",
      "value": "person"
    },
    {
      "name": "rule",
      "value": "rule"
    },
    {
      "name": "order",
      "value": "order"
    },
    {
      "name": "service",
      "value": "service"
    },
    {
      "name": "there_is_no_more_data",
      "value": "There is no more data"
    },
    {
      "name": "loading",
      "value": "loading..."
    },
    {
      "name": "completed",
      "value": "Completed"
    },
    {
      "name": "pile_code",
      "value": "Pile code:"
    },
    {
      "name": "charge_name",
      "value": "Charge name:"
    },
    {
      "name": "price",
      "value": "Price:"
    },
    {
      "name": "order_status",
      "value": "Order status:"
    },
    {
      "name": "start_time",
      "value": "Start time:"
    },
    {
      "name": "end_time",
      "value": "End time:"
    },
    {
      "name": "stop_charge",
      "value": "Stop charging"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
import display from '@ohos.display';
import { GlobalContext } from '.';
import window from '@ohos.window';
import common from '@ohos.app.ability.common';
import { StorageConst } from '../manager';
export class ScreenUtils {
  private static instance: ScreenUtils;
  setWindow(windowInfo: window.Window) {
    // 获取窗口属性
    const properties = windowInfo.getWindowProperties();
    this.setScreen(properties.windowRect.width, properties.windowRect.height)
    windowInfo.on("windowSizeChange", (size: Size) => {
      this.setScreen(size.width, size.height)
    })
  }
  private constructor() {
    this.defaultDisplay = display.getDefaultDisplaySync()
    this.defaultDisplay.getCutoutInfo((e, data) => {
      this.cutoutInfo = data
    })
    let callback: Callback<display.FoldDisplayMode> = (data: display.FoldDisplayMode) => {
      this.setFoldDisplayMode(data)
    };
    display.on("foldDisplayModeChange", callback)
  }
  private setScreen(width: number, height: number) {
    AppStorage.setOrCreate(StorageConst.SCREEN_WIDTH_VP, px2vp(width));
    AppStorage.setOrCreate(StorageConst.SCREEN_HEIGHT_VP, px2vp(height));
  }
  private setFoldDisplayMode(data: display.FoldDisplayMode) {
    AppStorage.setOrCreate(StorageConst.FOLD_DISPLAY_MODE, data);
  }
  public static getInstance(): ScreenUtils {
    if (!ScreenUtils.instance) {
      ScreenUtils.instance = new ScreenUtils();
    }
    return ScreenUtils.instance;
  }
  //屏幕数据
  private defaultDisplay: display.Display | null = null
  //挖孔屏状态栏区域
  private cutoutInfo: display.CutoutInfo | null = null
  getDisplay(): display.Display | null {
    return this.defaultDisplay
  }
  getScreenWidthPx(): number {
    return this.defaultDisplay?.width ?? -1
  }
  getScreenHeightPx(): number {
    return this.defaultDisplay?.height ?? -1
  }
  getScreenContentHeightPX(): number {
    return vp2px(this.getScreenHeightVp() - this.getStatusBarHeight())
  }
  getScreenContentHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenWidthVp(): number {
    return px2vp(this.getScreenWidthPx())
  }
  /**
   * 获取刘海屏状态栏最大的区域
   * @returns
   */
  getStatusBarHeight(): number {
    const statusBar = GlobalContext.getContext().getObject(GlobalContext.STATUS_BAR_HEIGHT) as number;
    return px2vp(statusBar)
  }
  // 底部安全距离
  getSafeBottomHeight() {
    const navigation = GlobalContext.getContext().getObject(GlobalContext.NAVIGATION_HEIGHT) as number;
    return px2vp(navigation)
  }
  /**
   * 获取底部导航栏的高度
   * @returns
   */
  async getBottomNavBarHeight(context: common.BaseContext): Promise<number> {
    const win = await window.getLastWindow(context)
    return px2vp(win.getWindowAvoidArea(window.AvoidAreaType.TYPE_NAVIGATION_INDICATOR).bottomRect.height)
  }
  async getStatusBarColor(): Promise<string> {
    const currentWindow = await window.getLastWindow(getContext(this))
    return currentWindow.getWindowSystemBarProperties().statusBarColor ?? '#000000'
  }
  // 改变状态栏文字颜色
  updateStatusBarColor(isBlack: boolean) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      currentWindow.setWindowSystemBarProperties({ statusBarContentColor: isBlack ? '#000000' : '#ffffff' })
    })
  }
  // 检查设备是否可折叠
  isFoldable() {
    return display.isFoldable()
  }
  // 设备当前折叠状态是否为为完全展开
  isFoldExpanded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_EXPANDED
  }
  // 设备当前折叠状态是否为为半折叠
  isFoldHalfFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_HALF_FOLDED
  }
  // 设备当前折叠状态为是否为折叠
  isFoldFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_FOLDED
  }
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    },
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
{
  "float": [
    {
      "name": "size_1",
      "value": "1vp"
    },
    {
      "name": "size_2",
      "value": "2vp"
    },
    {
      "name": "size_3",
      "value": "3vp"
    },
    {
      "name": "size_4",
      "value": "4vp"
    },
    {
      "name": "size_5",
      "value": "5vp"
    },
    {
      "name": "size_6",
      "value": "6vp"
    },
    {
      "name": "size_7",
      "value": "7vp"
    },
    {
      "name": "size_8",
      "value": "8vp"
    },
    {
      "name": "size_9",
      "value": "9vp"
    },
    {
      "name": "size_10",
      "value": "10vp"
    },
    {
      "name": "size_11",
      "value": "11vp"
    },
    {
      "name": "size_12",
      "value": "12vp"
    },
    {
      "name": "size_13",
      "value": "13vp"
    },
    {
      "name": "size_14",
      "value": "14vp"
    },
    {
      "name": "size_15",
      "value": "15vp"
    },
    {
      "name": "size_16",
      "value": "16vp"
    },
    {
      "name": "size_17",
      "value": "17vp"
    },
    {
      "name": "size_18",
      "value": "18vp"
    },
    {
      "name": "size_19",
      "value": "19vp"
    },
    {
      "name": "size_20",
      "value": "20vp"
    },
    {
      "name": "size_21",
      "value": "21vp"
    },
    {
      "name": "size_22",
      "value": "22vp"
    },
    {
      "name": "size_23",
      "value": "23vp"
    },
    {
      "name": "size_24",
      "value": "24vp"
    },
    {
      "name": "size_25",
      "value": "25vp"
    },
    {
      "name": "size_26",
      "value": "26vp"
    },
    {
      "name": "size_27",
      "value": "27vp"
    },
    {
      "name": "size_28",
      "value": "28vp"
    },
    {
      "name": "size_29",
      "value": "29vp"
    },
    {
      "name": "size_30",
      "value": "30vp"
    },
    {
      "name": "size_31",
      "value": "31vp"
    },
    {
      "name": "size_32",
      "value": "32vp"
    },
    {
      "name": "size_33",
      "value": "33vp"
    },
    {
      "name": "size_34",
      "value": "34vp"
    },
    {
      "name": "size_35",
      "value": "35vp"
    },
    {
      "name": "size_36",
      "value": "36vp"
    },
    {
      "name": "size_37",
      "value": "37vp"
    },
    {
      "name": "size_38",
      "value": "38vp"
    },
    {
      "name": "size_39",
      "value": "39vp"
    },
    {
      "name": "size_40",
      "value": "40vp"
    },
    {
      "name": "size_41",
      "value": "41vp"
    },
    {
      "name": "size_42",
      "value": "42vp"
    },
    {
      "name": "size_43",
      "value": "43vp"
    },
    {
      "name": "size_44",
      "value": "44vp"
    },
    {
      "name": "size_45",
      "value": "45vp"
    },
    {
      "name": "size_46",
      "value": "46vp"
    },
    {
      "name": "size_47",
      "value": "47vp"
    },
    {
      "name": "size_48",
      "value": "48vp"
    },
    {
      "name": "size_49",
      "value": "49vp"
    },
    {
      "name": "size_50",
      "value": "50vp"
    },
    {
      "name": "size_51",
      "value": "51vp"
    },
    {
      "name": "size_52",
      "value": "52vp"
    },
    {
      "name": "size_53",
      "value": "53vp"
    },
    {
      "name": "size_54",
      "value": "54vp"
    },
    {
      "name": "size_55",
      "value": "55vp"
    },
    {
      "name": "size_56",
      "value": "56vp"
    },
    {
      "name": "size_57",
      "value": "57vp"
    },
    {
      "name": "size_58",
      "value": "58vp"
    },
    {
      "name": "size_59",
      "value": "59vp"
    },
    {
      "name": "size_60",
      "value": "60vp"
    },
    {
      "name": "size_61",
      "value": "61vp"
    },
    {
      "name": "size_62",
      "value": "62vp"
    },
    {
      "name": "size_63",
      "value": "63vp"
    },
    {
      "name": "size_64",
      "value": "64vp"
    },
    {
      "name": "size_65",
      "value": "65vp"
    },
    {
      "name": "size_66",
      "value": "66vp"
    },
    {
      "name": "size_67",
      "value": "67vp"
    },
    {
      "name": "size_68",
      "value": "68vp"
    },
    {
      "name": "size_69",
      "value": "69vp"
    },
    {
      "name": "size_70",
      "value": "70vp"
    },
    {
      "name": "size_71",
      "value": "71vp"
    },
    {
      "name": "size_72",
      "value": "72vp"
    },
    {
      "name": "size_73",
      "value": "73vp"
    },
    {
      "name": "size_74",
      "value": "74vp"
    },
    {
      "name": "size_75",
      "value": "75vp"
    },
    {
      "name": "size_76",
      "value": "76vp"
    },
    {
      "name": "size_77",
      "value": "77vp"
    },
    {
      "name": "size_78",
      "value": "78vp"
    },
    {
      "name": "size_79",
      "value": "79vp"
    },
    {
      "name": "size_80",
      "value": "80vp"
    },
    {
      "name": "size_81",
      "value": "81vp"
    },
    {
      "name": "size_82",
      "value": "82vp"
    },
    {
      "name": "size_83",
      "value": "83vp"
    },
    {
      "name": "size_84",
      "value": "84vp"
    },
    {
      "name": "size_85",
      "value": "85vp"
    },
    {
      "name": "size_86",
      "value": "86vp"
    },
    {
      "name": "size_87",
      "value": "87vp"
    },
    {
      "name": "size_88",
      "value": "88vp"
    },
    {
      "name": "size_89",
      "value": "89vp"
    },
    {
      "name": "size_90",
      "value": "90vp"
    },
    {
      "name": "size_91",
      "value": "91vp"
    },
    {
      "name": "size_92",
      "value": "92vp"
    },
    {
      "name": "size_93",
      "value": "93vp"
    },
    {
      "name": "size_94",
      "value": "94vp"
    },
    {
      "name": "size_95",
      "value": "95vp"
    },
    {
      "name": "size_96",
      "value": "96vp"
    },
    {
      "name": "size_97",
      "value": "97vp"
    },
    {
      "name": "size_98",
      "value": "98vp"
    },
    {
      "name": "size_99",
      "value": "99vp"
    },
    {
      "name": "size_100",
      "value": "100vp"
    },
    {
      "name": "size_101",
      "value": "101vp"
    },
    {
      "name": "size_102",
      "value": "102vp"
    },
    {
      "name": "size_103",
      "value": "103vp"
    },
    {
      "name": "size_104",
      "value": "104vp"
    },
    {
      "name": "size_105",
      "value": "105vp"
    },
    {
      "name": "size_106",
      "value": "106vp"
    },
    {
      "name": "size_107",
      "value": "107vp"
    },
    {
      "name": "size_108",
      "value": "108vp"
    },
    {
      "name": "size_109",
      "value": "109vp"
    },
    {
      "name": "size_110",
      "value": "110vp"
    },
    {
      "name": "size_111",
      "value": "111vp"
    },
    {
      "name": "size_112",
      "value": "112vp"
    },
    {
      "name": "size_113",
      "value": "113vp"
    },
    {
      "name": "size_114",
      "value": "114vp"
    },
    {
      "name": "size_115",
      "value": "115vp"
    },
    {
      "name": "size_116",
      "value": "116vp"
    },
    {
      "name": "size_117",
      "value": "117vp"
    },
    {
      "name": "size_118",
      "value": "118vp"
    },
    {
      "name": "size_119",
      "value": "119vp"
    },
    {
      "name": "size_120",
      "value": "120vp"
    },
    {
      "name": "size_121",
      "value": "121vp"
    },
    {
      "name": "size_122",
      "value": "122vp"
    },
    {
      "name": "size_123",
      "value": "123vp"
    },
    {
      "name": "size_124",
      "value": "124vp"
    },
    {
      "name": "size_125",
      "value": "125vp"
    },
    {
      "name": "size_126",
      "value": "126vp"
    },
    {
      "name": "size_127",
      "value": "127vp"
    },
    {
      "name": "size_128",
      "value": "128vp"
    },
    {
      "name": "size_129",
      "value": "129vp"
    },
    {
      "name": "size_130",
      "value": "130vp"
    },
    {
      "name": "size_131",
      "value": "131vp"
    },
    {
      "name": "size_132",
      "value": "132vp"
    },
    {
      "name": "size_133",
      "value": "133vp"
    },
    {
      "name": "size_134",
      "value": "134vp"
    },
    {
      "name": "size_135",
      "value": "135vp"
    },
    {
      "name": "size_136",
      "value": "136vp"
    },
    {
      "name": "size_137",
      "value": "137vp"
    },
    {
      "name": "size_138",
      "value": "138vp"
    },
    {
      "name": "size_139",
      "value": "139vp"
    },
    {
      "name": "size_140",
      "value": "140vp"
    },
    {
      "name": "size_141",
      "value": "141vp"
    },
    {
      "name": "size_142",
      "value": "142vp"
    },
    {
      "name": "size_143",
      "value": "143vp"
    },
    {
      "name": "size_144",
      "value": "144vp"
    },
    {
      "name": "size_145",
      "value": "145vp"
    },
    {
      "name": "size_146",
      "value": "146vp"
    },
    {
      "name": "size_147",
      "value": "147vp"
    },
    {
      "name": "size_148",
      "value": "148vp"
    },
    {
      "name": "size_149",
      "value": "149vp"
    },
    {
      "name": "size_150",
      "value": "150vp"
    },
    {
      "name": "size_151",
      "value": "151vp"
    },
    {
      "name": "size_152",
      "value": "152vp"
    },
    {
      "name": "size_153",
      "value": "153vp"
    },
    {
      "name": "size_154",
      "value": "154vp"
    },
    {
      "name": "size_155",
      "value": "155vp"
    },
    {
      "name": "size_156",
      "value": "156vp"
    },
    {
      "name": "size_157",
      "value": "157vp"
    },
    {
      "name": "size_158",
      "value": "158vp"
    },
    {
      "name": "size_159",
      "value": "159vp"
    },
    {
      "name": "size_160",
      "value": "160vp"
    },
    {
      "name": "size_161",
      "value": "161vp"
    },
    {
      "name": "size_162",
      "value": "162vp"
    },
    {
      "name": "size_163",
      "value": "163vp"
    },
    {
      "name": "size_164",
      "value": "164vp"
    },
    {
      "name": "size_165",
      "value": "165vp"
    },
    {
      "name": "size_166",
      "value": "166vp"
    },
    {
      "name": "size_167",
      "value": "167vp"
    },
    {
      "name": "size_168",
      "value": "168vp"
    },
    {
      "name": "size_169",
      "value": "169vp"
    },
    {
      "name": "size_170",
      "value": "170vp"
    },
    {
      "name": "size_171",
      "value": "171vp"
    },
    {
      "name": "size_172",
      "value": "172vp"
    },
    {
      "name": "size_173",
      "value": "173vp"
    },
    {
      "name": "size_174",
      "value": "174vp"
    },
    {
      "name": "size_175",
      "value": "175vp"
    },
    {
      "name": "size_176",
      "value": "176vp"
    },
    {
      "name": "size_177",
      "value": "177vp"
    },
    {
      "name": "size_178",
      "value": "178vp"
    },
    {
      "name": "size_179",
      "value": "179vp"
    },
    {
      "name": "size_180",
      "value": "180vp"
    },
    {
      "name": "size_181",
      "value": "181vp"
    },
    {
      "name": "size_182",
      "value": "182vp"
    },
    {
      "name": "size_183",
      "value": "183vp"
    },
    {
      "name": "size_184",
      "value": "184vp"
    },
    {
      "name": "size_185",
      "value": "185vp"
    },
    {
      "name": "size_186",
      "value": "186vp"
    },
    {
      "name": "size_187",
      "value": "187vp"
    },
    {
      "name": "size_188",
      "value": "188vp"
    },
    {
      "name": "size_189",
      "value": "189vp"
    },
    {
      "name": "size_190",
      "value": "190vp"
    },
    {
      "name": "size_191",
      "value": "191vp"
    },
    {
      "name": "size_192",
      "value": "192vp"
    },
    {
      "name": "size_193",
      "value": "193vp"
    },
    {
      "name": "size_194",
      "value": "194vp"
    },
    {
      "name": "size_195",
      "value": "195vp"
    },
    {
      "name": "size_196",
      "value": "196vp"
    },
    {
      "name": "size_197",
      "value": "197vp"
    },
    {
      "name": "size_198",
      "value": "198vp"
    },
    {
      "name": "size_199",
      "value": "199vp"
    },
    {
      "name": "size_200",
      "value": "200vp"
    },
    {
      "name": "size_201",
      "value": "201vp"
    },
    {
      "name": "size_202",
      "value": "202vp"
    },
    {
      "name": "size_203",
      "value": "203vp"
    },
    {
      "name": "size_204",
      "value": "204vp"
    },
    {
      "name": "size_205",
      "value": "205vp"
    },
    {
      "name": "size_206",
      "value": "206vp"
    },
    {
      "name": "size_207",
      "value": "207vp"
    },
    {
      "name": "size_208",
      "value": "208vp"
    },
    {
      "name": "size_209",
      "value": "209vp"
    },
    {
      "name": "size_210",
      "value": "210vp"
    },
    {
      "name": "size_211",
      "value": "211vp"
    },
    {
      "name": "size_212",
      "value": "212vp"
    },
    {
      "name": "size_213",
      "value": "213vp"
    },
    {
      "name": "size_214",
      "value": "214vp"
    },
    {
      "name": "size_215",
      "value": "215vp"
    },
    {
      "name": "size_216",
      "value": "216vp"
    },
    {
      "name": "size_217",
      "value": "217vp"
    },
    {
      "name": "size_218",
      "value": "218vp"
    },
    {
      "name": "size_219",
      "value": "219vp"
    },
    {
      "name": "size_220",
      "value": "220vp"
    },
    {
      "name": "size_221",
      "value": "221vp"
    },
    {
      "name": "size_222",
      "value": "222vp"
    },
    {
      "name": "size_223",
      "value": "223vp"
    },
    {
      "name": "size_224",
      "value": "224vp"
    },
    {
      "name": "size_225",
      "value": "225vp"
    },
    {
      "name": "size_226",
      "value": "226vp"
    },
    {
      "name": "size_227",
      "value": "227vp"
    },
    {
      "name": "size_228",
      "value": "228vp"
    },
    {
      "name": "size_229",
      "value": "229vp"
    },
    {
      "name": "size_230",
      "value": "230vp"
    },
    {
      "name": "size_231",
      "value": "231vp"
    },
    {
      "name": "size_232",
      "value": "232vp"
    },
    {
      "name": "size_233",
      "value": "233vp"
    },
    {
      "name": "size_234",
      "value": "234vp"
    },
    {
      "name": "size_235",
      "value": "235vp"
    },
    {
      "name": "size_236",
      "value": "236vp"
    },
    {
      "name": "size_237",
      "value": "237vp"
    },
    {
      "name": "size_238",
      "value": "238vp"
    },
    {
      "name": "size_239",
      "value": "239vp"
    },
    {
      "name": "size_240",
      "value": "240vp"
    },
    {
      "name": "size_241",
      "value": "241vp"
    },
    {
      "name": "size_242",
      "value": "242vp"
    },
    {
      "name": "size_243",
      "value": "243vp"
    },
    {
      "name": "size_244",
      "value": "244vp"
    },
    {
      "name": "size_245",
      "value": "245vp"
    },
    {
      "name": "size_246",
      "value": "246vp"
    },
    {
      "name": "size_247",
      "value": "247vp"
    },
    {
      "name": "size_248",
      "value": "248vp"
    },
    {
      "name": "size_249",
      "value": "249vp"
    },
    {
      "name": "size_250",
      "value": "250vp"
    },
    {
      "name": "size_251",
      "value": "251vp"
    },
    {
      "name": "size_252",
      "value": "252vp"
    },
    {
      "name": "size_253",
      "value": "253vp"
    },
    {
      "name": "size_254",
      "value": "254vp"
    },
    {
      "name": "size_255",
      "value": "255vp"
    },
    {
      "name": "size_256",
      "value": "256vp"
    },
    {
      "name": "size_257",
      "value": "257vp"
    },
    {
      "name": "size_258",
      "value": "258vp"
    },
    {
      "name": "size_259",
      "value": "259vp"
    },
    {
      "name": "size_260",
      "value": "260vp"
    },
    {
      "name": "size_261",
      "value": "261vp"
    },
    {
      "name": "size_262",
      "value": "262vp"
    },
    {
      "name": "size_263",
      "value": "263vp"
    },
    {
      "name": "size_264",
      "value": "264vp"
    },
    {
      "name": "size_265",
      "value": "265vp"
    },
    {
      "name": "size_266",
      "value": "266vp"
    },
    {
      "name": "size_267",
      "value": "267vp"
    },
    {
      "name": "size_268",
      "value": "268vp"
    },
    {
      "name": "size_269",
      "value": "269vp"
    },
    {
      "name": "size_270",
      "value": "270vp"
    },
    {
      "name": "size_271",
      "value": "271vp"
    },
    {
      "name": "size_272",
      "value": "272vp"
    },
    {
      "name": "size_273",
      "value": "273vp"
    },
    {
      "name": "size_274",
      "value": "274vp"
    },
    {
      "name": "size_275",
      "value": "275vp"
    },
    {
      "name": "size_276",
      "value": "276vp"
    },
    {
      "name": "size_277",
      "value": "277vp"
    },
    {
      "name": "size_278",
      "value": "278vp"
    },
    {
      "name": "size_279",
      "value": "279vp"
    },
    {
      "name": "size_280",
      "value": "280vp"
    },
    {
      "name": "size_281",
      "value": "281vp"
    },
    {
      "name": "size_282",
      "value": "282vp"
    },
    {
      "name": "size_283",
      "value": "283vp"
    },
    {
      "name": "size_284",
      "value": "284vp"
    },
    {
      "name": "size_285",
      "value": "285vp"
    },
    {
      "name": "size_286",
      "value": "286vp"
    },
    {
      "name": "size_287",
      "value": "287vp"
    },
    {
      "name": "size_288",
      "value": "288vp"
    },
    {
      "name": "size_289",
      "value": "289vp"
    },
    {
      "name": "size_290",
      "value": "290vp"
    },
    {
      "name": "size_291",
      "value": "291vp"
    },
    {
      "name": "size_292",
      "value": "292vp"
    },
    {
      "name": "size_293",
      "value": "293vp"
    },
    {
      "name": "size_294",
      "value": "294vp"
    },
    {
      "name": "size_295",
      "value": "295vp"
    },
    {
      "name": "size_296",
      "value": "296vp"
    },
    {
      "name": "size_297",
      "value": "297vp"
    },
    {
      "name": "size_298",
      "value": "298vp"
    },
    {
      "name": "size_299",
      "value": "299vp"
    },
    {
      "name": "size_300",
      "value": "300vp"
    },
    {
      "name": "size_text_1",
      "value": "1fp"
    },
    {
      "name": "size_text_2",
      "value": "2fp"
    },
    {
      "name": "size_text_3",
      "value": "3fp"
    },
    {
      "name": "size_text_4",
      "value": "4fp"
    },
    {
      "name": "size_text_5",
      "value": "5fp"
    },
    {
      "name": "size_text_6",
      "value": "6fp"
    },
    {
      "name": "size_text_7",
      "value": "7fp"
    },
    {
      "name": "size_text_8",
      "value": "8fp"
    },
    {
      "name": "size_text_9",
      "value": "9fp"
    },
    {
      "name": "size_text_10",
      "value": "10fp"
    },
    {
      "name": "size_text_11",
      "value": "11fp"
    },
    {
      "name": "size_text_12",
      "value": "12fp"
    },
    {
      "name": "size_text_13",
      "value": "13fp"
    },
    {
      "name": "size_text_14",
      "value": "14fp"
    },
    {
      "name": "size_text_15",
      "value": "15fp"
    },
    {
      "name": "size_text_16",
      "value": "16fp"
    },
    {
      "name": "size_text_17",
      "value": "17fp"
    },
    {
      "name": "size_text_18",
      "value": "18fp"
    },
    {
      "name": "size_text_19",
      "value": "19fp"
    },
    {
      "name": "size_text_20",
      "value": "20fp"
    },
    {
      "name": "size_text_21",
      "value": "21fp"
    },
    {
      "name": "size_text_22",
      "value": "22fp"
    },
    {
      "name": "size_text_23",
      "value": "23fp"
    },
    {
      "name": "size_text_24",
      "value": "24fp"
    },
    {
      "name": "size_text_25",
      "value": "25fp"
    },
    {
      "name": "size_text_26",
      "value": "26fp"
    },
    {
      "name": "size_text_27",
      "value": "27fp"
    },
    {
      "name": "size_text_28",
      "value": "28fp"
    },
    {
      "name": "size_text_29",
      "value": "29fp"
    },
    {
      "name": "size_text_30",
      "value": "30fp"
    },
    {
      "name": "size_text_31",
      "value": "31fp"
    },
    {
      "name": "size_text_32",
      "value": "32fp"
    },
    {
      "name": "size_text_33",
      "value": "33fp"
    },
    {
      "name": "size_text_34",
      "value": "34fp"
    },
    {
      "name": "size_text_35",
      "value": "35fp"
    },
    {
      "name": "size_text_36",
      "value": "36fp"
    },
    {
      "name": "size_text_37",
      "value": "37fp"
    },
    {
      "name": "size_text_38",
      "value": "38fp"
    },
    {
      "name": "size_text_39",
      "value": "39fp"
    },
    {
      "name": "size_text_40",
      "value": "40fp"
    },
    {
      "name": "size_text_41",
      "value": "41fp"
    },
    {
      "name": "size_text_42",
      "value": "42fp"
    },
    {
      "name": "size_text_43",
      "value": "43fp"
    },
    {
      "name": "size_text_44",
      "value": "44fp"
    },
    {
      "name": "size_text_45",
      "value": "45fp"
    },
    {
      "name": "size_text_46",
      "value": "46fp"
    },
    {
      "name": "size_text_47",
      "value": "47fp"
    },
    {
      "name": "size_text_48",
      "value": "48fp"
    },
    {
      "name": "size_text_49",
      "value": "49fp"
    },
    {
      "name": "size_text_50",
      "value": "50fp"
    },
    {
      "name": "size_text_51",
      "value": "51fp"
    },
    {
      "name": "size_text_52",
      "value": "52fp"
    },
    {
      "name": "size_text_53",
      "value": "53fp"
    },
    {
      "name": "size_text_54",
      "value": "54fp"
    },
    {
      "name": "size_text_55",
      "value": "55fp"
    },
    {
      "name": "size_text_56",
      "value": "56fp"
    },
    {
      "name": "size_text_57",
      "value": "57fp"
    },
    {
      "name": "size_text_58",
      "value": "58fp"
    },
    {
      "name": "size_text_59",
      "value": "59fp"
    },
    {
      "name": "size_text_60",
      "value": "60fp"
    },
    {
      "name": "size_text_61",
      "value": "61fp"
    },
    {
      "name": "size_text_62",
      "value": "62fp"
    },
    {
      "name": "size_text_63",
      "value": "63fp"
    },
    {
      "name": "size_text_64",
      "value": "64fp"
    },
    {
      "name": "size_text_65",
      "value": "65fp"
    },
    {
      "name": "size_text_66",
      "value": "66fp"
    },
    {
      "name": "size_text_67",
      "value": "67fp"
    },
    {
      "name": "size_text_68",
      "value": "68fp"
    },
    {
      "name": "size_text_69",
      "value": "69fp"
    },
    {
      "name": "size_text_70",
      "value": "70fp"
    },
    {
      "name": "size_text_71",
      "value": "71fp"
    },
    {
      "name": "size_text_72",
      "value": "72fp"
    },
    {
      "name": "size_text_73",
      "value": "73fp"
    },
    {
      "name": "size_text_74",
      "value": "74fp"
    },
    {
      "name": "size_text_75",
      "value": "75fp"
    },
    {
      "name": "size_text_76",
      "value": "76fp"
    },
    {
      "name": "size_text_77",
      "value": "77fp"
    },
    {
      "name": "size_text_78",
      "value": "78fp"
    },
    {
      "name": "size_text_79",
      "value": "79fp"
    },
    {
      "name": "size_text_80",
      "value": "80fp"
    },
    {
      "name": "size_text_81",
      "value": "81fp"
    },
    {
      "name": "size_text_82",
      "value": "82fp"
    },
    {
      "name": "size_text_83",
      "value": "83fp"
    },
    {
      "name": "size_text_84",
      "value": "84fp"
    },
    {
      "name": "size_text_85",
      "value": "85fp"
    },
    {
      "name": "size_text_86",
      "value": "86fp"
    },
    {
      "name": "size_text_87",
      "value": "87fp"
    },
    {
      "name": "size_text_88",
      "value": "88fp"
    },
    {
      "name": "size_text_89",
      "value": "89fp"
    },
    {
      "name": "size_text_90",
      "value": "90fp"
    },
    {
      "name": "size_text_91",
      "value": "91fp"
    },
    {
      "name": "size_text_92",
      "value": "92fp"
    },
    {
      "name": "size_text_93",
      "value": "93fp"
    },
    {
      "name": "size_text_94",
      "value": "94fp"
    },
    {
      "name": "size_text_95",
      "value": "95fp"
    },
    {
      "name": "size_text_96",
      "value": "96fp"
    },
    {
      "name": "size_text_97",
      "value": "97fp"
    },
    {
      "name": "size_text_98",
      "value": "98fp"
    },
    {
      "name": "size_text_99",
      "value": "99fp"
    },
    {
      "name": "size_text_100",
      "value": "100fp"
    }
  ]
}
{
  "color": [
    {
      "name": "color_0aa671",
      "value": "#0aa671"
    },
    {
      "name": "start_window_background",
      "value": "#FFFFFF"
    },
    {
      "name": "color_0165b8",
      "value": "#0165b8"
    },
    {
      "name": "color_182431",
      "value": "#182431"
    },
    {
      "name": "color_efefef",
      "value": "#EFEFEF"
    },
    {
      "name": "color_f5f5f5",
      "value": "#F5F5F5"
    },
    {
      "name": "color_adadb3",
      "value": "#adadb3"
    },
    {
      "name": "color_fff",
      "value": "#fff"
    },
    {
      "name": "color_898e92",
      "value": "#898e92"
    },
    {
      "name": "color_0165B8",
      "value": "#0165B8"
    },
    {
      "name": "color_f0f2f4",
      "value": "#f0f2f4"
    },
    {
      "name": "color_80000000",
      "value": "#80000000"
    },
    {
      "name": "color_009688",
      "value": "#009688"
    },
    {
      "name": "color_d68751",
      "value": "#d68751"
    },
    {
      "name": "color_F44336",
      "value": "#F44336"
    },
    {
      "name": "color_666",
      "value": "#666"
    },
    {
      "name": "color_999",
      "value": "#999"
    }
  ]
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
{
  "name": "entry",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "",
  "author": "",
  "license": "",
  "dependencies": {
    "@tbs/common": "file:../common",
    "@tbs/charge": "file:../feature/charge",
    "@tbs/mine": "file:../feature/mine",
    "@tbs/scan": "file:../feature/scan"
  }
}
{
  "meta": {
    "stableOrder": true
  },
  "lockfileVersion": 3,
  "ATTENTION": "THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.",
  "specifiers": {
    "@tbs/charge@../feature/charge": "@tbs/charge@../feature/charge",
    "@tbs/common@../common": "@tbs/common@../common",
    "@tbs/mine@../feature/mine": "@tbs/mine@../feature/mine",
    "@tbs/scan@../feature/scan": "@tbs/scan@../feature/scan"
  },
  "packages": {
    "@tbs/charge@../feature/charge": {
      "name": "@tbs/charge",
      "version": "1.0.0",
      "resolved": "../feature/charge",
      "registryType": "local",
      "dependencies": {
        "@tbs/common": "file:../../common"
      }
    },
    "@tbs/common@../common": {
      "name": "@tbs/common",
      "version": "1.0.0",
      "resolved": "../common",
      "registryType": "local"
    },
    "@tbs/mine@../feature/mine": {
      "name": "@tbs/mine",
      "version": "1.0.0",
      "resolved": "../feature/mine",
      "registryType": "local",
      "dependencies": {
        "@tbs/common": "file:../../common",
        "@tbs/charge": "file:../charge"
      }
    },
    "@tbs/scan@../feature/scan": {
      "name": "@tbs/scan",
      "version": "1.0.0",
      "resolved": "../feature/scan",
      "registryType": "local"
    }
  }
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.21';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
import Core from './src/main/core';
import { DEFAULT, TestType, Size, Level, TAG, PrintTag } from './src/main/Constant';
import DataDriver from './src/main/module/config/DataDriver';
import ExpectExtend from './src/main/module/assert/ExpectExtend';
import OhReport from './src/main/module/report/OhReport';
import SysTestKit from './src/main/module/kit/SysTestKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect, beforeItSpecified, afterItSpecified, xdescribe, xit } from './src/main/interface';
import { MockKit, when } from './src/main/module/mock/MockKit';
import ArgumentMatchers from './src/main/module/mock/ArgumentMatchers';
import worker from '@ohos.worker';
class Hypium {
    static context = new Map();
    static setData(data) {
        const core = Core.getInstance();
        const dataDriver = new DataDriver({ data });
        core.addService('dataDriver', dataDriver);
    }
    static setTimeConfig(systemTime) {
        SysTestKit.systemTime = systemTime;
    }
    static set(key, value) {
        Hypium.context.set(key, value);
    }
    static get(key) {
        return Hypium.context.get(key);
    }
    static hypiumTest(abilityDelegator, abilityDelegatorArguments, testsuite) {
        const core = Core.getInstance();
        const expectExtend = new ExpectExtend({
            'id': 'extend'
        });
        core.addService('expect', expectExtend);
        const ohReport = new OhReport({
            'delegator': abilityDelegator,
            'abilityDelegatorArguments': abilityDelegatorArguments
        });
        SysTestKit.delegator = abilityDelegator;
        core.addService('report', ohReport);
        core.init();
        core.subscribeEvent('spec', ohReport);
        core.subscribeEvent('suite', ohReport);
        core.subscribeEvent('task', ohReport);
        const configService = core.getDefaultService('config');
        if (abilityDelegatorArguments !== null) {
            let testParameters = configService.translateParams(abilityDelegatorArguments.parameters);
            console.info(`${TAG}parameters:${JSON.stringify(testParameters)}`);
            configService.setConfig(testParameters);
        }
        testsuite();
        core.execute(abilityDelegator);
    }
    static async hypiumInitWorkers(abilityDelegator, scriptURL, workerNum = 8, params) {
        console.info(`${TAG}, hypiumInitWorkers call,${scriptURL}`);
        let workerPromiseArray = [];
        let startTime = await SysTestKit.getRealTime();
        for (let i = 0; i < workerNum; i++) {
            const workerPromise = Hypium.createWorkerPromise(scriptURL, i, params);
            workerPromiseArray.push(workerPromise);
        }
        const ret = {total: 0, failure: 0, error: 0, pass: 0, ignore: 0, duration: 0};
        Promise.all(workerPromiseArray).then(async (items) => {
            console.info(`${TAG}, all result from workers, ${JSON.stringify(items)}`);
            let allItemList = new Array();
            Hypium.handleWorkerTestResult(ret, allItemList, items);
            console.info(`${TAG}, all it result, ${JSON.stringify(allItemList)}`);
            const retResult = {total: 0, failure: 0, error: 0, pass: 0, ignore: 0, duration: 0};
            Hypium.configWorkerItTestResult(retResult, allItemList);
            Hypium.printWorkerTestResult(abilityDelegator, allItemList);
            let endTime = await SysTestKit.getRealTime();
            const taskConsuming = endTime - startTime;
            const message =
                `\n${PrintTag.OHOS_REPORT_ALL_RESULT}: stream=Test run: runTimes: ${ret.total},total: ${retResult.total}, Failure: ${retResult.failure}, Error: ${retResult.error}, Pass: ${retResult.pass}, Ignore: ${retResult.ignore}` +
                    `\n${PrintTag.OHOS_REPORT_ALL_CODE}: ${retResult.failure > 0 || retResult.error > 0 ? -1 : 0}` +
                    `\n${PrintTag.OHOS_REPORT_ALL_STATUS}: taskconsuming=${taskConsuming > 0 ? taskConsuming : ret.duration}`;
            abilityDelegator.printSync(message);
            console.info(`${TAG}, [end] you worker test`);
            abilityDelegator.finishTest('you worker test finished!!!', 0, () => {});
        }).catch((e) => {
            console.info(`${TAG}, [end] error you worker test, ${JSON.stringify(e)}`);
            abilityDelegator.finishTest('you worker test error finished!!!', 0, () => {});
        }).finally(() => {
            console.info(`${TAG}, all promise finally end`);
        });
    }
    static createWorkerPromise(scriptURL, i, params) {
        console.info(`${TAG}, createWorkerPromiser, ${scriptURL}, ${i}`);
        const workerPromise = new Promise((resolve, reject) => {
            const workerInstance = new worker.ThreadWorker(scriptURL, {name: `worker_${i}`});
            console.info(`${TAG}, send data to worker`);
            workerInstance.postMessage(params);
            workerInstance.onmessage = function (e) {
                let currentThreadName = e.data?.currentThreadName;
                console.info(`${TAG}, receview data from ${currentThreadName}, ${JSON.stringify(e.data)}`);
                resolve(e.data?.summary);
                console.info(`${TAG}, ${currentThreadName} finish`);
                workerInstance.terminate();
            };
            workerInstance.onerror = function (e) {
                console.info(`${TAG}, worker error, ${JSON.stringify(e)}`);
                reject(e);
                workerInstance.terminate();
            };
            workerInstance.onmessageerror = function (e) {
                console.info(`${TAG}, worker message error, ${JSON.stringify(e)}`);
                reject(e);
                workerInstance.terminate();
            };
        });
        return workerPromise;
    }
    static handleWorkerTestResult(ret, allItemList, items) {
        console.info(`${TAG}, handleWorkerTestResult, ${JSON.stringify(items)}`);
        for (const {total, failure, error, pass, ignore, duration, itItemList} of items) {
            ret.total += total;
            ret.failure += failure;
            ret.error += error;
            ret.pass += pass;
            ret.ignore += ignore;
            ret.duration += duration;
            Hypium.handleItResult(allItemList, itItemList);
        }
    }
    static handleItResult(allItemList, itItemList) {
        for (const {currentThreadName, description, result} of itItemList) {
            let item = allItemList.find((it) => it.description === description);
            if (item) {
                let itResult = item.result;
                if (itResult === 0) {
                    item.result = result;
                    item.currentThreadName = currentThreadName;
                }
            } else {
                let it = {
                    description: description,
                    currentThreadName: currentThreadName,
                    result: result
                };
                allItemList.push(it);
            }
        }
    }
    static configWorkerItTestResult(retResult, allItemList) {
        console.info(`${TAG}, configWorkerItTestResult, ${JSON.stringify(allItemList)}`);
        for (const {currentThreadName, description, result} of allItemList) {
            console.info(`${TAG}, description, ${description}, result,${result}`);
            retResult.total ++;
            if (result === 0) {
                retResult.pass ++;
            } else if (result === -1) {
                retResult.error ++;
            } else if (result === -2) {
                retResult.failure ++;
            } else {
                retResult.ignore ++;
            }
        }
    }
    static printWorkerTestResult(abilityDelegator, allItemList) {
        console.info(`${TAG}, printWorkerTestResult, ${JSON.stringify(allItemList)}`);
        let index = 1;
        for (const {currentThreadName, description, result} of allItemList) {
            console.info(`${TAG}, description print, ${description}, result,${result}`);
            let itArray = description.split('#');
            let des;
            let itName;
            if (itArray.length > 1) {
                des = itArray[0];
                itName = itArray[1];
            } else if (itArray.length > 1) {
                des = itArray[0];
                itName = itArray[0];
            } else {
                des = 'undefined';
                itName = 'undefined';
            }
            let msg = `\n${PrintTag.OHOS_REPORT_WORKER_STATUS}: class=${des}`;
            msg += `\n${PrintTag.OHOS_REPORT_WORKER_STATUS}: test=${itName}`;
            msg += `\n${PrintTag.OHOS_REPORT_WORKER_STATUS}: current=${index}`;
            msg += `\n${PrintTag.OHOS_REPORT_WORKER_STATUS}: CODE=${result}`;
            abilityDelegator.printSync(msg);
            index ++;
        }
    }
    static hypiumWorkerTest(abilityDelegator, abilityDelegatorArguments, testsuite, workerPort) {
        console.info(`${TAG}, hypiumWorkerTest call`);
        SysTestKit.workerPort = workerPort;
        let currentWorkerName = workerPort.name;
        console.info(`${TAG}, hypiumWorkerTest_currentWorkerName: ${currentWorkerName}`);
        Hypium.hypiumTest(abilityDelegator, abilityDelegatorArguments, testsuite);
    }
    static registerAssert(customAssertion) {
        const core = Core.getInstance();
        const expectService = core.getDefaultService('expect');
        let matchers = {};
        matchers[customAssertion.name] = customAssertion;
        expectService.addMatchers(matchers);
        expectService.customMatchers.push(customAssertion.name);
        console.info(`${TAG}success to register the ${customAssertion.name}`);
    }
    static unregisterAssert(customAssertion) {
        const core = Core.getInstance();
        const expectService = core.getDefaultService('expect');
        let customAssertionName = typeof customAssertion === 'function' ? customAssertion.name : customAssertion;
        expectService.removeMatchers(customAssertionName);
        console.info(`${TAG}success to unregister the ${customAssertionName}`);
    }
}
export {
    Hypium,
    Core,
    DEFAULT,
    TestType,
    Size,
    Level,
    DataDriver,
    ExpectExtend,
    OhReport,
    SysTestKit,
    describe, beforeAll, beforeEach, afterEach, afterAll, it, expect, beforeItSpecified, afterItSpecified, xdescribe, xit,
    MockKit, when,
    ArgumentMatchers
};
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
import { TestType, Size, Level } from "./src/main/Constant";
export declare function xdescribe(testSuiteName: string, func: Function): void;
export declare namespace xdescribe {
    function reason(reason: string): any;
};
export declare function describe(testSuiteName: string, func: Function): void;
export declare function xit(testCaseName: string, attribute: TestType | Size | Level, func: Function): void;
export declare namespace xit {
    function reason(reason: string): any;
};
export declare function it(testCaseName: string, attribute: TestType | Size | Level, func: Function): void;
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": true,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    }
  ]
}
export const DEFAULT = 0B0000
export const when: when;
export enum TestType {
  FUNCTION = 0B1,
  PERFORMANCE = 0B1 << 1,
  POWER = 0B1 << 2,
  RELIABILITY = 0B1 << 3,
  SECURITY = 0B1 << 4,
  GLOBAL = 0B1 << 5,
  COMPATIBILITY = 0B1 << 6,
  USER = 0B1 << 7,
  STANDARD = 0B1 << 8,
  SAFETY = 0B1 << 9,
  RESILIENCE = 0B1 << 10
}
export enum Size {
  SMALLTEST = 0B1 << 16,
  MEDIUMTEST = 0B1 << 17,
  LARGETEST = 0B1 << 18
}
export enum Level {
  LEVEL0 = 0B1 << 24,
  LEVEL1 = 0B1 << 25,
  LEVEL2 = 0B1 << 26,
  LEVEL3 = 0B1 << 27,
  LEVEL4 = 0B1 << 28
}
export { xdescribe, xit, describe, it } from './index';
export function beforeItSpecified(testCaseNames: Array<string> | string, callback: Function): void
export function afterItSpecified(testCaseNames: Array<string> | string, callback: Function): void
export function beforeEach(callback: Function): void
export function afterEach(callback: Function): void
export function beforeAll(callback: Function): void
export function afterAll(callback: Function): void
export interface Assert {
  assertClose(expectValue: number, precision: number): void
  assertContain(expectValue: any): void
  assertEqual(expectValue: any): void
  assertFail(): void
  assertFalse(): void
  assertTrue(): void
  assertInstanceOf(expectValue: string): void
  assertLarger(expectValue: number): void
  assertLess(expectValue: number): void
  assertNull(): void
  assertThrowError(expectValue: string | Function): void
  assertUndefined(): void
  assertLargerOrEqual(expectValue: number): void
  assertLessOrEqual(expectValue: number): void
  assertNaN(): void
  assertNegUnlimited(): void
  assertPosUnlimited(): void
  not(): Assert;
  assertDeepEquals(expectValue: any): void
  assertPromiseIsPending(): Promise<void>
  assertPromiseIsRejected(): Promise<void>
  assertPromiseIsRejectedWith(expectValue?: any): Promise<void>
  assertPromiseIsRejectedWithError(...expectValue): Promise<void>
  assertPromiseIsResolved(): Promise<void>
  assertPromiseIsResolvedWith(expectValue?: any): Promise<void>
  message(msg: string): Assert
}
export function expect(actualValue?: any): Assert
export class ArgumentMatchers {
  static any;
  static anyString;
  static anyBoolean;
  static anyNumber;
  static anyObj;
  static anyFunction;
  static matchRegexs(Regex: RegExp): void
}
declare interface when {
  afterReturn(value: any): any
  afterReturnNothing(): undefined
  afterAction(action: any): any
  afterThrow(e_msg: string): string
  (argMatchers?: any): when;
}
export interface VerificationMode {
  times(count: Number): void
  never(): void
  once(): void
  atLeast(count: Number): void
  atMost(count: Number): void
}
export class MockKit {
  constructor()
  mockFunc(obj: Object, func: Function): Function
  mockObject(obj: Object): Object
  verify(methodName: String, argsArray: Array<any>): VerificationMode
  ignoreMock(obj: Object, func: Function): void
  clear(obj: Object): void
  clearAll(): void
}
export class SysTestKit {
  static getDescribeName(): string;
  static getItName(): string;
  static getItAttribute(): TestType | Size | Level
  static actionStart(tag: string): void
  static actionEnd(tag: string): void
  static existKeyword(keyword: string, timeout?: number): boolean
}
export class Hypium {
  static setData(data: { [key: string]: any }): void
  static setTimeConfig(systemTime: any)
  static hypiumTest(abilityDelegator: any, abilityDelegatorArguments: any, testsuite: Function): void
  static set(key: string, value: any): void
  static get(key: string): any
  static registerAssert(customAssertion: Function): void
  static unregisterAssert(customAssertion: string | Function): void
  static hypiumWorkerTest(abilityDelegator: Object, abilityDelegatorArguments: Object, testsuite: Function, workerPort: Object): void;
  static hypiumInitWorkers(abilityDelegator: Object, scriptURL: string, workerNum: number, params: Object): void;
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://gitee.com/openharmony/arkcompiler_ets_frontend/blob/master/arkguard/README.md
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
/*
 * Copyright (c) 2021-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Core from './src/main/core';
import {TestType, Size, Level, DEFAULT} from './src/main/Constant';
import DataDriver from './src/main/module/config/DataDriver';
import ExpectExtend from './src/main/module/assert/ExpectExtend';
import OhReport from './src/main/module/report/OhReport';
export { xdescribe, xit, describe, it } from './index.ts';
export declare class Hypium {
    static setData(data: Object): void
    static setTimeConfig(systemTime: Object): void
    static hypiumTest(abilityDelegator: Object, abilityDelegatorArguments: Object, testsuite: Function): void
    static set(key: string, value: Object): void
    static get(key: string): Object
    static registerAssert(customAssertion: Function): void
    static unregisterAssert(customAssertion: string | Function): void
    static hypiumWorkerTest(abilityDelegator: Object, abilityDelegatorArguments: Object,
                            testsuite: Function, workerPort: Object): void;
    static hypiumInitWorkers(abilityDelegator: Object, scriptURL: string, workerNum: number, params: Object): void;
}
export {
    Core,
    DataDriver,
    ExpectExtend,
    OhReport,
    TestType,
    Size,
    Level,
    DEFAULT
};
type allExpectType = Object | undefined | null
export declare function beforeItSpecified(testCaseNames: Array<string> | string, callback: Function): void
export declare function afterItSpecified(testCaseNames: Array<string> | string, callback: Function): void
export declare function beforeEach(callback: Function): void
export declare function afterEach(callback: Function): void
export declare function beforeAll(callback: Function): void
export declare function afterAll(callback: Function): void
export declare interface Assert {
    assertClose(expectValue: number, precision: number): void
    assertContain(expectValue: allExpectType): void
    assertEqual(expectValue: allExpectType): void
    assertFail(): void
    assertFalse(): void
    assertTrue(): void
    assertInstanceOf(expectValue: string): void
    assertLarger(expectValue: number): void
    assertLess(expectValue: number): void
    assertNull(): void
    assertThrowError(expectValue: string | Function): void
    assertUndefined(): void
    assertLargerOrEqual(expectValue: number):void
    assertLessOrEqual(expectValue: number):void
    assertNaN():void
    assertNegUnlimited(): void
    assertPosUnlimited(): void
    not(): Assert;
    assertDeepEquals(expectValue: allExpectType):void
    assertPromiseIsPending(): Promise<void>
    assertPromiseIsRejected(): Promise<void>
    assertPromiseIsRejectedWith(expectValue?: allExpectType): Promise<void>
    assertPromiseIsRejectedWithError(...expectValue: allExpectType[]): Promise<void>
    assertPromiseIsResolved(): Promise<void>
    assertPromiseIsResolvedWith(expectValue?: allExpectType): Promise<void>
    message(msg: string): Assert
}
export declare function expect(actualValue?: allExpectType): Assert
export declare class ArgumentMatchers {
    public static any: allExpectType;
    public static anyString: string;
    public static anyBoolean: Boolean;
    public static anyNumber: Number;
    public static anyObj: Object;
    public static anyFunction: Function;
    public static matchRegexs(regex: RegExp): void
}
declare interface whenResult {
    afterReturn: (value: allExpectType) => allExpectType
    afterReturnNothing: () => undefined
    afterAction: (action: allExpectType) => allExpectType
    afterThrow: (e_msg: string) => string
}
export declare function when(f:Function): (...args: (allExpectType | void)[]) => whenResult
export declare interface VerificationMode {
    times(count: Number): void
    never(): void
    once(): void
    atLeast(count: Number): void
    atMost(count: Number): void
}
export declare class MockKit {
    constructor()
    mockFunc(obj: Object, func: Function): Function
    mockObject(obj: Object): Object
    verify(methodName: String, argsArray: Array<allExpectType>): VerificationMode
    ignoreMock(obj: Object, func: Function): void
    clear(obj: Object): void
    clearAll(): void
}
export declare class SysTestKit {
    static getDescribeName(): string;
    static getItName(): string;
    static getItAttribute(): TestType | Size | Level
    static actionStart(tag: string): void
    static actionEnd(tag: string): void
    static existKeyword(keyword: string, timeout?: number): boolean
}
{"name":"@ohos/hypium","version":"1.0.21","description":"A unit test framework for OpenHarmony application","main":"index.js","keywords":["测试框架","except","mock"],"author":"huawei","license":"Apache-2.0","repository":"https://gitee.com/openharmony/testfwk_arkxtest","homepage":"https://gitee.com/openharmony/testfwk_arkxtest","dependencies":{},"metadata":{"sourceRoots":["./src/main"],"debug":true},"compatibleSdkVersion":11,"compatibleSdkType":"OpenHarmony","obfuscated":false}
<div style="text-align: center;font-size: xxx-large" >Hypium</div>
<div style="text-align: center">A unit test framework for OpenHarmonyOS application</div>
## Hypium是什么?
***
- Hypium是OpenHarmony上的测试框架，提供测试用例编写、执行、结果显示能力，用于OpenHarmony系统应用接口以及应用界面测试。
- Hypium结构化模型：hypium工程主要由List.test.js与TestCase.test.js组成。
```
rootProject                  // Hypium工程根目录
├── moduleA
│   ├── src
│      ├── main                   // 被测试应用目录
│      ├── ohosTest               // 测试用例目录
│         ├── js/ets
│            └── test
│               └── List.test.js      // 测试用例加载脚本，ets目录下为.ets后缀
│               └── TestCase.test.js  // 测试用例脚本，ets目录下为.ets后缀
└── moduleB
    ...
│               └── List.test.js      // 测试用例加载脚本，ets目录下为.ets后缀
│               └── TestCase.test.js  // 测试用例脚本，ets目录下为.ets后缀
```
## 安装使用
```javascript
ohpm install @ohos/hypium
```
***
- 在DevEco Studio内使用Hypium
- 工程级package.json内配置:
```json
"dependencies": {
    "@ohos/hypium": "1.0.21"
}
```
注：
hypium服务于OpenHarmonyOS应用对外接口测试、系统对外接口测试（SDK中接口），完成HAP自动化测试。详细指导：
[Deveco Studio](https:
#### 通用语法
- 测试用例采用业内通用语法，describe代表一个测试套， it代表一条用例。
| No. | API        | 功能说明                                                                                                               |
| --- | ---------- | ---------------------------------------------------------------------------------------------------------------------- |
| 1   | describe   | 定义一个测试套，支持两个参数：测试套名称和测试套函数                                                                   |
| 2   | beforeAll  | 在测试套内定义一个预置条件，在所有测试用例开始前执行且仅执行一次，支持一个参数：预置动作函数                           |
| 3   | beforeEach | 在测试套内定义一个单元预置条件，在每条测试用例开始前执行，执行次数与it定义的测试用例数一致，支持一个参数：预置动作函数 |
| 4   | afterEach  | 在测试套内定义一个单元清理条件，在每条测试用例结束后执行，执行次数与it定义的测试用例数一致，支持一个参数：清理动作函数 |
| 5   | afterAll   | 在测试套内定义一个清理条件，在所有测试用例结束后执行且仅执行一次，支持一个参数：清理动作函数                           |
| 6   | it         | 定义一条测试用例，支持三个参数：用例名称，过滤参数和用例函数                                                           |
| 7   | expect     | 支持bool类型判断等多种断言方法                                                                                         |
#### 断言库
- 示例代码：
```javascript
  expect(${actualvalue}).assertX(${expectvalue})
```
- 断言功能列表：
| No.  | API                              | 功能说明                                                                                       |
| :--- | :------------------------------- | ---------------------------------------------------------------------------------------------- |
| 1    | assertClose                      | 检验actualvalue和expectvalue(0)的接近程度是否是expectValue(1)                                  |
| 2    | assertContain                    | 检验actualvalue中是否包含expectvalue                                                           |
| 3    | assertDeepEquals                 | @since1.0.4 检验actualvalue和expectvalue(0)是否是同一个对象                                    |
| 4    | assertEqual                      | 检验actualvalue是否等于expectvalue[0]                                                          |
| 5    | assertFail                       | 抛出一个错误                                                                                   |
| 6    | assertFalse                      | 检验actualvalue是否是false                                                                     |
| 7    | assertTrue                       | 检验actualvalue是否是true                                                                      |
| 8    | assertInstanceOf                 | 检验actualvalue是否是expectvalue类型                                                           |
| 9    | assertLarger                     | 检验actualvalue是否大于expectvalue                                                             |
| 10   | assertLess                       | 检验actualvalue是否小于expectvalue                                                             |
| 11   | assertNaN                        | @since1.0.4 检验actualvalue是否是NaN                                                           |
| 12   | assertNegUnlimited               | @since1.0.4 检验actualvalue是否等于Number.NEGATIVE_INFINITY                                    |
| 13   | assertNull                       | 检验actualvalue是否是null                                                                      |
| 14   | assertPosUnlimited               | @since1.0.4 检验actualvalue是否等于Number.POSITIVE_INFINITY                                    |
| 15   | assertPromiseIsPending           | @since1.0.4 检验actualvalue是否处于Pending状态【actualvalue为promse对象】                      |
| 16   | assertPromiseIsRejected          | @since1.0.4 检验actualvalue是否处于Rejected状态【同15】                                        |
| 17   | assertPromiseIsRejectedWith      | @since1.0.4 检验actualvalue是否处于Rejected状态，并且比较执行的结果值【同15】                  |
| 18   | assertPromiseIsRejectedWithError | @since1.0.4 检验actualvalue是否处于Rejected状态并有异常，同时比较异常的类型和message值【同15】 |
| 19   | assertPromiseIsResolved          | @since1.0.4 检验actualvalue是否处于Resolved状态【同15】                                        |
| 20   | assertPromiseIsResolvedWith      | @since1.0.4 检验actualvalue是否处于Resolved状态，并且比较执行的结果值【同15】                  |
| 21   | assertThrowError                 | 检验actualvalue抛出Error内容是否是expectValue                                                  |
| 22   | assertUndefined                  | 检验actualvalue是否是undefined                                                                 |
| 23   | not                              | @since1.0.4 断言结果取反                                                                       |
示例代码：
```javascript
  import { describe, it, expect } from '@ohos/hypium';
  export default async function assertCloseTest() {
    describe('assertClose', function () {
      it('assertClose_success', 0, function () {
        let a = 100;
        let b = 0.1;
        expect(a).assertClose(99, b);
      })
    })
  }
```
#### 公共系统能力
| No.  | API                                                     | 功能描述                                                     |
| ---- | ------------------------------------------------------- | ------------------------------------------------------------ |
| 1    | existKeyword(keyword: string, timeout: number): boolean | @since1.0.3 hilog日志中查找指定字段是否存在，keyword是待查找关键字，timeout为设置的查找时间 |
| 2    | actionStart(tag: string): void                          | @since1.0.3 cmd窗口输出开始tag                               |
| 3    | actionEnd(tag: string): void                            | @since1.0.3 cmd窗口输出结束tag                               |
示例代码：
```javascript
import { describe, it, expect, SysTestKit} from '@ohos/hypium';
export default function existKeywordTest() {
    describe('existKeywordTest', function () {
        it('existKeyword',DEFAULT, async function () {
            console.info("HelloTest");
            let isExist = await SysTestKit.existKeyword('HelloTest');
            console.info('isExist ------>' + isExist);
        })
    })
}
```
```javascript
import { describe, it, expect, SysTestKit} from '@ohos/hypium';
export default function actionTest() {
    describe('actionTest', function () {
        it('existKeyword',DEFAULT, async function () {
            let tag = '[MyTest]';
			SysTestKit.actionStart(tag);
            //do something
            SysTestKit.actionEnd(tag);
        })
    })
}
```
#### 专项能力
- 测试用例属性筛选能力：hypium支持根据用例属性筛选执行指定测试用例，使用方式是先在测试用例上标记用例属性后，再在测试应用的启动shell命令后新增" -s ${Key} ${Value}"。
| Key      | 含义说明     | Value取值范围                                                                                                                                          |
| -------- | ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------ |
| level    | 用例级别     | "0","1","2","3","4", 例如：-s level 1                                                                                                                  |
| size     | 用例粒度     | "small","medium","large", 例如：-s size small                                                                                                          |
| testType | 用例测试类型 | "function","performance","power","reliability","security","global","compatibility","user","standard","safety","resilience", 例如：-s testType function |
示例代码
```javascript
import { describe, it, expect, TestType, Size, Level } from '@ohos/hypium';
export default function attributeTest() {
    describe('attributeTest', function () {
        it("testAttributeIt", TestType.FUNCTION | Size.SMALLTEST | Level.LEVEL0, function () {
            console.info('Hello Test');
        })
    })
}
```
示例命令
```shell  
XX -s level 1 -s size small -s testType function
```
该命令的作用是：筛选测试应用中同时满足a）用例级别是1 b）用例粒度是small c）用例测试类型是function 三个条件的用例执行。
- 测试套/测试用例名称筛选能力（测试套与用例名称用“#”号连接，多个用“,”英文逗号分隔）
| Key      | 含义说明                | Value取值范围                                                                                |
| -------- | ----------------------- | -------------------------------------------------------------------------------------------- |
| class    | 指定要执行的测试套&用例 | ${describeName}#${itName}，${describeName} , 例如：-s class attributeTest#testAttributeIt    |
| notClass | 指定不执行的测试套&用例 | ${describeName}#${itName}，${describeName} , 例如：-s notClass attributeTest#testAttributeIt |
示例命令
```shell  
XX -s class attributeTest#testAttributeIt,abilityTest#testAbilityIt
```
该命令的作用是：筛选测试应用中attributeTest测试套下的testAttributeIt测试用例，abilityTest测试套下的testAbilityIt测试用例，只执行这两条用例。
- 其他能力
| 能力项       | Key     | 含义说明                     | Value取值范围                                  |
| ------------ | ------- | ---------------------------- | ---------------------------------------------- |
| 随机执行能力 | random  | 测试套&测试用例随机执行      | true, 不传参默认为false， 例如：-s random true |
| 空跑能力     | dryRun  | 显示要执行的测试用例信息全集 | true , 不传参默认为false，例如：-s dryRun true |
| 异步超时能力 | timeout | 异步用例执行的超时时间       | 正整数 , 单位ms，例如：-s timeout 5000         |
##### 约束限制
随机执行能力和空跑能力从npm包1.0.3版本开始支持
#### Mock能力
##### 约束限制
单元测试框架Mock能力从npm包[1.0.1版本](https:
## 约束
***
    本模块首批接口从OpenHarmony SDK API version 8开始支持。
## Hypium开放能力隐私声明
-  我们如何收集和使用您的个人信息
   您在使用集成了Hypium开放能力的测试应用时，Hypium不会处理您的个人信息。
-  SDK处理的个人信息
   不涉及。
-  SDK集成第三方服务声明
   不涉及。
-  SDK数据安全保护
   不涉及。
-  SDK版本更新声明
   为了向您提供最新的服务，我们会不时更新Hypium版本。我们强烈建议开发者集成使用最新版本的Hypium。
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const BUNDLE_NAME = 'com.example.tbschargeharmonyos';
export const BUNDLE_TYPE = 'app';
export const VERSION_CODE = 1000000;
export const VERSION_NAME = '1.0.0';
export const TARGET_NAME = 'default';
export const PRODUCT_NAME = 'default';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly BUNDLE_NAME = BUNDLE_NAME;
	static readonly BUNDLE_TYPE = BUNDLE_TYPE;
	static readonly VERSION_CODE = VERSION_CODE;
	static readonly VERSION_NAME = VERSION_NAME;
	static readonly TARGET_NAME = TARGET_NAME;
	static readonly PRODUCT_NAME = PRODUCT_NAME;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
}
## 1.0.21
- mock支持多参数
- describe中异步函数抛出日志信息
- 修复多测试套时，执行单个测试套会打印其他测试套的日志信息
## 1.0.14
- 堆栈信息打印到cmd
## 1.0.15
- 支持获取测试代码的失败堆栈信息
- mock代码迁移至harmock包
- 适配arkts语法
- 修复覆盖率数据容易截断的bug
## 1.0.16
- 修改覆盖率文件生成功能
- 修改静态方法无法ignoreMock函数
- ## 1.0.17
- 修改not断言失败提示日志
- 自定义错误message信息
- 添加xdescribe, xit API功能
- ## 1.0.18
- 添加全局变量存储API get set
- 自定义断言功能
## 1.0.18-rc.0
添加框架worker执行能力
## 1.0.19
规范日志格式
# 1.0.20
代码告警整改
string page_show 0x02000000
import Core from './core';
const core = Core.getInstance();
const describe = function (desc, func) {
    return Reflect.has(core, 'describe') ? core.describe(desc, func) : (desc, func) => { };
};
const it = function (desc, filter, func) {
    return Reflect.has(core, 'it') ? core.it(desc, filter, func) : (desc, filter, func) => { };
};
const beforeItSpecified = function (itDescs, func) {
    return Reflect.has(core, 'beforeItSpecified') ? core.beforeItSpecified(itDescs, func) : (itDescs, func) => { };
};
const afterItSpecified = function (itDescs, func) {
    return Reflect.has(core, 'afterItSpecified') ? core.afterItSpecified(itDescs, func) : (itDescs, func) => { };
};
const beforeEach = function (func) {
    return Reflect.has(core, 'beforeEach') ? core.beforeEach(func) : (func) => { };
};
const afterEach = function (func) {
    return Reflect.has(core, 'afterEach') ? core.afterEach(func) : (func) => { };
};
const beforeAll = function (func) {
    return Reflect.has(core, 'beforeAll') ? core.beforeAll(func) : (func) => { };
};
const afterAll = function (func) {
    return Reflect.has(core, 'afterAll') ? core.afterAll(func) : (func) => { };
};
const expect = function (actualValue) {
    return Reflect.has(core, 'expect') ? core.expect(actualValue) : (actualValue) => { };
};
const xdescribe = function (desc, func) {
    return Reflect.has(core, 'xdescribe') ? core.xdescribe(desc, func, null) : (desc, func, reason) => { };
};
xdescribe.reason = (reason) => {
    return (desc, func) => {
        return Reflect.has(core, 'xdescribe') ? core.xdescribe(desc, func, reason) : (desc, func, reason) => { };
    };
};
const xit = function (desc, filter, func) {
    return Reflect.has(core, 'xit') ? core.xit(desc, filter, func, null) : (desc, filter, func, reason) => { };
};
xit.reason = (reason) => {
    return (desc, filter, func) => {
        return Reflect.has(core, 'xit') ? core.xit(desc, filter, func, reason) : (desc, filter, func, reason) => { };
    };
};
export {
    describe, it, beforeAll, beforeEach, afterEach, afterAll, expect, beforeItSpecified, afterItSpecified, xdescribe, xit
};
{
	"app": {
		"bundleName": "com.ohos.myapplication",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 11,
		"targetAPIVersion": 11,
		"apiReleaseType": "Release",
		"compileSdkVersion": "4.1.7.5",
		"compileSdkType": "OpenHarmony",
		"appEnvironments": [],
		"bundleType": "app"
	},
	"module": {
		"name": "hypium",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"tv",
			"wearable",
			"car"
		],
		"packageName": "@ohos/hypium",
		"installationFree": false,
		"virtualMachine": "ark11.0.2.0",
		"compileMode": "esmodule",
		"dependencies": []
	}
}
export const TAG = '[Hypium]';
export const DEFAULT = 0B0000;
export class PrintTag {
    static OHOS_REPORT_WORKER_STATUS = 'OHOS_REPORT_WORKER_STATUS';
    static OHOS_REPORT_ALL_RESULT = 'OHOS_REPORT_ALL_RESULT';
    static OHOS_REPORT_ALL_CODE = 'OHOS_REPORT_ALL_CODE';
    static OHOS_REPORT_ALL_STATUS = 'OHOS_REPORT_ALL_STATUS';
    static OHOS_REPORT_RESULT = 'OHOS_REPORT_RESULT';
    static OHOS_REPORT_CODE = 'OHOS_REPORT_CODE';
    static OHOS_REPORT_STATUS = 'OHOS_REPORT_STATUS';
    static OHOS_REPORT_SUM = 'OHOS_REPORT_SUM';
    static OHOS_REPORT_STATUS_CODE = 'OHOS_REPORT_STATUS_CODE';
};
export class TestType {
    static FUNCTION = 0B1;
    static PERFORMANCE = 0B1 << 1;
    static POWER = 0B1 << 2;
    static RELIABILITY = 0B1 << 3;
    static SECURITY = 0B1 << 4;
    static GLOBAL = 0B1 << 5;
    static COMPATIBILITY = 0B1 << 6;
    static USER = 0B1 << 7;
    static STANDARD = 0B1 << 8;
    static SAFETY = 0B1 << 9;
    static RESILIENCE = 0B1 << 10;
};
export class Size {
    static SMALLTEST = 0B1 << 16;
    static MEDIUMTEST = 0B1 << 17;
    static LARGETEST = 0B1 << 18;
};
export class Level {
    static LEVEL0 = 0B1 << 24;
    static LEVEL1 = 0B1 << 25;
    static LEVEL2 = 0B1 << 26;
    static LEVEL3 = 0B1 << 27;
    static LEVEL4 = 0B1 << 28;
};
export const TESTTYPE = {
    'function': 1,
    'performance': 1 << 1,
    'power': 1 << 2,
    'reliability': 1 << 3,
    'security': 1 << 4,
    'global': 1 << 5,
    'compatibility': 1 << 6,
    'user': 1 << 7,
    'standard': 1 << 8,
    'safety': 1 << 9,
    'resilience': 1 << 10,
};
export const LEVEL = {
    '0': 1 << 24,
    '1': 1 << 25,
    '2': 1 << 26,
    '3': 1 << 27,
    '4': 1 << 28,
};
export const SIZE = {
    'small': 1 << 16,
    'medium': 1 << 17,
    'large': 1 << 18,
};
export const KEYSET = [
    '-s class', '-s notClass', '-s suite', '-s itName',
    '-s level', '-s testType', '-s size', '-s timeout',
    '-s dryRun', '-s random', '-s breakOnError', '-s stress',
    '-s coverage', '-s skipMessage', '-s runSkipped',
    'class', 'notClass', 'suite', 'itName',
    'level', 'testType', 'size', 'timeout', 'dryRun', 'random',
    'breakOnError', 'stress', 'coverage', 'skipMessage', 'runSkipped'
];
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
export * from './src/main/ets/common'
export * from './src/main/ets/http'
export * from './src/main/ets/widgets'
export * from './src/main/ets/manager'
export * from './src/main/ets/utils'
export { CommonDataSource } from './src/main/ets/model/CommonDataSource'
export * from './src/main/ets/location'
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
{
  "name": "@tbs/common",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {}
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"vendor": "example",
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"icon": "$media:layered_image",
		"label": "$string:app_name",
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"targetAPIVersion": 50004016,
		"minAPIVersion": 50004016,
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug",
		"debug": true
	},
	"module": {
		"name": "entry",
		"type": "entry",
		"description": "$string:module_desc",
		"mainElement": "EntryAbility",
		"deviceTypes": [
			"phone",
			"tablet",
			"2in1"
		],
		"deliveryWithInstall": true,
		"installationFree": false,
		"pages": "$profile:main_pages",
		"querySchemes": [
			"amapuri",
			"baidumap",
			"maps"
		],
		"requestPermissions": [
			{
				"name": "ohos.permission.INTERNET"
			},
			{
				"name": "ohos.permission.APPROXIMATELY_LOCATION",
				"reason": "$string:permission_approximately_location",
				"usedScene": {
					"abilities": [
						"EntryAbility"
					],
					"when": "always"
				}
			},
			{
				"name": "ohos.permission.LOCATION",
				"reason": "$string:location_permission_reason",
				"usedScene": {
					"abilities": [
						"EntryAbility"
					],
					"when": "always"
				}
			}
		],
		"abilities": [
			{
				"name": "EntryAbility",
				"srcEntry": "./ets/entryability/EntryAbility.ets",
				"description": "$string:EntryAbility_desc",
				"icon": "$media:layered_image",
				"label": "$string:EntryAbility_label",
				"startWindowIcon": "$media:startIcon",
				"startWindowBackground": "$color:start_window_background",
				"exported": true,
				"skills": [
					{
						"entities": [
							"entity.system.home"
						],
						"actions": [
							"action.system.home"
						]
					}
				]
			}
		],
		"extensionAbilities": [
			{
				"name": "EntryBackupAbility",
				"srcEntry": "./ets/entrybackupability/EntryBackupAbility.ets",
				"type": "backup",
				"exported": false,
				"metadata": [
					{
						"name": "ohos.extension.backup",
						"resource": "$profile:backup_config"
					}
				]
			}
		],
		"packageName": "entry"
	}
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
export * from './src/main/ets/common'
export * from './src/main/ets/http'
export * from './src/main/ets/widgets'
export * from './src/main/ets/manager'
export * from './src/main/ets/utils'
export { CommonDataSource } from './src/main/ets/model/CommonDataSource'
export * from './src/main/ets/location'
import { StorageConst, ScreenUtils, StyleConst } from "@tbs/common"
import { pileParam, pileParamType, PileType } from "../model/ChargeModel"
@Component
export struct ChargeItemDialogView {
  @StorageProp(StorageConst.SCREEN_WIDTH_VP) screenWidth: number =
    ScreenUtils.getInstance().getScreenWidthVp()
  @Prop Piles: PileType[]
  clickPileItemCallBack?: (item:PileType) => void
  @Builder
  pileItem(item: PileType) {
    Row() {
      //左
      this.pileItemLeftBuilder(item)
      //右
      this.pileItemRightBuilder(item)
    }
    .padding({ top: $r('app.float.size_12'), bottom: $r('app.float.size_12') })
    .width(this.screenWidth - 12 * 2)
    .margin({ bottom: $r('app.float.size_12') })
    .borderRadius($r('app.float.size_12'))
    .backgroundColor(Color.White)
    .onClick(() => {
      if (this.clickPileItemCallBack) {
        this.clickPileItemCallBack(item)
      }
    })
  }
  //桩左侧UI
  @Builder
  pileItemLeftBuilder(item: PileType) {
    Column({ space: 10 }) {
      Image(this.pileImage(item.state ?? 0))
        .height($r('app.float.size_30'))
      Text(this.pileStateText(item.state ?? 0))
        .textAlign(TextAlign.Center)
        .fontSize($r('app.float.size_text_10'))
        .fontColor(this.pileStateTextColor(item.state ?? 0))
        .width($r('app.float.size_40'))
        .height($r('app.float.size_20'))
        .border({
          width: $r('app.float.size_1'),
          color: this.pileStateTextColor(item.state ?? 0),
          style: BorderStyle.Solid,
          radius: $r('app.float.size_20')
        })
    }
    .margin({ left: $r('app.float.size_20'), right: $r('app.float.size_20') })
  }
  //桩右侧UI
  @Builder
  pileItemRightBuilder(item: PileType) {
    Column({ space: 10 }) {
      Text() {
        Span($r('app.string.pile_number')).fontColor($r('app.color.color_898e92'))
        Span(item.code).fontColor(Color.Black)
      }.fontSize($r('app.float.size_text_14'))
      Text() {
        Span($r('app.string.station_name')).fontColor($r('app.color.color_898e92'))
        Span(item.stationName).fontColor(Color.Black)
      }.fontSize($r('app.float.size_text_14'))
      Row({ space: 10 }) {
        ForEach(pileParam, (item: pileParamType) => {
          Row() {
            Text(item.text)
              .textAlign(TextAlign.Center)
              .fontSize($r('app.float.size_text_11'))
              .fontColor(Color.Black)
          }
          .backgroundColor($r('app.color.color_f5f5f5'))
          .padding({
            top: $r('app.float.size_5'),
            bottom: $r('app.float.size_5'),
            left: $r('app.float.size_8'),
            right: $r('app.float.size_8')
          })
        })
      }
    }
    .layoutWeight(1)
    .alignItems(HorizontalAlign.Start)
  }
  //区分不同状态的桩图片
  pileImage(state: number) {
    switch (state) {
      case 0:
        return $r('app.media.pile_idle')
      case 1:
        return $r('app.media.pile_charging_in_progress')
      case 2:
        return $r('app.media.pile_faults')
      default:
        return $r('app.media.pile_idle')
    }
  }
  //区分不同状态的文本
  pileStateText(state: number) {
    switch (state) {
      case 0:
        return $r('app.string.idle')
      case 1:
        return $r('app.string.charging_in_progress')
      case 2:
        return $r('app.string.faults')
      default:
        return $r('app.string.idle')
    }
  }
  //区分不同状态的文本颜色
  pileStateTextColor(state: number) {
    switch (state) {
      case 0:
        return $r('app.color.color_009688')
      case 1:
        return $r('app.color.color_d68751')
      case 2:
        return $r('app.color.color_F44336')
      default:
        return $r('app.color.color_009688')
    }
  }
  build() {
    List() {
      ForEach(this.Piles, (item: PileType) => {
        ListItem() {
          this.pileItem(item)
        }
        .width(StyleConst.FULL_WIDTH)
      })
    }
    .width(StyleConst.FULL_WIDTH)
  }
}
{
  "name": "@tbs/common",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {}
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
import { BottomPop, StyleConst, ThirdApp, thirdAppManager, toast,locationManager } from "@tbs/common"
import { AddressData, ChargeType, mapListItem, PileType } from "../model/ChargeModel"
import { getPiles } from "../viewModel/ChargeViewModel"
import { ChargeItemDialogView } from "./ChargeItemDialogView"
import { router } from "@kit.ArkUI"
import '../page/ChargingPage'
import { OpenLinkOptions, common } from "@kit.AbilityKit"
import { BusinessError } from "@kit.BasicServicesKit"
import { geoLocationManager } from "@kit.LocationKit"
import { MapDialogCall } from "./MapDialogCall"
@Component
export struct ChargeListView {
  @Prop chargeList: ChargeType[]
  @State Piles: PileType[] = []
  @State destinationLongitude: number = 0
  @State destinationLatitude: number = 0
  @State destinationName: string = ''
  @State mapList: mapListItem[] = []
  locationData: AddressData = {}
  private selectMapDialogController?: CustomDialogController
  async getPileData(id: number) {
    let data = await getPiles(id)
    if (data) {
      this.Piles = data
    }
  }
  aboutToDisappear(): void {
    this.chargeItemController = null
    this.selectMapDialogController?.close()
    this.selectMapDialogController = undefined
  }
  chargeItemController: CustomDialogController | null = new CustomDialogController({
    builder: BottomPop({
      title: $r('app.string.selection_of_charging_pile'),
      bgColor: $r('app.color.color_f0f2f4'),
      titleBgColor: $r('app.color.color_f0f2f4'),
      contentBgColor: $r('app.color.color_f0f2f4'),
      keyboardAvoidMode: KeyboardAvoidMode.NONE,
      childBuilderParam: () => {
        this.chargeItemDialog()
      }
    }),
    customStyle: true,
    alignment: DialogAlignment.Bottom,
    maskColor: $r('app.color.color_80000000'),
  })
  @Builder
  chargeItemDialog() {
    ChargeItemDialogView({
      Piles: this.Piles,
      clickPileItemCallBack: (item: PileType) => {
        this.clickPileItem(item)
      }
    })
  }
  //单个桩点击处理
  clickPileItem(item: PileType) {
    if (item.state === 0) {
      this.chargeItemController?.close()
      router.pushNamedRoute({
        name: 'ChargingPage',
        params: { item }
      })
    } else if (item.state === 1) {
      toast('此桩正在充电中～')
    } else {
      toast('桩故障，无法充电哦～')
    }
  }
  @Builder
  chargeItem(item: ChargeType) {
    Column({ space: 12 }) {
      Text(item.name).fontWeight(FontWeight.Bold)
        .onClick(() => {
          this.chargeItemController?.open()
          if (item.id) {
            this.getPileData(item.id)
          }
        })
      Row({ space: 8 }) {
        Text(`￥ ${item.pricePerHour}`).fontColor($r('app.color.color_0aa671'))
        Text('/度').fontColor($r('app.color.color_adadb3'))
        Blank()
        Text(item.tenantName).fontSize($r('app.float.size_text_18')).fontColor($r('app.color.color_0aa671'))
        Blank()
        Image($r('app.media.fast')).width($r('app.float.size_20'))
        Text(`闲${item.freePileTotal}`).fontWeight(FontWeight.Bold)
        Text(`/${item.pileTotal}`)
      }
      .width(StyleConst.FULL_WIDTH)
      .onClick(() => {
        this.chargeItemController?.open()
        if (item.id) {
          this.getPileData(item.id)
        }
      })
      Row({ space: 8 }) {
        Row({ space: 8 }) {
          if (item.distance) {
            Text(`${item.distance.toFixed(2)}km`)
          }
          Image($r('app.media.location')).width($r('app.float.size_20'))
        }
        .onClick(()=>{
          this.handleCheckInstallation(item)
        })
        Image($r('app.media.imgUrl')).width($r('app.float.size_20'))
      }
    }
    .backgroundColor($r('app.color.color_fff'))
    .padding({
      left: $r('app.float.size_10'),
      right: $r('app.float.size_10'),
      top: $r('app.float.size_15'),
      bottom: $r('app.float.size_15')
    })
    .borderRadius($r('app.float.size_20'))
    .alignItems(HorizontalAlign.Start)
  }
  //有数据页面
  @Builder
  haveDataCardView() {
    //列表
    List({ space: 10 }) {
      ForEach(this.chargeList, (item: ChargeType) => {
        ListItem() {
          this.chargeItem(item)
        }
      })
    }
    .width(StyleConst.FULL_WIDTH)
    .padding($r('app.float.size_10'))
    .layoutWeight(1)
  }
  //无数据页面
  @Builder
  noDataCardView() {
    Column() {
      Image($r('app.media.empty_charge1'))
        .width($r('app.float.size_100'))
        .height($r('app.float.size_100'))
      Text($r('app.string.no_data'))
        .fontSize($r('app.float.size_text_20'))
        .fontColor(Color.Black)
        .fontWeight(FontWeight.Bold)
        .margin({ top: $r('app.float.size_20'), bottom: $r('app.float.size_24') })
    }
    .margin({ top: $r('app.float.size_200') })
  }
  handleCheckInstallation(item: ChargeType) {
    this.isAppInstalled(item)
    if (this.mapList.length === 0) {
      toast($r('app.string.visit_store_install_maps_first'))
    } else {
      this.permissionRequest()
    }
  }
  isAppInstalled(model: ChargeType) {
    const mapList = [ThirdApp.Amapuri, ThirdApp.Baidumap, ThirdApp.Maps].map((key: ThirdApp) => {
      let name: Length = ''
      let link: string = ""
      switch (key) {
        case ThirdApp.Amapuri:
          link =
            `amapuri://route/plan?dlat=${model.coordinate?.split(',')[0]}&dname=${model.name}&slat=${this.locationData.latitude}&dlon=${model.coordinate?.split(',')[1]}&slon=${this.locationData.longitude}&sname=我的位置&t=0&sourceApplication=com.huawei.hmos.maps.app`
          name = $r('app.string.visit_store_map')
          break
        case ThirdApp.Baidumap:
          name = $r('app.string.visit_store_baidu_map')
          link =
            `baidumap://map/direction?destination=latlng:${model.coordinate?.split(',')[0]},${model.coordinate?.split(',')[1]}|name:${model.name}&mode=driving`
          break
        case ThirdApp.Maps:
          name = $r('app.string.visit_store_petal_map')
          link =
            `https://www.petalmaps.com/routes/?daddr=${model.coordinate?.split(',')[0]},${model.coordinate?.split(',')[1]}(${model.name})&coordinateType=0&type=drive&utm_source=com.huawei.hmos.maps.app`
          break
        default:
          name = ""
      }
      return {
        name,
        link,
        isAppInstall: thirdAppManager.isAppInstall(key)
      } as mapListItem
    })
    console.log('lucy== map',JSON.stringify(mapList))
    this.mapList = mapList.filter(ele => ele.isAppInstall)
  }
  async permissionRequest() {
    try {
      let isGranted = await locationManager.checkAndApplyPermissions(getContext(this))
      if (!isGranted) {
        isGranted = await locationManager.requestPermissionAgain()
      }
      if (isGranted) {
        this.selectMapDialogController = new CustomDialogController({
          builder: MapDialogCall({
            title: '请选择地图',
            titleFontSize: $r('app.float.size_13'),
            titleTextColor: '#acb1b6',
            mapList: this.mapList,
            propBackgroundColor: Color.Transparent,
            propBorderRadius: $r('app.float.size_8'),
            propHeight: $r('app.float.size_50'),
            propSpace: 0,
            titleHeight: $r('app.float.size_42'),
            propContentPadding: {
              top: $r('app.float.size_12'),
              bottom: 0
            },
            propPadding: {
              left: $r('app.float.size_12'),
              right: $r('app.float.size_12'),
              bottom: $r('app.float.size_31'),
            },
            onClickCallBack: (item) => {
              this.handleStartNavigation(item)
            }
          }),
          customStyle: true,
          autoCancel: true,
          alignment: DialogAlignment.Bottom,
          keyboardAvoidMode: KeyboardAvoidMode.NONE
        })
        this.selectMapDialogController.open()
        const request: geoLocationManager.SingleLocationRequest = {
          locatingPriority: geoLocationManager.LocatingPriority.PRIORITY_LOCATING_SPEED,
          locatingTimeoutMs: 10000
        };
        await geoLocationManager.getCurrentLocation(request).then((location) => {
          // 获取到的经纬度
          this.locationData.latitude = location.latitude;
          this.locationData.longitude = location.longitude;
        }).catch((err: object) => {
          console.error("lucy== 获取位置失败:", JSON.stringify(err));
        });
      }
    } catch (e) {
      console.log('lucy== Address request location Permission fail' + e.message)
    }
  }
  handleStartNavigation(item: mapListItem) {
    this.selectMapDialogController?.close()
    this.jumpToMapApp(item.link)
  }
  jumpToMapApp(link: string) {
    try {
      const openLinkOptions: OpenLinkOptions = {
        appLinkingOnly: false
      };
      const context = getContext(this) as common.UIAbilityContext
      context.openLink(link, openLinkOptions)
        .then(() => {
          console.log('open link success.');
        }).catch((err: BusinessError) => {
        console.log(`open link failed. Code is ${err.code}, message is ${err.message}`);
      });
    } catch (paramError) {
      console.log(`Failed to start link. Code is ${paramError.code}, message is ${paramError.message}`);
    }
  }
  build() {
    if (this.chargeList.length > 0) {
      this.haveDataCardView()
    } else {
      this.noDataCardView()
    }
  }
}
import { StyleConst } from "@tbs/common"
import { mapListItem } from "../model/ChargeModel"
interface TextStyle {
  height: Length
}
@Extend(Text)
//文本样式
function textStyles(item: TextStyle) {
  .fontColor($r('app.color.color_0165b8'))
  .textAlign(TextAlign.Center)
  .fontSize($r('app.float.size_18'))
  .height(item.height)
}
@CustomDialog
@Component
export struct MapDialogCall {
  mapList: mapListItem[] = []
  controller: CustomDialogController
  propBackgroundColor: Color | number | string | Resource = '#f3f4f5'
  propPadding: Padding | Length | LocalizedPadding = {}
  propBorderRadius: ResourceStr = '0'
  title: ResourceStr = '';
  titlePadding: Padding = { top: $r('app.float.size_16'), bottom: $r('app.float.size_16') }
  titleFontSize: ResourceStr = $r('app.float.size_text_16')
  titleTextColor: ResourceColor = '#222427'
  titleBgColor: ResourceColor = Color.Transparent
  onClickCallBack?: (ele: mapListItem) => void
  propHeight: Length = $r('app.float.size_25')
  propSpace: number = 13
  propContentPadding: Padding | Length | LocalizedPadding = {
    top: $r('app.float.size_12'),
    bottom: $r('app.float.size_12')
  }
  titleHeight: Length = 0
  build() {
    Column({ space: 12 }) {
      Column({ space: this.propSpace }) {
        Text(this.title)
          .fontColor(this.titleTextColor)
          .fontSize(this.titleFontSize)
          .textAlign(TextAlign.Center)
          .width(StyleConst.FULL_WIDTH)
          .height(this.titleHeight)
        ForEach(
          this.mapList,
          (ele: mapListItem) => {
            Text(ele.name)
              .textStyles({ height: this.propHeight })
              .onClick(() => {
                this.onClickCallBack && this.onClickCallBack(ele)
              })
          }
        )
      }
      .borderRadius(this.propBorderRadius)
      .justifyContent(FlexAlign.Center)
      .width(StyleConst.FULL_WIDTH)
      .backgroundColor(Color.White)
      .padding(this.propContentPadding)
      Row() {
        Text('取消')
          .textStyles({ height: this.propHeight })
          .fontColor($r('app.color.color_0165b8'))
          .width(StyleConst.FULL_WIDTH)
      }
      .borderRadius(this.propBorderRadius)
      .backgroundColor(Color.White)
      .height($r('app.float.size_50'))
      .margin({ bottom: $r('app.float.size_16') })
      .onClick(()=>{
        this.controller.close()
      })
    }
    .padding(this.propPadding)
    .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor(this.propBackgroundColor)
  }
}
import { ScreenUtils, StyleConst } from "@tbs/common"
@Extend(TextInput)
function orderInputStyle(focus: boolean) {
  .textAlign(TextAlign.Start)
  .fontColor(Color.Black)
  .placeholderColor($r('app.color.color_898e92'))
  .placeholderFont({ size: $r('app.float.size_text_13') })
  .fontSize($r('app.float.size_text_14'))
  .backgroundColor(Color.Transparent)
  .enterKeyType(EnterKeyType.Search) //设置输入法回车键类型 显示为搜索样式
  .defaultFocus(focus)
}
@Component
export struct ChargeSearchBarView {
  @Link name: string
  @State cancelMode: CancelButtonStyle = CancelButtonStyle.INVISIBLE // 输入框清除按钮模式
  inputController?: TextInputController
  keyboardFocus: boolean = false // 控制键盘首次是否自动弹出
  maxLength: number = Infinity
  searchButtonCallback?: (value: string) => void // 点击搜索按钮回调
  //输入框
  @Builder
  inputBuilder() {
    Row() {
      Image($r('app.media.search_icon'))
        .width($r('app.float.size_18'))
        .height($r('app.float.size_18'))
        .margin({ left: $r('app.float.size_7') })
      TextInput({
        text: this.name,
        placeholder: $r('app.string.search_content'),
        controller: this.inputController
      })
        .orderInputStyle(this.keyboardFocus)
        .maxLines(this.maxLength)
        .layoutWeight(1)
        .cancelButton({
          style: this.cancelMode,
          icon: { src: $r('app.media.search_delete'), size: $r('app.float.size_14') }
        })
        .padding({ left: $r('app.float.size_6') })
        .onChange((value: string) => {
          this.name = value
          if (value) {
            //输入框有值时，清除按钮显示
            this.cancelMode = CancelButtonStyle.INPUT
          }
        })
        .onSubmit(() => {
          this.lostKeyboard()
          if (this.searchButtonCallback) {
            this.searchButtonCallback(this.name)
          }
        })
    }
    .height($r('app.float.size_34'))
    .clip(true)
    .layoutWeight(1)
    .backgroundColor($r('app.color.color_fff'))
    .borderRadius($r('app.float.size_8'))
    .margin({ left: $r('app.float.size_6'), right: $r('app.float.size_8') })
  }
  //搜索按钮
  @Builder
  searchButtonBuilder() {
    Text($r('app.string.search'))
      .fontSize($r('app.float.size_text_14'))
      .fontColor($r('app.color.color_0aa671'))
      .fontWeight(FontWeight.Medium)
      .height($r('app.float.size_30'))
      .padding({ left: $r('app.float.size_12'), right: $r('app.float.size_12') })
      .backgroundColor(Color.White)
      .borderRadius($r('app.float.size_6'))
      .onClick(() => {
        if (this.searchButtonCallback) {
          this.searchButtonCallback(this.name)
        }
        if (this.name) {
          this.lostKeyboard()
        }
      })
  }
  lostKeyboard() {
    if (this.inputController) {
      this.inputController.stopEditing()
    }
  }
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight()).backgroundColor($r('app.color.color_0aa671'))
      Row() {
        //输入框
        this.inputBuilder()
        //搜索按钮
        this.searchButtonBuilder()
      }
      .width(StyleConst.FULL_WIDTH)
      .padding({ left: $r('app.float.size_12'), right: $r('app.float.size_12') })
      .margin({ bottom: $r('app.float.size_15') })
    }
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
import { StyleConst } from "@tbs/common"
import UserCenterConst from "@tbs/common/src/main/ets/manager/UserCenterConst"
import { orderOrServiceList, panelData, panelList, UserInfoData } from "../model/MineModel"
import { router } from "@kit.ArkUI"
import '@tbs/charge/src/main/ets/page/ChargeOrderPage'
@Component
export struct MineContentView {
  userInfoData: UserInfoData | null = UserCenterConst.getUserInfoData()
  //局部公共样式函数
  @Styles
  userPageSty(){
    .width(StyleConst.PERCENT_95)
    .padding($r('app.float.size_10'))
    .borderRadius($r('app.float.size_10'))
    .backgroundColor($r('app.color.color_fff'))
  }
  build() {
    Column({ space: 10 }) {
      //1.充电余额
      Column({ space: 6 }) {
        if (this.userInfoData?.balance) {
          Text(`${this.userInfoData?.balance.toFixed(2)}元`)
        }
        Row() {
          Text('充电余额')
          Text('>')
        }
      }
      .margin({ top: -20 })
      .alignItems(HorizontalAlign.Start)
      .userPageSty()
      //2.充电订单
      Row({ space: 10 }) {
        ForEach(orderOrServiceList, (item: panelData) => {
          Column() {
            Image(item.image)
              .width($r('app.float.size_45'))
            Text(item.name)
          }.onClick(() => {
            if(item.type == 1){
              router.pushNamedRoute({
                name:'ChargeOrderPage'
              })
            }
          })
        })
      }
      .justifyContent(FlexAlign.SpaceAround)
      .userPageSty()
      //3.用户协议
      Flex({ wrap: FlexWrap.Wrap, alignContent: FlexAlign.SpaceAround }) {
        ForEach(panelList, (item: panelData) => {
          Column({ space: 4 }) {
            Image(item.image).width($r('app.float.size_30'))
            Text(item.name)
          }.width(StyleConst.PERCENT_25).margin({bottom:$r('app.float.size_10')})
        })
      }
      .width(StyleConst.PERCENT_95)
      .padding({top:$r('app.float.size_10'),left:$r('app.float.size_10'),right:$r('app.float.size_10')})
      .borderRadius($r('app.float.size_10'))
      .backgroundColor($r('app.color.color_fff'))
      //4.退出登录
      Row() {
        Text('退出登录').margin({left:$r('app.float.size_10')})
        Image($r('app.media.icon_arrow_right')).width($r('app.float.size_20')).fillColor(Color.Black)
      }
      .justifyContent(FlexAlign.SpaceBetween)
      .userPageSty()
      .padding({top:$r('app.float.size_20'),bottom:$r('app.float.size_20')})
      .onClick(() => {
      })
    }
  }
}
import { ScreenUtils, StyleConst } from "@tbs/common"
import { UserInfoData } from "../model/MineModel"
import UserCenterConst from '@tbs/common/src/main/ets/manager/UserCenterConst'
@Component
export struct MineHeaderView {
  userInfoData: UserInfoData | null = UserCenterConst.getUserInfoData()
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight()).backgroundColor($r('app.color.color_0aa671'))
      Image($r('app.media.Groundhog')).width($r('app.float.size_60')).borderRadius($r('app.float.size_50'))
      Text(this.userInfoData?.username).fontColor(Color.White)
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.PERCENT_20)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
export class UserInfoData {
  id?: number
  username?: string
  nickname?: string
  balance?: number
  avatarUrl?: string
}
export class panelData {
  type?: number
  name?: ResourceStr
  image?: ResourceStr
}
export const panelList: Array<panelData> = [
  { name: $r('app.string.agreement'), image: $r('app.media.agreement') },
  { name: $r('app.string.certification'), image: $r('app.media.certification') },
  { name: $r('app.string.feat'), image: $r('app.media.feat') },
  { name: $r('app.string.message'), image: $r('app.media.message') },
  { name: $r('app.string.person'), image: $r('app.media.person') },
  { name: $r('app.string.rule'), image: $r('app.media.rule') }
]
export const orderOrServiceList: Array<panelData> = [
  { type: 1, name: $r('app.string.order'), image: $r('app.media.order') },
  { type: 2, name: $r('app.string.service'), image: $r('app.media.service') }
]
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
// import { PriceType } from "../model/ChargeModel"
//
//
// //标题样式
// @Extend(Text) function PriceHeaderSty(){
//   .fontSize(18).fontWeight(FontWeight.Bold).fontColor(Color.White)
// }
// //行内样式
// @Extend(Text) function PriceCellSty(){
//   .fontSize(20).textAlign(TextAlign.Center)
// }
// @Component
// export struct ChargePriceDialogView {
//   @Prop priceList:PriceType[]
//
//   build() {
//     Column({space:10}){
//       Text('收费标准').textAlign(TextAlign.Center).fontWeight(FontWeight.Bold).fontSize(25)
//       Column({space:10}){
//         Row({space:50}){
//           Text('收费时段').PriceHeaderSty()
//           Text('收费(元/度)').PriceHeaderSty().margin({left:20})
//         }
//         .width('90%')
//         .padding(15)
//         .backgroundColor('#0aa671')
//         .borderRadius(5)
//         Column({space:10}){
//           List({space:10}){
//             ForEach(this.priceList,(item:PriceType) => {
//               ListItem(){
//                 Column(){
//                   Row({space:100}){
//                     Text(`${item.startHour} - ${item.endHour}`).width(80).PriceCellSty()
//                     Text(`${item.price}`).width(60).PriceCellSty()
//                   }
//                   .width('90%')
//                   .height(40)
//                   Divider().width('95%').opacity(0.6)
//                 }
//               }
//             })
//           }
//           .width('90%')
//           .layoutWeight(1)
//         }
//         .width('90%')
//         .height(180)
//         .padding(10)
//         .borderWidth(1).borderColor(Color.Gray)
//       }
//       .width('90%')
//     }
//     .width('100%')
//     .padding(10)
//   }
// }
import { PriceType } from "../model/ChargeModel"
@Component
export struct ChargePriceDialogView {
  @Prop priceList:PriceType[]
  build() {
    Column() {
      // 顶部标题
      this.buildHeader()
      // 价格表格区域
      this.buildPriceTable()
      // 分隔线
      Divider()
        .strokeWidth(1)
        .color('#e0e0e0')
        .margin({ top: 25, bottom: 20 })
      // 底部提示
      this.buildFooter()
    }
    .padding(20)
    .backgroundColor('#f5f7fa')
    .borderRadius(12)
    .width('100%')
    .height('auto')
  }
  // 顶部标题组件
  @Builder
  buildHeader() {
    Text('桩编号：00205020101100000000323')
      .fontSize(14)
      .fontColor('#666666')
      .margin({ bottom: 15 })
  }
  // 价格表格组件 - 简化为两列
  @Builder
  buildPriceTable() {
    Column() {
      // 表头 - 左右分布
      Row() {
        Text('充电时段')
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .layoutWeight(1) // 左边占据1份空间
        Text('价格（元/度）')
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .layoutWeight(1) // 右边占据1份空间
      }
      .width('100%')
      .padding({ bottom: 10 })
      // 表格内容 - 左右分布
      ForEach(this.priceList,
        (item: PriceType, index: number) => {
          Row() {
            Text(`${item.startHour} - ${item.endHour}`)
              .fontSize(16)
              .fontColor('#333333')
              .layoutWeight(1) // 左边占据1份空间
            if(item.price){
              Text(`${item.price}`)
                .fontSize(16)
                .fontColor('#e91e63')// 价格使用红色强调
                .fontWeight(FontWeight.Medium)
                .layoutWeight(1) // 右边占据1份空间
            }
          }
          .width('100%')
          .padding({ top: 10, bottom: 10 })
          .backgroundColor(index % 2 === 0 ? '#ffffff' : '#f8f9fa')
        })
    }
    .width('100%')
    .padding(12)
    .backgroundColor(Color.White)
    .borderRadius(8)
    .shadow({
      radius: 4,
      color: '#20000000',
      offsetX: 1,
      offsetY: 1
    })
  }
  // 底部提示组件
  @Builder
  buildFooter() {
    Text('*充电费用仅供参考，请以实际收取费用为准')
      .fontSize(12)
      .fontColor('#999999')
      .fontStyle(FontStyle.Italic)
      .alignSelf(ItemAlign.Start)
  }
}
import { commonStorage, StorageConst, StyleConst } from "@tbs/common";
import UserCenterConst from "@tbs/common/src/main/ets/manager/UserCenterConst";
import { UserInfoData } from "../model/MineModel";
import { MineContentView } from "../view/MineContentView";
import { MineHeaderView } from "../view/MineHeaderView";
@Component
export struct MinePage {
  build() {
    Column() {
      //1.头部
      MineHeaderView()
      //2.主体
      MineContentView()
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_efefef'))
  }
}
{
  "float": [
    {
      "name": "page_text_font_size",
      "value": "50fp"
    }
  ]
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    }
  ]
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
{
  "module": {
    "name": "common_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
{
  "module": {
    "name": "common",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
{
  "module": {
    "name": "common_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
{
  "module": {
    "name": "mine",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
export * from './ShowToast'
export * from './BottomPop'
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "mine",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/mine",
		"installationFree": false
	}
}
import { StyleConst } from "../common";
import { ScreenUtils, WindowModel,ComponentUtils } from "../utils";
@CustomDialog
@Component
export struct BottomPop {
  controller: CustomDialogController;
  title: ResourceStr = '';
  titlePadding: Padding = { top: $r('app.float.size_16'), bottom: $r('app.float.size_16') }
  titleFontSize: ResourceStr = $r('app.float.size_text_16')
  titleTextColor: ResourceColor = Color.Black
  titleBgColor: ResourceColor = Color.Transparent
  contentBgColor: ResourceColor = Color.Transparent
  bgColor?: ResourceColor = Color.White
  // 软键盘是否显示
  @State keyBoardVisible: boolean = false
  keyboardAvoidMode: KeyboardAvoidMode = KeyboardAvoidMode.DEFAULT
  minHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.3 // 弹窗最低高度
  maxHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.8 // 弹窗最大高度
  @State dialogMaxHeight: number = 0 // 通过 maxHeight 计算出来的内容的高度
  @Builder
  child() {
  };
  @BuilderParam childBuilderParam: () => void = this.child;
  aboutToAppear(): void {
    if (this.isKeyboardAvoidNone()) {
      this.getKeyBoardVisible()
    }
    this.getTitleHeight()
  }
  // 软键盘是否拉起
  getKeyBoardVisible() {
    WindowModel.getInstance().getKeyBoardVisible((visible) => {
      this.keyBoardVisible = visible
    })
  }
  // 弹窗是否在拉起软键盘时进行自动避让
  isKeyboardAvoidNone() {
    return this.keyboardAvoidMode === KeyboardAvoidMode.NONE // 弹窗不避让软键盘
  }
  getTitleHeight() {
    ComponentUtils.getComponentHeightSync('BottomPop_title', (componentHeight) => {
      const safeBottomHeight = ScreenUtils.getInstance().getSafeBottomHeight() // 底部安全区高度
      // 内容最大高度 = 屏幕80%高度 - title高度 - 底部安全区高度
      this.dialogMaxHeight = Number(this.maxHeight) - componentHeight - safeBottomHeight
    })
  }
  build() {
    Stack({ alignContent: Alignment.TopEnd }) {
      Column() {
        Text(this.title)
          .padding(this.titlePadding)
          .fontColor(this.titleTextColor)
          .fontSize(this.titleFontSize)
          .fontWeight(FontWeight.Medium)
          .textAlign(TextAlign.Center)
          .width(StyleConst.FULL_WIDTH)
          .height($r('app.float.size_50'))
          .backgroundColor(this.titleBgColor)
          .id('BottomPop_title')
          .borderRadius({
            topLeft: $r('app.float.size_16'),
            topRight: $r('app.float.size_16')
          })
        Column() {
          this.childBuilderParam()
        }
        .backgroundColor(this.contentBgColor)
        .constraintSize({
          maxHeight: this.dialogMaxHeight,
        })
      }
      .padding({
        bottom: ScreenUtils.getInstance().getSafeBottomHeight(), // 设置padding避开底部安全区
      })
      .width(StyleConst.FULL_WIDTH)
      .backgroundColor(this.bgColor)
      .borderRadius({
        topLeft: $r('app.float.size_16'),
        topRight: $r('app.float.size_16')
      })
      .constraintSize({
        maxHeight: this.maxHeight,
        minHeight: this.minHeight
      })
      Image($r("app.media.common_bottom_sheet_close"))
        .size({ width: $r('app.float.size_20'), height: $r('app.float.size_20') })
        .margin({ top: $r('app.float.size_16'), right: $r('app.float.size_16') })
        .responseRegion({
          x: '-25%',
          y: '-25%',
          width: '150%',
          height: '150%'
        })
        .onClick(() => {
          this.controller.close();
        })
    }
  }
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "common",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/common",
		"installationFree": false
	}
}
{
  "color": [
    {
      "name": "color_0aa671",
      "value": "#0aa671"
    },
    {
      "name": "start_window_background",
      "value": "#FFFFFF"
    },
    {
      "name": "color_0165b8",
      "value": "#0165b8"
    },
    {
      "name": "color_182431",
      "value": "#182431"
    },
    {
      "name": "color_efefef",
      "value": "#EFEFEF"
    },
    {
      "name": "color_f5f5f5",
      "value": "#F5F5F5"
    },
    {
      "name": "color_adadb3",
      "value": "#adadb3"
    },
    {
      "name": "color_fff",
      "value": "#fff"
    },
    {
      "name": "color_898e92",
      "value": "#898e92"
    },
    {
      "name": "color_0165B8",
      "value": "#0165B8"
    },
    {
      "name": "color_f0f2f4",
      "value": "#f0f2f4"
    },
    {
      "name": "color_80000000",
      "value": "#80000000"
    },
    {
      "name": "color_009688",
      "value": "#009688"
    },
    {
      "name": "color_d68751",
      "value": "#d68751"
    },
    {
      "name": "color_F44336",
      "value": "#F44336"
    },
    {
      "name": "color_666",
      "value": "#666"
    },
    {
      "name": "color_999",
      "value": "#999"
    }
  ]
}
import { promptAction } from '@kit.ArkUI'
//轻提示工具类
export const toast = (hintContent: string | ResourceStr, alignment: Alignment = Alignment.Center): void => {
  promptAction.showToast({ message: hintContent, alignment: alignment })
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    },
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
{
  "float": [
    {
      "name": "size_1",
      "value": "1vp"
    },
    {
      "name": "size_2",
      "value": "2vp"
    },
    {
      "name": "size_3",
      "value": "3vp"
    },
    {
      "name": "size_4",
      "value": "4vp"
    },
    {
      "name": "size_5",
      "value": "5vp"
    },
    {
      "name": "size_6",
      "value": "6vp"
    },
    {
      "name": "size_7",
      "value": "7vp"
    },
    {
      "name": "size_8",
      "value": "8vp"
    },
    {
      "name": "size_9",
      "value": "9vp"
    },
    {
      "name": "size_10",
      "value": "10vp"
    },
    {
      "name": "size_11",
      "value": "11vp"
    },
    {
      "name": "size_12",
      "value": "12vp"
    },
    {
      "name": "size_13",
      "value": "13vp"
    },
    {
      "name": "size_14",
      "value": "14vp"
    },
    {
      "name": "size_15",
      "value": "15vp"
    },
    {
      "name": "size_16",
      "value": "16vp"
    },
    {
      "name": "size_17",
      "value": "17vp"
    },
    {
      "name": "size_18",
      "value": "18vp"
    },
    {
      "name": "size_19",
      "value": "19vp"
    },
    {
      "name": "size_20",
      "value": "20vp"
    },
    {
      "name": "size_21",
      "value": "21vp"
    },
    {
      "name": "size_22",
      "value": "22vp"
    },
    {
      "name": "size_23",
      "value": "23vp"
    },
    {
      "name": "size_24",
      "value": "24vp"
    },
    {
      "name": "size_25",
      "value": "25vp"
    },
    {
      "name": "size_26",
      "value": "26vp"
    },
    {
      "name": "size_27",
      "value": "27vp"
    },
    {
      "name": "size_28",
      "value": "28vp"
    },
    {
      "name": "size_29",
      "value": "29vp"
    },
    {
      "name": "size_30",
      "value": "30vp"
    },
    {
      "name": "size_31",
      "value": "31vp"
    },
    {
      "name": "size_32",
      "value": "32vp"
    },
    {
      "name": "size_33",
      "value": "33vp"
    },
    {
      "name": "size_34",
      "value": "34vp"
    },
    {
      "name": "size_35",
      "value": "35vp"
    },
    {
      "name": "size_36",
      "value": "36vp"
    },
    {
      "name": "size_37",
      "value": "37vp"
    },
    {
      "name": "size_38",
      "value": "38vp"
    },
    {
      "name": "size_39",
      "value": "39vp"
    },
    {
      "name": "size_40",
      "value": "40vp"
    },
    {
      "name": "size_41",
      "value": "41vp"
    },
    {
      "name": "size_42",
      "value": "42vp"
    },
    {
      "name": "size_43",
      "value": "43vp"
    },
    {
      "name": "size_44",
      "value": "44vp"
    },
    {
      "name": "size_45",
      "value": "45vp"
    },
    {
      "name": "size_46",
      "value": "46vp"
    },
    {
      "name": "size_47",
      "value": "47vp"
    },
    {
      "name": "size_48",
      "value": "48vp"
    },
    {
      "name": "size_49",
      "value": "49vp"
    },
    {
      "name": "size_50",
      "value": "50vp"
    },
    {
      "name": "size_51",
      "value": "51vp"
    },
    {
      "name": "size_52",
      "value": "52vp"
    },
    {
      "name": "size_53",
      "value": "53vp"
    },
    {
      "name": "size_54",
      "value": "54vp"
    },
    {
      "name": "size_55",
      "value": "55vp"
    },
    {
      "name": "size_56",
      "value": "56vp"
    },
    {
      "name": "size_57",
      "value": "57vp"
    },
    {
      "name": "size_58",
      "value": "58vp"
    },
    {
      "name": "size_59",
      "value": "59vp"
    },
    {
      "name": "size_60",
      "value": "60vp"
    },
    {
      "name": "size_61",
      "value": "61vp"
    },
    {
      "name": "size_62",
      "value": "62vp"
    },
    {
      "name": "size_63",
      "value": "63vp"
    },
    {
      "name": "size_64",
      "value": "64vp"
    },
    {
      "name": "size_65",
      "value": "65vp"
    },
    {
      "name": "size_66",
      "value": "66vp"
    },
    {
      "name": "size_67",
      "value": "67vp"
    },
    {
      "name": "size_68",
      "value": "68vp"
    },
    {
      "name": "size_69",
      "value": "69vp"
    },
    {
      "name": "size_70",
      "value": "70vp"
    },
    {
      "name": "size_71",
      "value": "71vp"
    },
    {
      "name": "size_72",
      "value": "72vp"
    },
    {
      "name": "size_73",
      "value": "73vp"
    },
    {
      "name": "size_74",
      "value": "74vp"
    },
    {
      "name": "size_75",
      "value": "75vp"
    },
    {
      "name": "size_76",
      "value": "76vp"
    },
    {
      "name": "size_77",
      "value": "77vp"
    },
    {
      "name": "size_78",
      "value": "78vp"
    },
    {
      "name": "size_79",
      "value": "79vp"
    },
    {
      "name": "size_80",
      "value": "80vp"
    },
    {
      "name": "size_81",
      "value": "81vp"
    },
    {
      "name": "size_82",
      "value": "82vp"
    },
    {
      "name": "size_83",
      "value": "83vp"
    },
    {
      "name": "size_84",
      "value": "84vp"
    },
    {
      "name": "size_85",
      "value": "85vp"
    },
    {
      "name": "size_86",
      "value": "86vp"
    },
    {
      "name": "size_87",
      "value": "87vp"
    },
    {
      "name": "size_88",
      "value": "88vp"
    },
    {
      "name": "size_89",
      "value": "89vp"
    },
    {
      "name": "size_90",
      "value": "90vp"
    },
    {
      "name": "size_91",
      "value": "91vp"
    },
    {
      "name": "size_92",
      "value": "92vp"
    },
    {
      "name": "size_93",
      "value": "93vp"
    },
    {
      "name": "size_94",
      "value": "94vp"
    },
    {
      "name": "size_95",
      "value": "95vp"
    },
    {
      "name": "size_96",
      "value": "96vp"
    },
    {
      "name": "size_97",
      "value": "97vp"
    },
    {
      "name": "size_98",
      "value": "98vp"
    },
    {
      "name": "size_99",
      "value": "99vp"
    },
    {
      "name": "size_100",
      "value": "100vp"
    },
    {
      "name": "size_101",
      "value": "101vp"
    },
    {
      "name": "size_102",
      "value": "102vp"
    },
    {
      "name": "size_103",
      "value": "103vp"
    },
    {
      "name": "size_104",
      "value": "104vp"
    },
    {
      "name": "size_105",
      "value": "105vp"
    },
    {
      "name": "size_106",
      "value": "106vp"
    },
    {
      "name": "size_107",
      "value": "107vp"
    },
    {
      "name": "size_108",
      "value": "108vp"
    },
    {
      "name": "size_109",
      "value": "109vp"
    },
    {
      "name": "size_110",
      "value": "110vp"
    },
    {
      "name": "size_111",
      "value": "111vp"
    },
    {
      "name": "size_112",
      "value": "112vp"
    },
    {
      "name": "size_113",
      "value": "113vp"
    },
    {
      "name": "size_114",
      "value": "114vp"
    },
    {
      "name": "size_115",
      "value": "115vp"
    },
    {
      "name": "size_116",
      "value": "116vp"
    },
    {
      "name": "size_117",
      "value": "117vp"
    },
    {
      "name": "size_118",
      "value": "118vp"
    },
    {
      "name": "size_119",
      "value": "119vp"
    },
    {
      "name": "size_120",
      "value": "120vp"
    },
    {
      "name": "size_121",
      "value": "121vp"
    },
    {
      "name": "size_122",
      "value": "122vp"
    },
    {
      "name": "size_123",
      "value": "123vp"
    },
    {
      "name": "size_124",
      "value": "124vp"
    },
    {
      "name": "size_125",
      "value": "125vp"
    },
    {
      "name": "size_126",
      "value": "126vp"
    },
    {
      "name": "size_127",
      "value": "127vp"
    },
    {
      "name": "size_128",
      "value": "128vp"
    },
    {
      "name": "size_129",
      "value": "129vp"
    },
    {
      "name": "size_130",
      "value": "130vp"
    },
    {
      "name": "size_131",
      "value": "131vp"
    },
    {
      "name": "size_132",
      "value": "132vp"
    },
    {
      "name": "size_133",
      "value": "133vp"
    },
    {
      "name": "size_134",
      "value": "134vp"
    },
    {
      "name": "size_135",
      "value": "135vp"
    },
    {
      "name": "size_136",
      "value": "136vp"
    },
    {
      "name": "size_137",
      "value": "137vp"
    },
    {
      "name": "size_138",
      "value": "138vp"
    },
    {
      "name": "size_139",
      "value": "139vp"
    },
    {
      "name": "size_140",
      "value": "140vp"
    },
    {
      "name": "size_141",
      "value": "141vp"
    },
    {
      "name": "size_142",
      "value": "142vp"
    },
    {
      "name": "size_143",
      "value": "143vp"
    },
    {
      "name": "size_144",
      "value": "144vp"
    },
    {
      "name": "size_145",
      "value": "145vp"
    },
    {
      "name": "size_146",
      "value": "146vp"
    },
    {
      "name": "size_147",
      "value": "147vp"
    },
    {
      "name": "size_148",
      "value": "148vp"
    },
    {
      "name": "size_149",
      "value": "149vp"
    },
    {
      "name": "size_150",
      "value": "150vp"
    },
    {
      "name": "size_151",
      "value": "151vp"
    },
    {
      "name": "size_152",
      "value": "152vp"
    },
    {
      "name": "size_153",
      "value": "153vp"
    },
    {
      "name": "size_154",
      "value": "154vp"
    },
    {
      "name": "size_155",
      "value": "155vp"
    },
    {
      "name": "size_156",
      "value": "156vp"
    },
    {
      "name": "size_157",
      "value": "157vp"
    },
    {
      "name": "size_158",
      "value": "158vp"
    },
    {
      "name": "size_159",
      "value": "159vp"
    },
    {
      "name": "size_160",
      "value": "160vp"
    },
    {
      "name": "size_161",
      "value": "161vp"
    },
    {
      "name": "size_162",
      "value": "162vp"
    },
    {
      "name": "size_163",
      "value": "163vp"
    },
    {
      "name": "size_164",
      "value": "164vp"
    },
    {
      "name": "size_165",
      "value": "165vp"
    },
    {
      "name": "size_166",
      "value": "166vp"
    },
    {
      "name": "size_167",
      "value": "167vp"
    },
    {
      "name": "size_168",
      "value": "168vp"
    },
    {
      "name": "size_169",
      "value": "169vp"
    },
    {
      "name": "size_170",
      "value": "170vp"
    },
    {
      "name": "size_171",
      "value": "171vp"
    },
    {
      "name": "size_172",
      "value": "172vp"
    },
    {
      "name": "size_173",
      "value": "173vp"
    },
    {
      "name": "size_174",
      "value": "174vp"
    },
    {
      "name": "size_175",
      "value": "175vp"
    },
    {
      "name": "size_176",
      "value": "176vp"
    },
    {
      "name": "size_177",
      "value": "177vp"
    },
    {
      "name": "size_178",
      "value": "178vp"
    },
    {
      "name": "size_179",
      "value": "179vp"
    },
    {
      "name": "size_180",
      "value": "180vp"
    },
    {
      "name": "size_181",
      "value": "181vp"
    },
    {
      "name": "size_182",
      "value": "182vp"
    },
    {
      "name": "size_183",
      "value": "183vp"
    },
    {
      "name": "size_184",
      "value": "184vp"
    },
    {
      "name": "size_185",
      "value": "185vp"
    },
    {
      "name": "size_186",
      "value": "186vp"
    },
    {
      "name": "size_187",
      "value": "187vp"
    },
    {
      "name": "size_188",
      "value": "188vp"
    },
    {
      "name": "size_189",
      "value": "189vp"
    },
    {
      "name": "size_190",
      "value": "190vp"
    },
    {
      "name": "size_191",
      "value": "191vp"
    },
    {
      "name": "size_192",
      "value": "192vp"
    },
    {
      "name": "size_193",
      "value": "193vp"
    },
    {
      "name": "size_194",
      "value": "194vp"
    },
    {
      "name": "size_195",
      "value": "195vp"
    },
    {
      "name": "size_196",
      "value": "196vp"
    },
    {
      "name": "size_197",
      "value": "197vp"
    },
    {
      "name": "size_198",
      "value": "198vp"
    },
    {
      "name": "size_199",
      "value": "199vp"
    },
    {
      "name": "size_200",
      "value": "200vp"
    },
    {
      "name": "size_201",
      "value": "201vp"
    },
    {
      "name": "size_202",
      "value": "202vp"
    },
    {
      "name": "size_203",
      "value": "203vp"
    },
    {
      "name": "size_204",
      "value": "204vp"
    },
    {
      "name": "size_205",
      "value": "205vp"
    },
    {
      "name": "size_206",
      "value": "206vp"
    },
    {
      "name": "size_207",
      "value": "207vp"
    },
    {
      "name": "size_208",
      "value": "208vp"
    },
    {
      "name": "size_209",
      "value": "209vp"
    },
    {
      "name": "size_210",
      "value": "210vp"
    },
    {
      "name": "size_211",
      "value": "211vp"
    },
    {
      "name": "size_212",
      "value": "212vp"
    },
    {
      "name": "size_213",
      "value": "213vp"
    },
    {
      "name": "size_214",
      "value": "214vp"
    },
    {
      "name": "size_215",
      "value": "215vp"
    },
    {
      "name": "size_216",
      "value": "216vp"
    },
    {
      "name": "size_217",
      "value": "217vp"
    },
    {
      "name": "size_218",
      "value": "218vp"
    },
    {
      "name": "size_219",
      "value": "219vp"
    },
    {
      "name": "size_220",
      "value": "220vp"
    },
    {
      "name": "size_221",
      "value": "221vp"
    },
    {
      "name": "size_222",
      "value": "222vp"
    },
    {
      "name": "size_223",
      "value": "223vp"
    },
    {
      "name": "size_224",
      "value": "224vp"
    },
    {
      "name": "size_225",
      "value": "225vp"
    },
    {
      "name": "size_226",
      "value": "226vp"
    },
    {
      "name": "size_227",
      "value": "227vp"
    },
    {
      "name": "size_228",
      "value": "228vp"
    },
    {
      "name": "size_229",
      "value": "229vp"
    },
    {
      "name": "size_230",
      "value": "230vp"
    },
    {
      "name": "size_231",
      "value": "231vp"
    },
    {
      "name": "size_232",
      "value": "232vp"
    },
    {
      "name": "size_233",
      "value": "233vp"
    },
    {
      "name": "size_234",
      "value": "234vp"
    },
    {
      "name": "size_235",
      "value": "235vp"
    },
    {
      "name": "size_236",
      "value": "236vp"
    },
    {
      "name": "size_237",
      "value": "237vp"
    },
    {
      "name": "size_238",
      "value": "238vp"
    },
    {
      "name": "size_239",
      "value": "239vp"
    },
    {
      "name": "size_240",
      "value": "240vp"
    },
    {
      "name": "size_241",
      "value": "241vp"
    },
    {
      "name": "size_242",
      "value": "242vp"
    },
    {
      "name": "size_243",
      "value": "243vp"
    },
    {
      "name": "size_244",
      "value": "244vp"
    },
    {
      "name": "size_245",
      "value": "245vp"
    },
    {
      "name": "size_246",
      "value": "246vp"
    },
    {
      "name": "size_247",
      "value": "247vp"
    },
    {
      "name": "size_248",
      "value": "248vp"
    },
    {
      "name": "size_249",
      "value": "249vp"
    },
    {
      "name": "size_250",
      "value": "250vp"
    },
    {
      "name": "size_251",
      "value": "251vp"
    },
    {
      "name": "size_252",
      "value": "252vp"
    },
    {
      "name": "size_253",
      "value": "253vp"
    },
    {
      "name": "size_254",
      "value": "254vp"
    },
    {
      "name": "size_255",
      "value": "255vp"
    },
    {
      "name": "size_256",
      "value": "256vp"
    },
    {
      "name": "size_257",
      "value": "257vp"
    },
    {
      "name": "size_258",
      "value": "258vp"
    },
    {
      "name": "size_259",
      "value": "259vp"
    },
    {
      "name": "size_260",
      "value": "260vp"
    },
    {
      "name": "size_261",
      "value": "261vp"
    },
    {
      "name": "size_262",
      "value": "262vp"
    },
    {
      "name": "size_263",
      "value": "263vp"
    },
    {
      "name": "size_264",
      "value": "264vp"
    },
    {
      "name": "size_265",
      "value": "265vp"
    },
    {
      "name": "size_266",
      "value": "266vp"
    },
    {
      "name": "size_267",
      "value": "267vp"
    },
    {
      "name": "size_268",
      "value": "268vp"
    },
    {
      "name": "size_269",
      "value": "269vp"
    },
    {
      "name": "size_270",
      "value": "270vp"
    },
    {
      "name": "size_271",
      "value": "271vp"
    },
    {
      "name": "size_272",
      "value": "272vp"
    },
    {
      "name": "size_273",
      "value": "273vp"
    },
    {
      "name": "size_274",
      "value": "274vp"
    },
    {
      "name": "size_275",
      "value": "275vp"
    },
    {
      "name": "size_276",
      "value": "276vp"
    },
    {
      "name": "size_277",
      "value": "277vp"
    },
    {
      "name": "size_278",
      "value": "278vp"
    },
    {
      "name": "size_279",
      "value": "279vp"
    },
    {
      "name": "size_280",
      "value": "280vp"
    },
    {
      "name": "size_281",
      "value": "281vp"
    },
    {
      "name": "size_282",
      "value": "282vp"
    },
    {
      "name": "size_283",
      "value": "283vp"
    },
    {
      "name": "size_284",
      "value": "284vp"
    },
    {
      "name": "size_285",
      "value": "285vp"
    },
    {
      "name": "size_286",
      "value": "286vp"
    },
    {
      "name": "size_287",
      "value": "287vp"
    },
    {
      "name": "size_288",
      "value": "288vp"
    },
    {
      "name": "size_289",
      "value": "289vp"
    },
    {
      "name": "size_290",
      "value": "290vp"
    },
    {
      "name": "size_291",
      "value": "291vp"
    },
    {
      "name": "size_292",
      "value": "292vp"
    },
    {
      "name": "size_293",
      "value": "293vp"
    },
    {
      "name": "size_294",
      "value": "294vp"
    },
    {
      "name": "size_295",
      "value": "295vp"
    },
    {
      "name": "size_296",
      "value": "296vp"
    },
    {
      "name": "size_297",
      "value": "297vp"
    },
    {
      "name": "size_298",
      "value": "298vp"
    },
    {
      "name": "size_299",
      "value": "299vp"
    },
    {
      "name": "size_300",
      "value": "300vp"
    },
    {
      "name": "size_text_1",
      "value": "1fp"
    },
    {
      "name": "size_text_2",
      "value": "2fp"
    },
    {
      "name": "size_text_3",
      "value": "3fp"
    },
    {
      "name": "size_text_4",
      "value": "4fp"
    },
    {
      "name": "size_text_5",
      "value": "5fp"
    },
    {
      "name": "size_text_6",
      "value": "6fp"
    },
    {
      "name": "size_text_7",
      "value": "7fp"
    },
    {
      "name": "size_text_8",
      "value": "8fp"
    },
    {
      "name": "size_text_9",
      "value": "9fp"
    },
    {
      "name": "size_text_10",
      "value": "10fp"
    },
    {
      "name": "size_text_11",
      "value": "11fp"
    },
    {
      "name": "size_text_12",
      "value": "12fp"
    },
    {
      "name": "size_text_13",
      "value": "13fp"
    },
    {
      "name": "size_text_14",
      "value": "14fp"
    },
    {
      "name": "size_text_15",
      "value": "15fp"
    },
    {
      "name": "size_text_16",
      "value": "16fp"
    },
    {
      "name": "size_text_17",
      "value": "17fp"
    },
    {
      "name": "size_text_18",
      "value": "18fp"
    },
    {
      "name": "size_text_19",
      "value": "19fp"
    },
    {
      "name": "size_text_20",
      "value": "20fp"
    },
    {
      "name": "size_text_21",
      "value": "21fp"
    },
    {
      "name": "size_text_22",
      "value": "22fp"
    },
    {
      "name": "size_text_23",
      "value": "23fp"
    },
    {
      "name": "size_text_24",
      "value": "24fp"
    },
    {
      "name": "size_text_25",
      "value": "25fp"
    },
    {
      "name": "size_text_26",
      "value": "26fp"
    },
    {
      "name": "size_text_27",
      "value": "27fp"
    },
    {
      "name": "size_text_28",
      "value": "28fp"
    },
    {
      "name": "size_text_29",
      "value": "29fp"
    },
    {
      "name": "size_text_30",
      "value": "30fp"
    },
    {
      "name": "size_text_31",
      "value": "31fp"
    },
    {
      "name": "size_text_32",
      "value": "32fp"
    },
    {
      "name": "size_text_33",
      "value": "33fp"
    },
    {
      "name": "size_text_34",
      "value": "34fp"
    },
    {
      "name": "size_text_35",
      "value": "35fp"
    },
    {
      "name": "size_text_36",
      "value": "36fp"
    },
    {
      "name": "size_text_37",
      "value": "37fp"
    },
    {
      "name": "size_text_38",
      "value": "38fp"
    },
    {
      "name": "size_text_39",
      "value": "39fp"
    },
    {
      "name": "size_text_40",
      "value": "40fp"
    },
    {
      "name": "size_text_41",
      "value": "41fp"
    },
    {
      "name": "size_text_42",
      "value": "42fp"
    },
    {
      "name": "size_text_43",
      "value": "43fp"
    },
    {
      "name": "size_text_44",
      "value": "44fp"
    },
    {
      "name": "size_text_45",
      "value": "45fp"
    },
    {
      "name": "size_text_46",
      "value": "46fp"
    },
    {
      "name": "size_text_47",
      "value": "47fp"
    },
    {
      "name": "size_text_48",
      "value": "48fp"
    },
    {
      "name": "size_text_49",
      "value": "49fp"
    },
    {
      "name": "size_text_50",
      "value": "50fp"
    },
    {
      "name": "size_text_51",
      "value": "51fp"
    },
    {
      "name": "size_text_52",
      "value": "52fp"
    },
    {
      "name": "size_text_53",
      "value": "53fp"
    },
    {
      "name": "size_text_54",
      "value": "54fp"
    },
    {
      "name": "size_text_55",
      "value": "55fp"
    },
    {
      "name": "size_text_56",
      "value": "56fp"
    },
    {
      "name": "size_text_57",
      "value": "57fp"
    },
    {
      "name": "size_text_58",
      "value": "58fp"
    },
    {
      "name": "size_text_59",
      "value": "59fp"
    },
    {
      "name": "size_text_60",
      "value": "60fp"
    },
    {
      "name": "size_text_61",
      "value": "61fp"
    },
    {
      "name": "size_text_62",
      "value": "62fp"
    },
    {
      "name": "size_text_63",
      "value": "63fp"
    },
    {
      "name": "size_text_64",
      "value": "64fp"
    },
    {
      "name": "size_text_65",
      "value": "65fp"
    },
    {
      "name": "size_text_66",
      "value": "66fp"
    },
    {
      "name": "size_text_67",
      "value": "67fp"
    },
    {
      "name": "size_text_68",
      "value": "68fp"
    },
    {
      "name": "size_text_69",
      "value": "69fp"
    },
    {
      "name": "size_text_70",
      "value": "70fp"
    },
    {
      "name": "size_text_71",
      "value": "71fp"
    },
    {
      "name": "size_text_72",
      "value": "72fp"
    },
    {
      "name": "size_text_73",
      "value": "73fp"
    },
    {
      "name": "size_text_74",
      "value": "74fp"
    },
    {
      "name": "size_text_75",
      "value": "75fp"
    },
    {
      "name": "size_text_76",
      "value": "76fp"
    },
    {
      "name": "size_text_77",
      "value": "77fp"
    },
    {
      "name": "size_text_78",
      "value": "78fp"
    },
    {
      "name": "size_text_79",
      "value": "79fp"
    },
    {
      "name": "size_text_80",
      "value": "80fp"
    },
    {
      "name": "size_text_81",
      "value": "81fp"
    },
    {
      "name": "size_text_82",
      "value": "82fp"
    },
    {
      "name": "size_text_83",
      "value": "83fp"
    },
    {
      "name": "size_text_84",
      "value": "84fp"
    },
    {
      "name": "size_text_85",
      "value": "85fp"
    },
    {
      "name": "size_text_86",
      "value": "86fp"
    },
    {
      "name": "size_text_87",
      "value": "87fp"
    },
    {
      "name": "size_text_88",
      "value": "88fp"
    },
    {
      "name": "size_text_89",
      "value": "89fp"
    },
    {
      "name": "size_text_90",
      "value": "90fp"
    },
    {
      "name": "size_text_91",
      "value": "91fp"
    },
    {
      "name": "size_text_92",
      "value": "92fp"
    },
    {
      "name": "size_text_93",
      "value": "93fp"
    },
    {
      "name": "size_text_94",
      "value": "94fp"
    },
    {
      "name": "size_text_95",
      "value": "95fp"
    },
    {
      "name": "size_text_96",
      "value": "96fp"
    },
    {
      "name": "size_text_97",
      "value": "97fp"
    },
    {
      "name": "size_text_98",
      "value": "98fp"
    },
    {
      "name": "size_text_99",
      "value": "99fp"
    },
    {
      "name": "size_text_100",
      "value": "100fp"
    }
  ]
}
export class UserInfoData {
  id?: number
  username?: string
  nickname?: string
  balance?: number
  avatarUrl?: string
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
export class CommonDataSource<T> implements IDataSource {
  private listeners: DataChangeListener[] = [];
  protected items: T[] = []
  public totalCount(): number {
    return this.items.length
  }
  public getData(index: number): T | void {
    return this.items[index]
  };
  public getList(): T[] {
    return this.items
  }
  public clearData() {
    this.items = [];
    this.notifyDataReload()
  }
  public resetData(data: T | T[]) {
    this.items = [];
    if (Array.isArray(data)) {
      this.items.push(...data);
    } else {
      this.items.push(data);
    }
    this.notifyDataReload()
  }
  public setDataArray(data: T[]) {
    this.items = data
    this.notifyDataReload()
  }
  // 向列表追加数据
  public pushData(data: T | T[]): void {
    let fromIndex = this.items.length
    if (Array.isArray(data)) {
      this.items.push(...data)
    } else {
      this.items.push(data)
    }
    this.notifyDatasetAdd(fromIndex, this.items.length - fromIndex)
  }
  public changeItem(index: number) {
    this.notifyDataChange(index)
  }
  public deleteData(index: number): void {
    this.items.splice(index, 1);
    this.notifyDataDelete(index);
  }
  registerDataChangeListener(listener: DataChangeListener): void {
    if (this.listeners.indexOf(listener) < 0) {
      this.listeners.push(listener);
    }
  }
  unregisterDataChangeListener(listener: DataChangeListener): void {
    const pos = this.listeners.indexOf(listener);
    if (pos >= 0) {
      this.listeners.splice(pos, 1);
    }
  }
  notifyDataReload(): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.RELOAD }]);
    });
  }
  notifyDatasetAdd(insertIndex: number, addCount: number): void {
    this.listeners.forEach(listener => {
      listener.onDatasetChange([{ type: DataOperationType.ADD, index: insertIndex, count: addCount }]);
    })
  }
  notifyDataChange(changeIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.CHANGE, index: changeIndex }]);
    });
  }
  notifyDataDelete(deleteIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.DELETE, index: deleteIndex }]);
    });
  }
}
export * from './StyleConst'
export * from './TbsTitleBar'
export * from './BottomLoadingBuilder'
import { ScreenUtils, StyleConst } from "../../../../Index"
import { router } from "@kit.ArkUI"
@Component
export struct TbsTitleBar {
  @Prop title: ResourceStr = ''
  @Prop showBackIcon: boolean = false
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight())
      RelativeContainer() {
        Text(this.title)
          .fontColor(Color.White)
          .fontSize($r('app.float.size_text_20'))
          .textAlign(TextAlign.Center)
          .maxLines(1)
          .id('text')
          .alignRules({
            center: { anchor: "__container__", align: VerticalAlign.Center },
            middle: { anchor: "__container__", align: HorizontalAlign.Center }
          })
        if (this.showBackIcon) {
          Image($r('app.media.back'))
            .width($r('app.float.size_45'))
            .id('image')
            .alignRules({
              left: { anchor: "__container__", align: HorizontalAlign.Start }
            })
            .onClick(() => {
              router.back()
            })
        }
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_45'))
    }
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
export class StyleConst {
  // 宽高
  static readonly FULL_WIDTH: string = '100%';
  static readonly FULL_HEIGHT: string = '100%';
  static readonly PERCENT_10 = '10%'
  static readonly PERCENT_15 = '15%'
  static readonly PERCENT_17 = '17%'
  static readonly PERCENT_20 = '20%'
  static readonly PERCENT_25 = '25%'
  static readonly PERCENT_30 = '30%'
  static readonly PERCENT_35 = '35%'
  static readonly PERCENT_40 = '40%'
  static readonly PERCENT_45 = '45%'
  static readonly PERCENT_50 = '50%'
  static readonly PERCENT_60 = '60%'
  static readonly PERCENT_65 = '65%'
  static readonly PERCENT_70 = '70%'
  static readonly PERCENT_72 = '72%'
  static readonly PERCENT_75 = '75%'
  static readonly PERCENT_80 = '80%'
  static readonly PERCENT_85 = '85%'
  static readonly PERCENT_90 = '90%'
  static readonly PERCENT_95 = '95%'
  static readonly PERCENT_100 = '100%'
}
import { StyleConst } from "../../../../Index"
@Component
export struct BottomLoadingBuilder {
  @Prop haveNextPage: boolean
  @Prop loading: boolean
  @Prop dataLength: number
  build() {
    if (this.haveNextPage && this.loading) {
      Row() {
        LoadingProgress()
          .width($r('app.float.size_30'))
          .height($r('app.float.size_30'))
          .margin({ right: $r('app.float.size_10') })
        Text($r('app.string.loading'))
          .fontSize($r('app.float.size_text_14'))
          .fontColor($r('app.color.color_666'))
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_60'))
      .justifyContent(FlexAlign.Center)
    } else if (!this.haveNextPage && this.dataLength > 0) {
      Text($r('app.string.there_is_no_more_data'))
        .fontSize($r('app.float.size_text_14'))
        .fontColor($r('app.color.color_999'))
        .textAlign(TextAlign.Center)
        .width(StyleConst.FULL_WIDTH)
        .margin({ top: $r('app.float.size_10'), bottom: $r('app.float.size_20') })
    }
  }
}
import { abilityAccessCtrl, PermissionRequestResult, Permissions } from "@kit.AbilityKit";
import { BusinessError } from "@kit.BasicServicesKit";
import { appBundleManager } from "./AppBundleManager";
class PermissionManager{
  atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
  // 每次访问受目标权限保护的接口之前，都需要使用requestPermissionsFromUser()接口请求相应的权限。
  // 权限组：当应用请求权限时，同一个权限组的权限将会在一个弹窗内一起请求用户授权。用户点击同意，即同意了整个权限组。
  // 如定位权限组：['ohos.permission.APPROXIMATELY_LOCATION', 'ohos.permission.LOCATION']
  async checkPermissions(permissions: Array<Permissions>): Promise<boolean> {
    console.log(`check permission ${permissions}`);
    try {
      let grantStatusArray: abilityAccessCtrl.GrantStatus[] = [];
      for (let i = 0; i < permissions.length; i++) {
        grantStatusArray[i] = await this.checkPermissionInner(permissions[i]);
      }
      console.log(`checkPermissions: ${permissions}, grantStatus ${grantStatusArray} `);
      // todo 暂定全同意才算同意
      const denied = grantStatusArray.indexOf(abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) > -1;
      return !denied;
    } catch (e) {
      return Promise.reject(e);
    }
  }
  private async checkPermissionInner(permission: Permissions): Promise<abilityAccessCtrl.GrantStatus> {
    let grantStatus: abilityAccessCtrl.GrantStatus = abilityAccessCtrl.GrantStatus.PERMISSION_DENIED;
    // 校验应用是否被授予权限
    try {
      grantStatus = await this.atManager.checkAccessToken(appBundleManager.getTokenId(), permission);
    } catch (error) {
      const err: BusinessError = error as BusinessError;
      console.log(`Failed to check access token. Code is ${err.code}, message is ${err.message}`);
      return Promise.reject(`checkPermissionInner: checkAccessToken error: ${JSON.stringify(error)}`,);
    }
    return grantStatus;
  }
  async reqPermissionsFromUser(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
    // requestPermissionsFromUser会判断权限的授权状态来决定是否唤起弹窗
    try {
      let result: PermissionRequestResult = await atManager.requestPermissionsFromUser(context, permissions);
      let grantStatus: Array<number> = result.authResults;
      for (let i = 0; i < grantStatus.length; i++) {
        if (grantStatus[i] === 0) {
          // 用户授权，可以继续访问目标操作
          console.log(`reqPermissionsFromUser: ${permissions[i]} is granted`);
        } else {
          console.log(`reqPermissionsFromUser: ${permissions[i]} is denied`);
          return false;
        }
      }
      return true;
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
  //被拒绝后，再次点击全权限申请使用该方法
  async requestPermissionAgain(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    try {
      const result = await this.atManager.requestPermissionOnSetting(context, permissions)
      return result.every((status) => {
        return status === abilityAccessCtrl.GrantStatus.PERMISSION_GRANTED
      })
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
}
let permissionManager = new PermissionManager();
export { permissionManager };
export * from './LocationManager';
export * from './ThirdAppManager'
import { bundleManager } from "@kit.AbilityKit";
class AppBundleManager{
  private bundleInfo?: bundleManager.BundleInfo
  getBundleInfo(): bundleManager.BundleInfo {
    if (this.bundleInfo == null || this.bundleInfo == undefined) {
      return bundleManager.getBundleInfoForSelfSync(bundleManager.BundleFlag.GET_BUNDLE_INFO_WITH_APPLICATION)
    }
    return this.bundleInfo
  }
  getTokenId(): number {
    let bundleInfo = this.getBundleInfo();
    return bundleInfo.appInfo.accessTokenId;
  }
}
export const appBundleManager = new AppBundleManager()
import { BusinessError } from "@kit.BasicServicesKit"
import { bundleManager } from "@kit.AbilityKit"
export enum ThirdApp {
  Alipay = 'alipays://',
  Amapuri = "amapuri://", // 高德地图的 scheme
  Baidumap = "baidumap://map/direction", // 百度地图的 scheme
  Maps = "maps://", // 华为地图的 scheme
  Https = "https://" // App link scheme
}
class ThirdAppManager{
  /** 第三方应用是否安装 */
  isAppInstall(thirdApp: ThirdApp): boolean {
    try {
      return bundleManager.canOpenLink(thirdApp)
    } catch (e) {
      let code = (e as BusinessError)?.code
      let msg = (e as BusinessError)?.message ?? ''
      if (code !== undefined) {
        if (code === 17700056) {
          msg += ` Please include "${thirdApp.replace('://',
            '')}" inside the "querySchemes" element of module.json5 in your app module.`
        }
        console.log(`isAppInstall get error${msg}`)
      } else {
        console.log(`isAppInstall get error${e}`)
      }
      return false
    }
  }
}
export const thirdAppManager = new ThirdAppManager()
export class ChargeListData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: ChargeType[]
}
export class ChargeType {
  address?: string //地址
  coordinate?: string //坐标
  distance?: number //距离
  freePileTotal?: number //空闲数据
  id?: number //id
  imageUrl?: string //图片
  name?: string //站名
  pileTotal?: number //剩余数据
  pricePerHour?: number //多少钱一度
  tenantId?: number //租户id
  tenantName?: string //租户
}
export class PileListData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: PileType[]
}
export class PileType {
  code?: string //编号
  id?: number //id
  state?: number //充电桩状态
  stationId?: number //充电站站id
  stationName?: string //充电站站名
}
export class PriceListData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: PriceType[]
}
export class PriceType {
  endHour?: number|string  //结束时间
  id?: number  //id
  price?: string   //价格
  startHour?: number|string  //开始时间
  tenantId?: number  //租户id
}
export class OrderTypeData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: OrderType[]
}
export class OrderType{
  id?: number  //id
  pileCode?: string  //充电桩编号
  orderCode?: string  //订单号
  price?: number  //价格
  startAt?: string  //开始时间
  state?: number  //订单状态
  stationName?: string  //充电站名
  stopAt?: string  //结束时间
}
export class mapListItem {
  name: ResourceStr = ''
  link: string = ''
  isAppInstall: boolean = false
}
export class AddressData {
  latitude?: number = 0.0;
  longitude?: number = 0.0;
}
//桩参数
export const pileParam: Array<pileParamType> = [
  { text: $r('app.string.fast_charge'), type: '1' },
  { text: $r('app.string.180KW'), type: '2' },
  { text: $r('app.string.0V'), type: '3' },
  { text: $r('app.string.national_standard'), type: '4' }
]
export class pileParamType {
  text?: ResourceStr
  type?: string
}
import { geoLocationManager } from "@kit.LocationKit";
import { PermissionConst } from "./PermissionConst";
import { permissionManager } from "./PermissionManager";
class LocationManager {
  async requestPermissionAgain() {
    return await permissionManager.requestPermissionAgain(PermissionConst.locationPermissions, getContext(this))
  }
  // 检查是否有定位权限，外部可直接调用，异常时返回false
  async checkLocationPermissions(): Promise<boolean> {
    try {
      return await permissionManager.checkPermissions(PermissionConst.locationPermissions) &&
      geoLocationManager.isLocationEnabled();
    } catch (e) {
      console.log(`lucy== hasLocationPermissions, ${JSON.stringify(e)}`)
      return false;
    }
  }
  // 校验并申请权限，如果申请权限返回false，则抛出异常，使用者需要使用catch接收。
  async checkAndApplyPermissions(context: Context): Promise<boolean> {
    let isGranted = await this.checkLocationPermissions();
    if (isGranted) {
      return true;
    }
    try {
      let userGranted = await permissionManager.reqPermissionsFromUser(PermissionConst.locationPermissions, context);
      if (userGranted) {
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }
}
export const locationManager = new LocationManager()
import { Permissions } from '@kit.AbilityKit';
export class PermissionConst {
  static readonly locationPermissions: Array<Permissions> = [
    'ohos.permission.APPROXIMATELY_LOCATION',
    'ohos.permission.LOCATION',
  ];
  static readonly mediaRWPermissions: Array<Permissions> = [
    'ohos.permission.READ_MEDIA',
    'ohos.permission.WRITE_MEDIA'
  ];
  static readonly imageVideoReadPermission: Permissions = 'ohos.permission.READ_IMAGEVIDEO';
  static readonly imageVideoWritePermission: Permissions = 'ohos.permission.WRITE_IMAGEVIDEO';
  static readonly cameraPermission: Permissions = 'ohos.permission.CAMERA';
  // 获取OAID
  static readonly oaIdPermission: Permissions = 'ohos.permission.APP_TRACKING_CONSENT';
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "module description"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "charge"
    },
    {
      "name": "scan",
      "value": "scan"
    },
    {
      "name": "mine",
      "value": "mine"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "Welcome to log in to the Groundhog charging platform"
    },
    {
      "name": "please_select_the_tenant",
      "value": "Please select the tenant"
    },
    {
      "name": "please_enter_the_username",
      "value": "Please enter the username"
    },
    {
      "name": "please_enter_the_password",
      "value": "Please enter your password"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "Please enter the verification code"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "Please enter the company name"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "Please enter the company website"
    },
    {
      "name": "login",
      "value": "Login"
    },
    {
      "name": "no_account",
      "value": "No account?"
    },
    {
      "name": "register",
      "value": "Register"
    },
    {
      "name": "login_in",
      "value": "login in"
    },
    {
      "name": "existing_account",
      "value": "existing account?"
    },
    {
      "name": "register_immediately",
      "value": "register immediately"
    },
    {
      "name": "company_website",
      "value": "The company 's website, such as www.example.com"
    },
    {
      "name": "company_name",
      "value": "company name"
    },
    {
      "name": "password_length",
      "value": "Password: At least 5 characters in length"
    },
    {
      "name": "get_code",
      "value": "get code"
    },
    {
      "name": "verification_code",
      "value": "Verification code :666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "Welcome to register on the Groundhog charging platform"
    },
    {
      "name": "search_content",
      "value": "Please enter the search content"
    },
    {
      "name": "search",
      "value": "search"
    },
    {
      "name": "no_data",
      "value": "no data"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "Selection of charging pile"
    },
    {
      "name": "fast_charge",
      "value": "fast charge"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "national standard"
    },
    {
      "name": "idle",
      "value": "Idle"
    },
    {
      "name": "faults",
      "value": "Faults"
    },
    {
      "name": "charging_in_progress",
      "value": "Charging in progress"
    },
    {
      "name": "pile_number",
      "value": "Pile_number:"
    },
    {
      "name": "station_name",
      "value": "Station name:"
    },
    {
      "name": "agreement",
      "value": "agreement"
    },
    {
      "name": "certification",
      "value": "certification"
    },
    {
      "name": "feat",
      "value": "feat"
    },
    {
      "name": "message",
      "value": "message"
    },
    {
      "name": "person",
      "value": "person"
    },
    {
      "name": "rule",
      "value": "rule"
    },
    {
      "name": "order",
      "value": "order"
    },
    {
      "name": "service",
      "value": "service"
    },
    {
      "name": "there_is_no_more_data",
      "value": "There is no more data"
    },
    {
      "name": "loading",
      "value": "loading..."
    },
    {
      "name": "completed",
      "value": "Completed"
    },
    {
      "name": "pile_code",
      "value": "Pile code:"
    },
    {
      "name": "charge_name",
      "value": "Charge name:"
    },
    {
      "name": "price",
      "value": "Price:"
    },
    {
      "name": "order_status",
      "value": "Order status:"
    },
    {
      "name": "start_time",
      "value": "Start time:"
    },
    {
      "name": "end_time",
      "value": "End time:"
    },
    {
      "name": "stop_charge",
      "value": "Stop charging"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
import { StorageConst } from "./StorageConst"
import { UserInfoData } from "../model/UserInfoModel"
import { commonStorage } from "../utils"
class UserCenterConst {
  userInfo: UserInfoData | null = null
  getUserInfoData(): UserInfoData | null {
    if (this.userInfo) {
      return this.userInfo;
    }
    const value = commonStorage.getStringValueSync(StorageConst.USER_INFO, '');
    // 如果已经是对象，直接使用
    if (value && typeof value === 'object') {
      this.userInfo = value as UserInfoData;
      return this.userInfo;
    }
    // 如果是字符串，尝试解析
    if (typeof value === 'string' && value) {
      const p = JsonParse<UserInfoData>(value);
      if (p) {
        this.userInfo = p;
        return this.userInfo;
      }
    }
    return null;
  }
}
function JsonParse<T>(text: string): T | undefined {
  try {
    return JSON.parse(text);
  } catch (e) {
    console.error(`JSON解析错误: ${text}, 错误信息: ${e}`);
    return undefined;
  }
}
export default new UserCenterConst()
export class RoutePageConst {
  static readonly AppHomePage = "home/HomePage" //App-充电页面
  static readonly LoginPage = "login/LoginPage" //App-登录页面
}
{
  "module": {
    "name": "charge",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
//封装一个函数：简化时间格式
export const formatDate = (dateStr:string)=>{
  const date = new Date(dateStr)
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}
export class Apis {
  //注册
  static readonly USER_REGISTER = "/saas-api/tenant/register"
  //获取token-登录
  static readonly USER_LOGIN = "/saas-api/user/login"
  //获取租户ID
  static readonly USER_TENANT = "/saas-api/tenant/selects"
  //获取用户信息
  static readonly USER_INFO = "/wx-api/me/info"
  //获取充电站
  static readonly CHARGE_STATION_LIST = "/wx-api/station/list"
  //获取充电桩
  static readonly CHARGE_PILE_LIST = "/wx-api/pile/list"
  //获取充电价格
  static readonly CHARGE_PRICE = "/wx-api/price/list"
  //开始充电
  static readonly CHARGE_START = "/wx-api/charge/start"
  //结束充电
  static readonly CHARGE_STOP = "/wx-api/charge/stop"
  //获取充电订单列表
  static readonly CHARGE_ORDER_LIST = "/wx-api/charge/list"
}
export * from './StorageConst'
export * from './RoutePageConst'
export * from './UserCenterConst'
import measure from '@ohos.measure'
export class TextUtil{
  static getTextWidth(textContent: string,
    fontSize: number | string | Resource = $r('app.float.size_text_14'), maxLines: number = 1,
    weight: FontWeight | number = FontWeight.Regular): number {
    if (!textContent || textContent.length === 0) {
      return 0
    }
    const width: number = measure.measureText({
      textContent: textContent,
      fontSize: fontSize,
      fontWeight: weight,
      maxLines: maxLines
    })
    return px2vp(width)
  }
}
export * from './WindowModel'
export * from './GlobalContext'
export * from './TextUtil'
export { ScreenUtils } from './ScreenUtil';
export { initDataPreference, commonStorage } from './StorageUtils'
export * from './ComponentUtils'
export { formatDate } from './formatDate'
import http from '@ohos.net.http';
import { commonStorage } from '../../../../Index';
import { StorageConst } from '../manager';
import { ResponseResult } from './response';
export function requestApiCall(url: string,
  method: http.RequestMethod,
  data?: Record<string, number | boolean | string | Object | undefined>,
  headers?: Record<string, string>,
): Promise<ResponseResult> {
  const BASE_URL = 'https://charging.lusson.xyz'
  const httpRequest = http.createHttp();
  const defaultHeaders: Record<string, string> = {
    'Content-Type': 'application/json',
  }
  const token = commonStorage.getStringValueSync(StorageConst.TOKEN, "")
  if (token) {
    defaultHeaders['Authorization'] = `Bearer ${token}`
  }
  const finalHeaders: Record<string, string> = {};
  Object.keys(defaultHeaders).forEach(key => {
    finalHeaders[key] = defaultHeaders[key];
  });
  if (headers) {
    Object.keys(headers).forEach(key => {
      finalHeaders[key] = String(headers[key]);
    });
  }
  let responseResult = httpRequest.request(BASE_URL + url, {
    method: method,
    extraData: data ? JSON.stringify(data) : undefined,
    header: finalHeaders
  });
  let response: ResponseResult = new ResponseResult();
  return responseResult.then((value: http.HttpResponse) => {
    if (value.responseCode === 200) {
      let res: ResponseResult = JSON.parse(`${value.result}`);
      response.data = res.data;
      response.code = res.code;
      response.message = res.message;
    } else {
      response.message = '请求错误';
      response.code = 400;
    }
    return response;
  }).catch((error: Error) => {
    console.log('lucy++ error', JSON.stringify(error))
    response.message = '请求错误';
    response.code = 400;
    return response;
  })
}
export class StorageConst {
  static readonly TOKEN = 'token'
  static readonly USER_INFO = 'userInfo'
  // 屏幕宽高
  static readonly SCREEN_WIDTH_VP = 'screenWidthVp'
  static readonly SCREEN_HEIGHT_VP = 'screenHeightVp'
  // 折叠屏显示模式
  static readonly FOLD_DISPLAY_MODE = 'foldDisplayMode'
  static readonly SEARCH_HISTORY = "search_history"
}
import { window } from "@kit.ArkUI";
import { BusinessError } from "@kit.BasicServicesKit";
export class WindowModel {
  private constructor() {
  }
  /**
   * 默认样式
   */
  private readonly DEFAULT: window.SystemBarProperties = {
    statusBarColor: '#00000000',
    navigationBarColor: '#00000000',
    // 以下两个属性从API Version 8开始支持
    statusBarContentColor: '#000000',
    navigationBarContentColor: '#00000000'
  };
  /**
   * WindowModel 单例
   */
  private static instance?: WindowModel;
  /**
   * 获取WindowModel单例实例
   * @returns {WindowModel} WindowModel
   */
  static getInstance(): WindowModel {
    if (!WindowModel.instance) {
      WindowModel.instance = new WindowModel();
    }
    return WindowModel.instance;
  }
  /**
   * 缓存的当前WindowStage实例
   */
  private windowStage?: window.WindowStage;
  /**
   * 缓存windowStage
   * @param windowStage 当前WindowStage实例
   * @returns {void}
   */
  setWindowStage(windowStage: window.WindowStage): void {
    this.windowStage = windowStage;
  }
  getWindowStage(): window.WindowStage | undefined {
    return this.windowStage
  }
  /**
   * 当前主窗口是否开启沉浸模式
   * @param enable 是否开启
   * @returns {void}
   */
  setMainWindowImmersive(enable: boolean, properties?: window.SystemBarProperties): void {
    if (this.windowStage === undefined) {
      console.error('windowStage is undefined.');
      return;
    }
    // 1.获取应用主窗口。
    let windowClass: window.Window | null = null;
    this.windowStage.getMainWindow((err: BusinessError, data) => {
      let errCode: number = err.code;
      if (errCode) {
        console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));
        return;
      }
      windowClass = data;
      console.info('Succeeded in obtaining the main window data.');
      // 2.实现沉浸式效果。方式二：设置窗口为全屏布局，配合设置导航栏、状态栏的透明度、背景/文字颜色及高亮图标等属性，与主窗口显示保持协调一致。
      windowClass.setWindowLayoutFullScreen(enable, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the window layout to full-screen mode.');
      });
      const p = properties ? properties : this.DEFAULT
      windowClass.setWindowSystemBarProperties(p, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the system bar properties.');
      });
    })
  }
  /**
   * 软键盘是否显示/隐藏
   * @param callback
   */
  getKeyBoardVisible(callback: (visible: boolean) => void) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      // 监听软键盘的隐藏和显示
      currentWindow.on('avoidAreaChange', data => {
        if (data.type == window.AvoidAreaType.TYPE_KEYBOARD) {
          const keyBoardHeight = px2vp(data.area.bottomRect.height);
          if (keyBoardHeight > 0) {
            callback(true)
          } else {
            callback(false)
          }
        }
      })
    })
  }
}
import dataPreferences from '@ohos.data.preferences';
import preferences from '@ohos.data.preferences';
import { HashMap } from '@kit.ArkTS';
import { common } from '@kit.AbilityKit';
import { GlobalContext } from './GlobalContext';
import { BusinessError } from '@kit.BasicServicesKit';
class Storage{
  private name: string = 'app_storage'
  private preferences: dataPreferences.Preferences | null = null
  private listenerKeyMap = new HashMap<string, HashMap<string, Callback<string>>>()
  constructor(name: string) {
    this.name = name;
  }
  initStorage() {
    const context = GlobalContext.getContext().getObject('context') as common.UIAbilityContext
    const options: dataPreferences.Options = { name: this.name }
    this.preferences = dataPreferences.getPreferencesSync(context, options)
    this.preferences?.on('change', (key: string) => {
      const pageMap = this.listenerKeyMap.get(key)
      pageMap?.forEach((callBack: Callback<string>) => {
        callBack(key)
      })
    })
  }
  /**
   * 存储key,value到preference缓存里面
   * @param key
   * @param value
   */
  saveValueSync(key: string, value: preferences.ValueType) {
    this.preferences?.putSync(key, value)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 根据key删除值
   * @param key
   */
  deleteValueSync(key: string) {
    this.preferences?.deleteSync(key)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns string
   */
  getStringValueSync(key: string, defaultValue: string) {
    return this.preferences?.getSync(key, defaultValue) as string
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns Array<string>
   */
  getArrayStringValueSync(key: string, defaultValue: Array<string>) {
    return this.preferences?.getSync(key, defaultValue) as Array<string>
  }
}
export const commonStorage = new Storage('common_storage')
export function initDataPreference() {
  commonStorage.initStorage()
}
// 与EntryAbility交互，获取ability当前的数据
export class GlobalContext {
  static readonly CONTEXT = 'context';
  static readonly WANT = 'want';
  //状态栏高度
  static readonly STATUS_BAR_HEIGHT = 'statusBarHeight';
  //导航栏高度
  static readonly NAVIGATION_HEIGHT = 'navigationHeight';
  private constructor() { }
  private static instance: GlobalContext;
  private _objects = new Map<string, Object>();
  public static getContext(): GlobalContext {
    if (!GlobalContext.instance) {
      GlobalContext.instance = new GlobalContext();
    }
    return GlobalContext.instance;
  }
  getObject(value: string): Object | undefined {
    return this._objects.get(value);
  }
  setObject(key: string, objectClass: Object): void {
    this._objects.set(key, objectClass);
  }
}
import display from '@ohos.display';
import { GlobalContext } from '.';
import window from '@ohos.window';
import common from '@ohos.app.ability.common';
import { StorageConst } from '../manager';
export class ScreenUtils {
  private static instance: ScreenUtils;
  setWindow(windowInfo: window.Window) {
    // 获取窗口属性
    const properties = windowInfo.getWindowProperties();
    this.setScreen(properties.windowRect.width, properties.windowRect.height)
    windowInfo.on("windowSizeChange", (size: Size) => {
      this.setScreen(size.width, size.height)
    })
  }
  private constructor() {
    this.defaultDisplay = display.getDefaultDisplaySync()
    this.defaultDisplay.getCutoutInfo((e, data) => {
      this.cutoutInfo = data
    })
    let callback: Callback<display.FoldDisplayMode> = (data: display.FoldDisplayMode) => {
      this.setFoldDisplayMode(data)
    };
    display.on("foldDisplayModeChange", callback)
  }
  private setScreen(width: number, height: number) {
    AppStorage.setOrCreate(StorageConst.SCREEN_WIDTH_VP, px2vp(width));
    AppStorage.setOrCreate(StorageConst.SCREEN_HEIGHT_VP, px2vp(height));
  }
  private setFoldDisplayMode(data: display.FoldDisplayMode) {
    AppStorage.setOrCreate(StorageConst.FOLD_DISPLAY_MODE, data);
  }
  public static getInstance(): ScreenUtils {
    if (!ScreenUtils.instance) {
      ScreenUtils.instance = new ScreenUtils();
    }
    return ScreenUtils.instance;
  }
  //屏幕数据
  private defaultDisplay: display.Display | null = null
  //挖孔屏状态栏区域
  private cutoutInfo: display.CutoutInfo | null = null
  getDisplay(): display.Display | null {
    return this.defaultDisplay
  }
  getScreenWidthPx(): number {
    return this.defaultDisplay?.width ?? -1
  }
  getScreenHeightPx(): number {
    return this.defaultDisplay?.height ?? -1
  }
  getScreenContentHeightPX(): number {
    return vp2px(this.getScreenHeightVp() - this.getStatusBarHeight())
  }
  getScreenContentHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenWidthVp(): number {
    return px2vp(this.getScreenWidthPx())
  }
  /**
   * 获取刘海屏状态栏最大的区域
   * @returns
   */
  getStatusBarHeight(): number {
    const statusBar = GlobalContext.getContext().getObject(GlobalContext.STATUS_BAR_HEIGHT) as number;
    return px2vp(statusBar)
  }
  // 底部安全距离
  getSafeBottomHeight() {
    const navigation = GlobalContext.getContext().getObject(GlobalContext.NAVIGATION_HEIGHT) as number;
    return px2vp(navigation)
  }
  /**
   * 获取底部导航栏的高度
   * @returns
   */
  async getBottomNavBarHeight(context: common.BaseContext): Promise<number> {
    const win = await window.getLastWindow(context)
    return px2vp(win.getWindowAvoidArea(window.AvoidAreaType.TYPE_NAVIGATION_INDICATOR).bottomRect.height)
  }
  async getStatusBarColor(): Promise<string> {
    const currentWindow = await window.getLastWindow(getContext(this))
    return currentWindow.getWindowSystemBarProperties().statusBarColor ?? '#000000'
  }
  // 改变状态栏文字颜色
  updateStatusBarColor(isBlack: boolean) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      currentWindow.setWindowSystemBarProperties({ statusBarContentColor: isBlack ? '#000000' : '#ffffff' })
    })
  }
  // 检查设备是否可折叠
  isFoldable() {
    return display.isFoldable()
  }
  // 设备当前折叠状态是否为为完全展开
  isFoldExpanded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_EXPANDED
  }
  // 设备当前折叠状态是否为为半折叠
  isFoldHalfFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_HALF_FOLDED
  }
  // 设备当前折叠状态为是否为折叠
  isFoldFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_FOLDED
  }
}
import { componentUtils, inspector } from "@kit.ArkUI"
export class ComponentUtils {
  /**
   * 同步方式获取组件渲染后的实际高度
   * @param componentId 组件ID
   * @param callback 注册的回调函数
   */
  static getComponentHeightSync(componentId: string, callback: (width: number) => void): void {
    // 监听组件
    const listener = inspector.createComponentObserver(componentId)
    // 注册回调
    listener.on('layout', () => {
      const componentInfo = componentUtils.getRectangleById(componentId)
      const height = px2vp(componentInfo.size.height)
      callback?.(height)
      // 取消注册回调
      listener.off('layout')
    })
  }
}
export class ResponseResult {
  code?: number
  message?: string
  data?: object
}
export { requestApiCall } from './httpUtils'
export * from './Apis'
{
  "module": {
    "name": "mine_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
{
  "module": {
    "name": "common",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    }
  ]
}
import { StyleConst, TbsTitleBar, BottomPop, toast } from "@tbs/common"
import { router } from "@kit.ArkUI"
import { PileType, PriceType } from "../model/ChargeModel"
import { ChargePriceDialogView } from "../view/ChargePriceDialogView"
import { getChargePrice, getStartCharge } from "../viewModel/ChargeViewModel"
import './ChargeOrderPage'
//充电中
@Entry({ routeName: 'ChargingPage' })
@Component
export struct ChargingPage {
  @State pileItem: PileType = {}
  @State priceList: PriceType[] = []
  onPageShow(): void {
    const PileTypeParams = router.getParams() as Record<string, Object>
    if (PileTypeParams) {
      this.pileItem = PileTypeParams.item as PileType
    }
  }
  chargePriceController: CustomDialogController | null = new CustomDialogController({
    builder: BottomPop({
      title: '收费标准',
      bgColor: $r('app.color.color_f0f2f4'),
      titleBgColor: $r('app.color.color_f0f2f4'),
      contentBgColor: $r('app.color.color_f0f2f4'),
      keyboardAvoidMode: KeyboardAvoidMode.NONE,
      childBuilderParam: () => {
        this.chargePriceDialog()
      }
    }),
    customStyle: true,
    alignment: DialogAlignment.Bottom,
    maskColor: $r('app.color.color_80000000'),
  })
  @Builder
  chargePriceDialog() {
    ChargePriceDialogView({ priceList: this.priceList })
  }
  //获取不同时间段充电价格
  async getChargePriceData() {
    let data = await getChargePrice()
    if (data) {
      this.priceList = data
    }
  }
  //开始充电
  async getStartChargeData() {
    if (this.pileItem.id){
      let data = await getStartCharge(this.pileItem.id)
      if(data == 0){
        toast('充电成功')
        router.pushNamedRoute({
          name:'ChargeOrderPage'
        })
      }
    }
  }
  build() {
    Column({ space: 10 }) {
      //1.标题
      TbsTitleBar({ title: '充电ing', showBackIcon: true })
      //2.主体
      Column({ space: 10 }) {
        //2.1 充电站
        Row() {
          Text('充电站')
          Text(this.pileItem?.stationName)
        }
        .height($r('app.float.size_50'))
        .justifyContent(FlexAlign.SpaceBetween)
        .chargingSty()
        //2.2 设备编号
        Row() {
          Text('设备编号')
          Text(this.pileItem.code)
        }
        .height($r('app.float.size_50'))
        .justifyContent(FlexAlign.SpaceBetween)
        .chargingSty()
        //2.3 收费标准
        Column({ space: 20 }) {
          Row() {
            Text('收费标准')
            Text('收费规则 >>')
              .onClick(() => {
                this.chargePriceController?.open()
                this.getChargePriceData()
              })
          }
          .width(StyleConst.FULL_WIDTH)
          .justifyContent(FlexAlign.SpaceBetween)
          Row() {
            Text('充电时长')
            Text('充满即止 >>')
          }
          .width(StyleConst.FULL_WIDTH)
          .justifyContent(FlexAlign.SpaceBetween)
          Text('PS：此功能不涉及支付，只做演示使用')
            .fontColor(Color.Red)
        }
        .chargingSty()
        .alignItems(HorizontalAlign.Start)
        Button('充电')
          .onClick(() => {
            this.getStartChargeData()
          })
          .fontColor(Color.White)
          .backgroundColor($r('app.color.color_0aa671'))
          .width(StyleConst.PERCENT_95)
      }
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_efefef'))
  }
  //公共样式
  @Styles
  chargingSty(){
    .width(StyleConst.PERCENT_95)
    .padding($r('app.float.size_10'))
    .borderRadius($r('app.float.size_10'))
    .backgroundColor($r('app.color.color_fff'))
  }
}
import { ScreenUtils, StyleConst, toast } from "@tbs/common";
import { ChargeType } from "../model/ChargeModel";
import { ChargeListView } from "../view/ChargeListView";
import { ChargeSearchBarView } from "../view/ChargeSearchBarView";
import { getStations } from "../viewModel/ChargeViewModel";
@Component
export struct ChargePage {
  @State @Watch('onChangeName')name: string = ''
  @State chargeList: ChargeType[] = []
  inputController: TextInputController = new TextInputController()
  aboutToAppear(): void {
    this.getStationData()
  }
  //获取充电站数据
  async getStationData() {
    let data = await getStations(this.name)
    if (data && data.List) {
      this.chargeList = data.List
    }
  }
  onChangeName(){
    if(this.name == ''){
      this.getStationData()
    }
  }
  //顶部搜索
  @Builder
  chargeSearchBar() {
    ChargeSearchBarView({
      name: this.name,
      maxLength: 30,
      inputController: this.inputController,
      searchButtonCallback: (value) => {
        if (!value) {
          toast('请输入搜索内容')
        } else {
          this.name = value.replace(/\s+/g, '')
          this.getStationData()
        }
      }
    })
  }
  //搜索结果
  @Builder
  chargeSearchList() {
    ChargeListView({ chargeList: this.chargeList })
      .margin({ top: 50 + ScreenUtils.getInstance().getStatusBarHeight() })
  }
  build() {
    Stack() {
      this.chargeSearchBar() //顶部搜索
      this.chargeSearchList() //搜索结果
    }
    .alignContent(Alignment.Top)
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_f0f2f4'))
  }
}
import { BottomLoadingBuilder, formatDate, StyleConst, TbsTitleBar, toast } from "@tbs/common"
import { OrderType } from "../model/ChargeModel"
import { getChargeOrders, getStopCharge } from "../viewModel/ChargeViewModel"
@Entry({ routeName: 'ChargeOrderPage' })
@Component
export struct ChargeOrderPage {
  @State Orders: OrderType[] = []
  @State loading: boolean = false // 加载状态
  @State pageNum: number = 1 //当前页，起始值为1
  @State pageSize: number = 5
  @State haveNextPage: boolean = false //是否还有下一页数据
  onPageShow(): void {
    this.resetPage()
    this.getChargeOrdersData(false)
  }
  // 重置分页状态
  resetPage() {
    this.pageNum = 1
    this.haveNextPage = true
    this.Orders = []
  }
  // 获取充电列表数据
  async getChargeOrdersData(isLoadMore: boolean = false) {
    // 如果没有下一页，不再请求
    if (isLoadMore && !this.haveNextPage) {
      return
    }
    this.loading = true
    try {
      // 计算当前请求的页码
      const currentPage: number = isLoadMore ? this.pageNum + 1 : 1
      let data = await getChargeOrders(currentPage, this.pageSize)
      if (data && data.List) {
        // 更新分页状态
        this.pageNum = currentPage
        this.haveNextPage = data.List.length >= this.pageSize
        // 更新订单列表
        if (isLoadMore) {
          this.Orders = [...this.Orders, ...data.List]
        } else {
          this.Orders = data.List
        }
      }
    } catch (error) {
      toast('加载订单失败')
      console.error('获取订单失败:', error)
    } finally {
      this.loading = false
    }
  }
  //结束充电
  async getStopChargeInfo(id: number) {
    let data = await getStopCharge(id)
    if (data != null && Number(data) === 0) {
      this.Orders = this.Orders.map(item => {
        if (item.id == id) {
          return {
            id: item.id,
            pileCode: item.pileCode,
            orderCode: item.orderCode,
            price: item.price,
            startAt: item.startAt,
            state: 1,
            stationName: item.stationName,
            stopAt: item.stopAt
          }
        }
        return item
      })
      toast('停止充电成功')
    } else {
      toast('停止充电失败')
    }
  }
  build() {
    Column({ space: 10 }) {
      //1.标题
      TbsTitleBar({ title: '充电订单', showBackIcon: true })
      //2.订单
      this.OrderCard()
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_efefef'))
  }
  @Builder
  OrderCard() {
    List({ space: 10 }) {
      ForEach(this.Orders, (item: OrderType) => {
        ListItem() {
          RelativeContainer() {
            Text(item.orderCode)
              .fontColor(Color.White)
              .height($r('app.float.size_40'))
              .padding($r('app.float.size_10'))
              .borderRadius({ bottomRight: $r('app.float.size_10'), bottomLeft: $r('app.float.size_10') })
              .backgroundColor($r('app.color.color_0aa671'))
              .id('code_text')
              .alignRules({
                right: { anchor: "__container__", align: HorizontalAlign.End },
              })
            Column({ space: 8 }) {
              if (item.state === 0) {
                Text($r('app.string.charging_in_progress')).fontWeight(FontWeight.Bold).fontColor(Color.Red)
              } else {
                Text($r('app.string.completed')).fontWeight(FontWeight.Bold).fontColor($r('app.color.color_0aa671'))
              }
              Row({ space: 10 }) {
                Text($r('app.string.pile_code'))
                Text(item.pileCode)
              }
              Row({ space: 10 }) {
                Text($r('app.string.charge_name'))
                Text(item.stationName)
              }
              Row({ space: 10 }) {
                Text($r('app.string.price'))
                Text(`${item.price}`)
              }
              Row({ space: 10 }) {
                Text($r('app.string.order_status'))
                Text(item.state == 0 ? '充电中' : item.state == 1 ? '已完成' : '未付账')
              }
              Row({ space: 10 }) {
                Text($r('app.string.start_time'))
                Text(formatDate(item.startAt ?? ''))
              }
              Row({ space: 10 }) {
                Text($r('app.string.end_time'))
                Text(item.stopAt && item.state !== 0 ? formatDate(item.stopAt) : '')
              }
              if (item.state === 0) {
                Button($r('app.string.stop_charge')).width($r('app.float.size_90')).backgroundColor(Color.Red)
                  .onClick(() => {
                    if (item.id) {
                      this.getStopChargeInfo(item.id)
                    }
                  })
              } else {
                Text('')
              }
            }
            .alignItems(HorizontalAlign.Start)
            .id('content')
            .alignRules({
              top: { anchor: "code_text", align: VerticalAlign.Bottom }
            })
          }
          .width(StyleConst.FULL_WIDTH)
          .height('auto')
          .padding({ left: $r('app.float.size_10'), bottom: $r('app.float.size_10') })
          .borderRadius($r('app.float.size_10'))
          .backgroundColor('#FFF')
        }
        .width(StyleConst.FULL_WIDTH)
      })
      ListItem() {
        BottomLoadingBuilder({
          haveNextPage: this.haveNextPage,
          loading: this.loading,
          dataLength: this.Orders.length
        })
      }
    }
    .width(StyleConst.FULL_WIDTH)
    .padding({ left: $r('app.float.size_10'), right: $r('app.float.size_10') })
    .layoutWeight(1)
    .onReachEnd(() => {
      if (this.haveNextPage && !this.loading) {
        this.getChargeOrdersData(true)
      }
    })
  }
}
export { MinePage } from './src/main/ets/page/MinePage';
{
  "name": "@tbs/mine",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {
    "@tbs/common": "file:../../common",
    "@tbs/charge": "file:../charge"
  }
}
{
  "meta": {
    "stableOrder": true
  },
  "lockfileVersion": 3,
  "ATTENTION": "THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.",
  "specifiers": {
    "@tbs/charge@../charge": "@tbs/charge@../charge",
    "@tbs/common@../../common": "@tbs/common@../../common"
  },
  "packages": {
    "@tbs/charge@../charge": {
      "name": "@tbs/charge",
      "version": "1.0.0",
      "resolved": "../charge",
      "registryType": "local",
      "dependencies": {
        "@tbs/common": "file:../../common"
      }
    },
    "@tbs/common@../../common": {
      "name": "@tbs/common",
      "version": "1.0.0",
      "resolved": "../../common",
      "registryType": "local"
    }
  }
}
{
  "float": [
    {
      "name": "page_text_font_size",
      "value": "50fp"
    }
  ]
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
import { StorageConst } from "./StorageConst"
import { UserInfoData } from "../model/UserInfoModel"
import { commonStorage } from "../utils"
class UserCenterConst {
  userInfo: UserInfoData | null = null
  getUserInfoData(): UserInfoData | null {
    if (this.userInfo) {
      return this.userInfo;
    }
    const value = commonStorage.getStringValueSync(StorageConst.USER_INFO, '');
    // 如果已经是对象，直接使用
    if (value && typeof value === 'object') {
      this.userInfo = value as UserInfoData;
      return this.userInfo;
    }
    // 如果是字符串，尝试解析
    if (typeof value === 'string' && value) {
      const p = JsonParse<UserInfoData>(value);
      if (p) {
        this.userInfo = p;
        return this.userInfo;
      }
    }
    return null;
  }
}
function JsonParse<T>(text: string): T | undefined {
  try {
    return JSON.parse(text);
  } catch (e) {
    console.error(`JSON解析错误: ${text}, 错误信息: ${e}`);
    return undefined;
  }
}
export default new UserCenterConst()
export class StorageConst {
  static readonly TOKEN = 'token'
  static readonly USER_INFO = 'userInfo'
  // 屏幕宽高
  static readonly SCREEN_WIDTH_VP = 'screenWidthVp'
  static readonly SCREEN_HEIGHT_VP = 'screenHeightVp'
  // 折叠屏显示模式
  static readonly FOLD_DISPLAY_MODE = 'foldDisplayMode'
  static readonly SEARCH_HISTORY = "search_history"
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
export * from './StorageConst'
export * from './RoutePageConst'
export * from './UserCenterConst'
export class RoutePageConst {
  static readonly AppHomePage = "home/HomePage" //App-充电页面
  static readonly LoginPage = "login/LoginPage" //App-登录页面
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
import { promptAction } from '@kit.ArkUI'
//轻提示工具类
export const toast = (hintContent: string | ResourceStr, alignment: Alignment = Alignment.Center): void => {
  promptAction.showToast({ message: hintContent, alignment: alignment })
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
export * from './ShowToast'
export * from './BottomPop'
import { StyleConst } from "../common";
import { ScreenUtils, WindowModel,ComponentUtils } from "../utils";
@CustomDialog
@Component
export struct BottomPop {
  controller: CustomDialogController;
  title: ResourceStr = '';
  titlePadding: Padding = { top: $r('app.float.size_16'), bottom: $r('app.float.size_16') }
  titleFontSize: ResourceStr = $r('app.float.size_text_16')
  titleTextColor: ResourceColor = Color.Black
  titleBgColor: ResourceColor = Color.Transparent
  contentBgColor: ResourceColor = Color.Transparent
  bgColor?: ResourceColor = Color.White
  // 软键盘是否显示
  @State keyBoardVisible: boolean = false
  keyboardAvoidMode: KeyboardAvoidMode = KeyboardAvoidMode.DEFAULT
  minHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.3 // 弹窗最低高度
  maxHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.8 // 弹窗最大高度
  @State dialogMaxHeight: number = 0 // 通过 maxHeight 计算出来的内容的高度
  @Builder
  child() {
  };
  @BuilderParam childBuilderParam: () => void = this.child;
  aboutToAppear(): void {
    if (this.isKeyboardAvoidNone()) {
      this.getKeyBoardVisible()
    }
    this.getTitleHeight()
  }
  // 软键盘是否拉起
  getKeyBoardVisible() {
    WindowModel.getInstance().getKeyBoardVisible((visible) => {
      this.keyBoardVisible = visible
    })
  }
  // 弹窗是否在拉起软键盘时进行自动避让
  isKeyboardAvoidNone() {
    return this.keyboardAvoidMode === KeyboardAvoidMode.NONE // 弹窗不避让软键盘
  }
  getTitleHeight() {
    ComponentUtils.getComponentHeightSync('BottomPop_title', (componentHeight) => {
      const safeBottomHeight = ScreenUtils.getInstance().getSafeBottomHeight() // 底部安全区高度
      // 内容最大高度 = 屏幕80%高度 - title高度 - 底部安全区高度
      this.dialogMaxHeight = Number(this.maxHeight) - componentHeight - safeBottomHeight
    })
  }
  build() {
    Stack({ alignContent: Alignment.TopEnd }) {
      Column() {
        Text(this.title)
          .padding(this.titlePadding)
          .fontColor(this.titleTextColor)
          .fontSize(this.titleFontSize)
          .fontWeight(FontWeight.Medium)
          .textAlign(TextAlign.Center)
          .width(StyleConst.FULL_WIDTH)
          .height($r('app.float.size_50'))
          .backgroundColor(this.titleBgColor)
          .id('BottomPop_title')
          .borderRadius({
            topLeft: $r('app.float.size_16'),
            topRight: $r('app.float.size_16')
          })
        Column() {
          this.childBuilderParam()
        }
        .backgroundColor(this.contentBgColor)
        .constraintSize({
          maxHeight: this.dialogMaxHeight,
        })
      }
      .padding({
        bottom: ScreenUtils.getInstance().getSafeBottomHeight(), // 设置padding避开底部安全区
      })
      .width(StyleConst.FULL_WIDTH)
      .backgroundColor(this.bgColor)
      .borderRadius({
        topLeft: $r('app.float.size_16'),
        topRight: $r('app.float.size_16')
      })
      .constraintSize({
        maxHeight: this.maxHeight,
        minHeight: this.minHeight
      })
      Image($r("app.media.common_bottom_sheet_close"))
        .size({ width: $r('app.float.size_20'), height: $r('app.float.size_20') })
        .margin({ top: $r('app.float.size_16'), right: $r('app.float.size_16') })
        .responseRegion({
          x: '-25%',
          y: '-25%',
          width: '150%',
          height: '150%'
        })
        .onClick(() => {
          this.controller.close();
        })
    }
  }
}
export class UserInfoData {
  id?: number
  username?: string
  nickname?: string
  balance?: number
  avatarUrl?: string
}
export class CommonDataSource<T> implements IDataSource {
  private listeners: DataChangeListener[] = [];
  protected items: T[] = []
  public totalCount(): number {
    return this.items.length
  }
  public getData(index: number): T | void {
    return this.items[index]
  };
  public getList(): T[] {
    return this.items
  }
  public clearData() {
    this.items = [];
    this.notifyDataReload()
  }
  public resetData(data: T | T[]) {
    this.items = [];
    if (Array.isArray(data)) {
      this.items.push(...data);
    } else {
      this.items.push(data);
    }
    this.notifyDataReload()
  }
  public setDataArray(data: T[]) {
    this.items = data
    this.notifyDataReload()
  }
  // 向列表追加数据
  public pushData(data: T | T[]): void {
    let fromIndex = this.items.length
    if (Array.isArray(data)) {
      this.items.push(...data)
    } else {
      this.items.push(data)
    }
    this.notifyDatasetAdd(fromIndex, this.items.length - fromIndex)
  }
  public changeItem(index: number) {
    this.notifyDataChange(index)
  }
  public deleteData(index: number): void {
    this.items.splice(index, 1);
    this.notifyDataDelete(index);
  }
  registerDataChangeListener(listener: DataChangeListener): void {
    if (this.listeners.indexOf(listener) < 0) {
      this.listeners.push(listener);
    }
  }
  unregisterDataChangeListener(listener: DataChangeListener): void {
    const pos = this.listeners.indexOf(listener);
    if (pos >= 0) {
      this.listeners.splice(pos, 1);
    }
  }
  notifyDataReload(): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.RELOAD }]);
    });
  }
  notifyDatasetAdd(insertIndex: number, addCount: number): void {
    this.listeners.forEach(listener => {
      listener.onDatasetChange([{ type: DataOperationType.ADD, index: insertIndex, count: addCount }]);
    })
  }
  notifyDataChange(changeIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.CHANGE, index: changeIndex }]);
    });
  }
  notifyDataDelete(deleteIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.DELETE, index: deleteIndex }]);
    });
  }
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
{
  "module": {
    "name": "charge_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
export class Apis {
  //注册
  static readonly USER_REGISTER = "/saas-api/tenant/register"
  //获取token-登录
  static readonly USER_LOGIN = "/saas-api/user/login"
  //获取租户ID
  static readonly USER_TENANT = "/saas-api/tenant/selects"
  //获取用户信息
  static readonly USER_INFO = "/wx-api/me/info"
  //获取充电站
  static readonly CHARGE_STATION_LIST = "/wx-api/station/list"
  //获取充电桩
  static readonly CHARGE_PILE_LIST = "/wx-api/pile/list"
  //获取充电价格
  static readonly CHARGE_PRICE = "/wx-api/price/list"
  //开始充电
  static readonly CHARGE_START = "/wx-api/charge/start"
  //结束充电
  static readonly CHARGE_STOP = "/wx-api/charge/stop"
  //获取充电订单列表
  static readonly CHARGE_ORDER_LIST = "/wx-api/charge/list"
}
export { requestApiCall } from './httpUtils'
export * from './Apis'
import dataPreferences from '@ohos.data.preferences';
import preferences from '@ohos.data.preferences';
import { HashMap } from '@kit.ArkTS';
import { common } from '@kit.AbilityKit';
import { GlobalContext } from './GlobalContext';
import { BusinessError } from '@kit.BasicServicesKit';
class Storage{
  private name: string = 'app_storage'
  private preferences: dataPreferences.Preferences | null = null
  private listenerKeyMap = new HashMap<string, HashMap<string, Callback<string>>>()
  constructor(name: string) {
    this.name = name;
  }
  initStorage() {
    const context = GlobalContext.getContext().getObject('context') as common.UIAbilityContext
    const options: dataPreferences.Options = { name: this.name }
    this.preferences = dataPreferences.getPreferencesSync(context, options)
    this.preferences?.on('change', (key: string) => {
      const pageMap = this.listenerKeyMap.get(key)
      pageMap?.forEach((callBack: Callback<string>) => {
        callBack(key)
      })
    })
  }
  /**
   * 存储key,value到preference缓存里面
   * @param key
   * @param value
   */
  saveValueSync(key: string, value: preferences.ValueType) {
    this.preferences?.putSync(key, value)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 根据key删除值
   * @param key
   */
  deleteValueSync(key: string) {
    this.preferences?.deleteSync(key)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns string
   */
  getStringValueSync(key: string, defaultValue: string) {
    return this.preferences?.getSync(key, defaultValue) as string
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns Array<string>
   */
  getArrayStringValueSync(key: string, defaultValue: Array<string>) {
    return this.preferences?.getSync(key, defaultValue) as Array<string>
  }
}
export const commonStorage = new Storage('common_storage')
export function initDataPreference() {
  commonStorage.initStorage()
}
import { StyleConst } from "../../../../Index"
@Component
export struct BottomLoadingBuilder {
  @Prop haveNextPage: boolean
  @Prop loading: boolean
  @Prop dataLength: number
  build() {
    if (this.haveNextPage && this.loading) {
      Row() {
        LoadingProgress()
          .width($r('app.float.size_30'))
          .height($r('app.float.size_30'))
          .margin({ right: $r('app.float.size_10') })
        Text($r('app.string.loading'))
          .fontSize($r('app.float.size_text_14'))
          .fontColor($r('app.color.color_666'))
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_60'))
      .justifyContent(FlexAlign.Center)
    } else if (!this.haveNextPage && this.dataLength > 0) {
      Text($r('app.string.there_is_no_more_data'))
        .fontSize($r('app.float.size_text_14'))
        .fontColor($r('app.color.color_999'))
        .textAlign(TextAlign.Center)
        .width(StyleConst.FULL_WIDTH)
        .margin({ top: $r('app.float.size_10'), bottom: $r('app.float.size_20') })
    }
  }
}
export * from './WindowModel'
export * from './GlobalContext'
export * from './TextUtil'
export { ScreenUtils } from './ScreenUtil';
export { initDataPreference, commonStorage } from './StorageUtils'
export * from './ComponentUtils'
export { formatDate } from './formatDate'
export class ResponseResult {
  code?: number
  message?: string
  data?: object
}
import { window } from "@kit.ArkUI";
import { BusinessError } from "@kit.BasicServicesKit";
export class WindowModel {
  private constructor() {
  }
  /**
   * 默认样式
   */
  private readonly DEFAULT: window.SystemBarProperties = {
    statusBarColor: '#00000000',
    navigationBarColor: '#00000000',
    // 以下两个属性从API Version 8开始支持
    statusBarContentColor: '#000000',
    navigationBarContentColor: '#00000000'
  };
  /**
   * WindowModel 单例
   */
  private static instance?: WindowModel;
  /**
   * 获取WindowModel单例实例
   * @returns {WindowModel} WindowModel
   */
  static getInstance(): WindowModel {
    if (!WindowModel.instance) {
      WindowModel.instance = new WindowModel();
    }
    return WindowModel.instance;
  }
  /**
   * 缓存的当前WindowStage实例
   */
  private windowStage?: window.WindowStage;
  /**
   * 缓存windowStage
   * @param windowStage 当前WindowStage实例
   * @returns {void}
   */
  setWindowStage(windowStage: window.WindowStage): void {
    this.windowStage = windowStage;
  }
  getWindowStage(): window.WindowStage | undefined {
    return this.windowStage
  }
  /**
   * 当前主窗口是否开启沉浸模式
   * @param enable 是否开启
   * @returns {void}
   */
  setMainWindowImmersive(enable: boolean, properties?: window.SystemBarProperties): void {
    if (this.windowStage === undefined) {
      console.error('windowStage is undefined.');
      return;
    }
    // 1.获取应用主窗口。
    let windowClass: window.Window | null = null;
    this.windowStage.getMainWindow((err: BusinessError, data) => {
      let errCode: number = err.code;
      if (errCode) {
        console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));
        return;
      }
      windowClass = data;
      console.info('Succeeded in obtaining the main window data.');
      // 2.实现沉浸式效果。方式二：设置窗口为全屏布局，配合设置导航栏、状态栏的透明度、背景/文字颜色及高亮图标等属性，与主窗口显示保持协调一致。
      windowClass.setWindowLayoutFullScreen(enable, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the window layout to full-screen mode.');
      });
      const p = properties ? properties : this.DEFAULT
      windowClass.setWindowSystemBarProperties(p, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the system bar properties.');
      });
    })
  }
  /**
   * 软键盘是否显示/隐藏
   * @param callback
   */
  getKeyBoardVisible(callback: (visible: boolean) => void) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      // 监听软键盘的隐藏和显示
      currentWindow.on('avoidAreaChange', data => {
        if (data.type == window.AvoidAreaType.TYPE_KEYBOARD) {
          const keyBoardHeight = px2vp(data.area.bottomRect.height);
          if (keyBoardHeight > 0) {
            callback(true)
          } else {
            callback(false)
          }
        }
      })
    })
  }
}
// 与EntryAbility交互，获取ability当前的数据
export class GlobalContext {
  static readonly CONTEXT = 'context';
  static readonly WANT = 'want';
  //状态栏高度
  static readonly STATUS_BAR_HEIGHT = 'statusBarHeight';
  //导航栏高度
  static readonly NAVIGATION_HEIGHT = 'navigationHeight';
  private constructor() { }
  private static instance: GlobalContext;
  private _objects = new Map<string, Object>();
  public static getContext(): GlobalContext {
    if (!GlobalContext.instance) {
      GlobalContext.instance = new GlobalContext();
    }
    return GlobalContext.instance;
  }
  getObject(value: string): Object | undefined {
    return this._objects.get(value);
  }
  setObject(key: string, objectClass: Object): void {
    this._objects.set(key, objectClass);
  }
}
import display from '@ohos.display';
import { GlobalContext } from '.';
import window from '@ohos.window';
import common from '@ohos.app.ability.common';
import { StorageConst } from '../manager';
export class ScreenUtils {
  private static instance: ScreenUtils;
  setWindow(windowInfo: window.Window) {
    // 获取窗口属性
    const properties = windowInfo.getWindowProperties();
    this.setScreen(properties.windowRect.width, properties.windowRect.height)
    windowInfo.on("windowSizeChange", (size: Size) => {
      this.setScreen(size.width, size.height)
    })
  }
  private constructor() {
    this.defaultDisplay = display.getDefaultDisplaySync()
    this.defaultDisplay.getCutoutInfo((e, data) => {
      this.cutoutInfo = data
    })
    let callback: Callback<display.FoldDisplayMode> = (data: display.FoldDisplayMode) => {
      this.setFoldDisplayMode(data)
    };
    display.on("foldDisplayModeChange", callback)
  }
  private setScreen(width: number, height: number) {
    AppStorage.setOrCreate(StorageConst.SCREEN_WIDTH_VP, px2vp(width));
    AppStorage.setOrCreate(StorageConst.SCREEN_HEIGHT_VP, px2vp(height));
  }
  private setFoldDisplayMode(data: display.FoldDisplayMode) {
    AppStorage.setOrCreate(StorageConst.FOLD_DISPLAY_MODE, data);
  }
  public static getInstance(): ScreenUtils {
    if (!ScreenUtils.instance) {
      ScreenUtils.instance = new ScreenUtils();
    }
    return ScreenUtils.instance;
  }
  //屏幕数据
  private defaultDisplay: display.Display | null = null
  //挖孔屏状态栏区域
  private cutoutInfo: display.CutoutInfo | null = null
  getDisplay(): display.Display | null {
    return this.defaultDisplay
  }
  getScreenWidthPx(): number {
    return this.defaultDisplay?.width ?? -1
  }
  getScreenHeightPx(): number {
    return this.defaultDisplay?.height ?? -1
  }
  getScreenContentHeightPX(): number {
    return vp2px(this.getScreenHeightVp() - this.getStatusBarHeight())
  }
  getScreenContentHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenWidthVp(): number {
    return px2vp(this.getScreenWidthPx())
  }
  /**
   * 获取刘海屏状态栏最大的区域
   * @returns
   */
  getStatusBarHeight(): number {
    const statusBar = GlobalContext.getContext().getObject(GlobalContext.STATUS_BAR_HEIGHT) as number;
    return px2vp(statusBar)
  }
  // 底部安全距离
  getSafeBottomHeight() {
    const navigation = GlobalContext.getContext().getObject(GlobalContext.NAVIGATION_HEIGHT) as number;
    return px2vp(navigation)
  }
  /**
   * 获取底部导航栏的高度
   * @returns
   */
  async getBottomNavBarHeight(context: common.BaseContext): Promise<number> {
    const win = await window.getLastWindow(context)
    return px2vp(win.getWindowAvoidArea(window.AvoidAreaType.TYPE_NAVIGATION_INDICATOR).bottomRect.height)
  }
  async getStatusBarColor(): Promise<string> {
    const currentWindow = await window.getLastWindow(getContext(this))
    return currentWindow.getWindowSystemBarProperties().statusBarColor ?? '#000000'
  }
  // 改变状态栏文字颜色
  updateStatusBarColor(isBlack: boolean) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      currentWindow.setWindowSystemBarProperties({ statusBarContentColor: isBlack ? '#000000' : '#ffffff' })
    })
  }
  // 检查设备是否可折叠
  isFoldable() {
    return display.isFoldable()
  }
  // 设备当前折叠状态是否为为完全展开
  isFoldExpanded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_EXPANDED
  }
  // 设备当前折叠状态是否为为半折叠
  isFoldHalfFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_HALF_FOLDED
  }
  // 设备当前折叠状态为是否为折叠
  isFoldFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_FOLDED
  }
}
import http from '@ohos.net.http';
import { commonStorage } from '../../../../Index';
import { StorageConst } from '../manager';
import { ResponseResult } from './response';
export function requestApiCall(url: string,
  method: http.RequestMethod,
  data?: Record<string, number | boolean | string | Object | undefined>,
  headers?: Record<string, string>,
): Promise<ResponseResult> {
  const BASE_URL = 'https://charging.lusson.xyz'
  const httpRequest = http.createHttp();
  const defaultHeaders: Record<string, string> = {
    'Content-Type': 'application/json',
  }
  const token = commonStorage.getStringValueSync(StorageConst.TOKEN, "")
  if (token) {
    defaultHeaders['Authorization'] = `Bearer ${token}`
  }
  const finalHeaders: Record<string, string> = {};
  Object.keys(defaultHeaders).forEach(key => {
    finalHeaders[key] = defaultHeaders[key];
  });
  if (headers) {
    Object.keys(headers).forEach(key => {
      finalHeaders[key] = String(headers[key]);
    });
  }
  let responseResult = httpRequest.request(BASE_URL + url, {
    method: method,
    extraData: data ? JSON.stringify(data) : undefined,
    header: finalHeaders
  });
  let response: ResponseResult = new ResponseResult();
  return responseResult.then((value: http.HttpResponse) => {
    if (value.responseCode === 200) {
      let res: ResponseResult = JSON.parse(`${value.result}`);
      response.data = res.data;
      response.code = res.code;
      response.message = res.message;
    } else {
      response.message = '请求错误';
      response.code = 400;
    }
    return response;
  }).catch((error: Error) => {
    console.log('lucy++ error', JSON.stringify(error))
    response.message = '请求错误';
    response.code = 400;
    return response;
  })
}
import { componentUtils, inspector } from "@kit.ArkUI"
export class ComponentUtils {
  /**
   * 同步方式获取组件渲染后的实际高度
   * @param componentId 组件ID
   * @param callback 注册的回调函数
   */
  static getComponentHeightSync(componentId: string, callback: (width: number) => void): void {
    // 监听组件
    const listener = inspector.createComponentObserver(componentId)
    // 注册回调
    listener.on('layout', () => {
      const componentInfo = componentUtils.getRectangleById(componentId)
      const height = px2vp(componentInfo.size.height)
      callback?.(height)
      // 取消注册回调
      listener.off('layout')
    })
  }
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
//封装一个函数：简化时间格式
export const formatDate = (dateStr:string)=>{
  const date = new Date(dateStr)
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}
import measure from '@ohos.measure'
export class TextUtil{
  static getTextWidth(textContent: string,
    fontSize: number | string | Resource = $r('app.float.size_text_14'), maxLines: number = 1,
    weight: FontWeight | number = FontWeight.Regular): number {
    if (!textContent || textContent.length === 0) {
      return 0
    }
    const width: number = measure.measureText({
      textContent: textContent,
      fontSize: fontSize,
      fontWeight: weight,
      maxLines: maxLines
    })
    return px2vp(width)
  }
}
import { requestApiCall, Apis, toast } from "@tbs/common";
import { http } from "@kit.NetworkKit";
import { ChargeListData, OrderTypeData, PileListData, PriceListData } from "../model/ChargeModel";
import { BusinessError } from "@kit.BasicServicesKit";
//获取充电站
export function getStations(name: string, pageNo: number = 1, pageSize: number = 20) {
  return requestApiCall(`${Apis.CHARGE_STATION_LIST}?name=${name}&pageNo=${pageNo}&pageSize=${pageSize}`,
    http.RequestMethod.GET).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    const data = res.data as ChargeListData
    return data
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 获取充电站接口调用失败，${err.code}+${err.message}`)
  })
}
//获取充电桩
export function getPiles(stationId: number) {
  return requestApiCall(`${Apis.CHARGE_PILE_LIST}?stationId=${stationId}`, http.RequestMethod.GET).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    const data = res.data as PileListData
    return data.List
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 获取充电桩接口调用失败，${err.code}+${err.message}`)
  })
}
//获取充电价格
export function getChargePrice(pageNo: number = 1, pageSize: number = 20) {
  return requestApiCall(`${Apis.CHARGE_PRICE}?pageNo=${pageNo}&pageSize=${pageSize}`, http.RequestMethod.GET)
    .then(res => {
      if (res.code !== 0 && res.message) {
        toast(res.message)
      }
      const data = res.data as PriceListData
      return data.List
    }).catch((err: BusinessError) => {
      console.error(`lucy++ 获取充电价格接口调用失败，${err.code}+${err.message}`)
    })
}
//开始充电
export function getStartCharge(pileId: number) {
  const params: Record<string, Object> = {
    "pileId": pileId
  }
  return requestApiCall(Apis.CHARGE_START, http.RequestMethod.POST, params).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    return res.code
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 开始充电接口调用失败，${err.code}+${err.message}`)
  })
}
//获取充电订单列表
export function getChargeOrders(pageNo: number, pageSize: number) {
  return requestApiCall(`${Apis.CHARGE_ORDER_LIST}?pageNo=${pageNo}&pageSize=${pageSize}`, http.RequestMethod.GET)
    .then(res => {
      if (res.code !== 0 && res.message) {
        toast(res.message)
      }
      const data = res.data as OrderTypeData
      return data
    }).catch((err: BusinessError) => {
      console.error(`lucy++ 获取充电订单列表接口调用失败，${err.code}+${err.message}`)
    })
}
//结束充电
export function getStopCharge(orderId: number) {
  const params: Record<string, Object> = {
    "orderId": orderId
  }
  return requestApiCall(Apis.CHARGE_STOP, http.RequestMethod.POST, params).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    console.log('lucy== 结束res', JSON.stringify(res))
    return res.code
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 结束充电接口调用失败，${err.code}+${err.message}`)
  })
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
export class StyleConst {
  // 宽高
  static readonly FULL_WIDTH: string = '100%';
  static readonly FULL_HEIGHT: string = '100%';
  static readonly PERCENT_10 = '10%'
  static readonly PERCENT_15 = '15%'
  static readonly PERCENT_17 = '17%'
  static readonly PERCENT_20 = '20%'
  static readonly PERCENT_25 = '25%'
  static readonly PERCENT_30 = '30%'
  static readonly PERCENT_35 = '35%'
  static readonly PERCENT_40 = '40%'
  static readonly PERCENT_45 = '45%'
  static readonly PERCENT_50 = '50%'
  static readonly PERCENT_60 = '60%'
  static readonly PERCENT_65 = '65%'
  static readonly PERCENT_70 = '70%'
  static readonly PERCENT_72 = '72%'
  static readonly PERCENT_75 = '75%'
  static readonly PERCENT_80 = '80%'
  static readonly PERCENT_85 = '85%'
  static readonly PERCENT_90 = '90%'
  static readonly PERCENT_95 = '95%'
  static readonly PERCENT_100 = '100%'
}
import { ScreenUtils, StyleConst } from "../../../../Index"
import { router } from "@kit.ArkUI"
@Component
export struct TbsTitleBar {
  @Prop title: ResourceStr = ''
  @Prop showBackIcon: boolean = false
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight())
      RelativeContainer() {
        Text(this.title)
          .fontColor(Color.White)
          .fontSize($r('app.float.size_text_20'))
          .textAlign(TextAlign.Center)
          .maxLines(1)
          .id('text')
          .alignRules({
            center: { anchor: "__container__", align: VerticalAlign.Center },
            middle: { anchor: "__container__", align: HorizontalAlign.Center }
          })
        if (this.showBackIcon) {
          Image($r('app.media.back'))
            .width($r('app.float.size_45'))
            .id('image')
            .alignRules({
              left: { anchor: "__container__", align: HorizontalAlign.Start }
            })
            .onClick(() => {
              router.back()
            })
        }
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_45'))
    }
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
export * from './StyleConst'
export * from './TbsTitleBar'
export * from './BottomLoadingBuilder'
{
  "string": [
    {
      "name": "module_desc",
      "value": "module description"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "charge"
    },
    {
      "name": "scan",
      "value": "scan"
    },
    {
      "name": "mine",
      "value": "mine"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "Welcome to log in to the Groundhog charging platform"
    },
    {
      "name": "please_select_the_tenant",
      "value": "Please select the tenant"
    },
    {
      "name": "please_enter_the_username",
      "value": "Please enter the username"
    },
    {
      "name": "please_enter_the_password",
      "value": "Please enter your password"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "Please enter the verification code"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "Please enter the company name"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "Please enter the company website"
    },
    {
      "name": "login",
      "value": "Login"
    },
    {
      "name": "no_account",
      "value": "No account?"
    },
    {
      "name": "register",
      "value": "Register"
    },
    {
      "name": "login_in",
      "value": "login in"
    },
    {
      "name": "existing_account",
      "value": "existing account?"
    },
    {
      "name": "register_immediately",
      "value": "register immediately"
    },
    {
      "name": "company_website",
      "value": "The company 's website, such as www.example.com"
    },
    {
      "name": "company_name",
      "value": "company name"
    },
    {
      "name": "password_length",
      "value": "Password: At least 5 characters in length"
    },
    {
      "name": "get_code",
      "value": "get code"
    },
    {
      "name": "verification_code",
      "value": "Verification code :666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "Welcome to register on the Groundhog charging platform"
    },
    {
      "name": "search_content",
      "value": "Please enter the search content"
    },
    {
      "name": "search",
      "value": "search"
    },
    {
      "name": "no_data",
      "value": "no data"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "Selection of charging pile"
    },
    {
      "name": "fast_charge",
      "value": "fast charge"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "national standard"
    },
    {
      "name": "idle",
      "value": "Idle"
    },
    {
      "name": "faults",
      "value": "Faults"
    },
    {
      "name": "charging_in_progress",
      "value": "Charging in progress"
    },
    {
      "name": "pile_number",
      "value": "Pile_number:"
    },
    {
      "name": "station_name",
      "value": "Station name:"
    },
    {
      "name": "agreement",
      "value": "agreement"
    },
    {
      "name": "certification",
      "value": "certification"
    },
    {
      "name": "feat",
      "value": "feat"
    },
    {
      "name": "message",
      "value": "message"
    },
    {
      "name": "person",
      "value": "person"
    },
    {
      "name": "rule",
      "value": "rule"
    },
    {
      "name": "order",
      "value": "order"
    },
    {
      "name": "service",
      "value": "service"
    },
    {
      "name": "there_is_no_more_data",
      "value": "There is no more data"
    },
    {
      "name": "loading",
      "value": "loading..."
    },
    {
      "name": "completed",
      "value": "Completed"
    },
    {
      "name": "pile_code",
      "value": "Pile code:"
    },
    {
      "name": "charge_name",
      "value": "Charge name:"
    },
    {
      "name": "price",
      "value": "Price:"
    },
    {
      "name": "order_status",
      "value": "Order status:"
    },
    {
      "name": "start_time",
      "value": "Start time:"
    },
    {
      "name": "end_time",
      "value": "End time:"
    },
    {
      "name": "stop_charge",
      "value": "Stop charging"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
{
  "float": [
    {
      "name": "size_1",
      "value": "1vp"
    },
    {
      "name": "size_2",
      "value": "2vp"
    },
    {
      "name": "size_3",
      "value": "3vp"
    },
    {
      "name": "size_4",
      "value": "4vp"
    },
    {
      "name": "size_5",
      "value": "5vp"
    },
    {
      "name": "size_6",
      "value": "6vp"
    },
    {
      "name": "size_7",
      "value": "7vp"
    },
    {
      "name": "size_8",
      "value": "8vp"
    },
    {
      "name": "size_9",
      "value": "9vp"
    },
    {
      "name": "size_10",
      "value": "10vp"
    },
    {
      "name": "size_11",
      "value": "11vp"
    },
    {
      "name": "size_12",
      "value": "12vp"
    },
    {
      "name": "size_13",
      "value": "13vp"
    },
    {
      "name": "size_14",
      "value": "14vp"
    },
    {
      "name": "size_15",
      "value": "15vp"
    },
    {
      "name": "size_16",
      "value": "16vp"
    },
    {
      "name": "size_17",
      "value": "17vp"
    },
    {
      "name": "size_18",
      "value": "18vp"
    },
    {
      "name": "size_19",
      "value": "19vp"
    },
    {
      "name": "size_20",
      "value": "20vp"
    },
    {
      "name": "size_21",
      "value": "21vp"
    },
    {
      "name": "size_22",
      "value": "22vp"
    },
    {
      "name": "size_23",
      "value": "23vp"
    },
    {
      "name": "size_24",
      "value": "24vp"
    },
    {
      "name": "size_25",
      "value": "25vp"
    },
    {
      "name": "size_26",
      "value": "26vp"
    },
    {
      "name": "size_27",
      "value": "27vp"
    },
    {
      "name": "size_28",
      "value": "28vp"
    },
    {
      "name": "size_29",
      "value": "29vp"
    },
    {
      "name": "size_30",
      "value": "30vp"
    },
    {
      "name": "size_31",
      "value": "31vp"
    },
    {
      "name": "size_32",
      "value": "32vp"
    },
    {
      "name": "size_33",
      "value": "33vp"
    },
    {
      "name": "size_34",
      "value": "34vp"
    },
    {
      "name": "size_35",
      "value": "35vp"
    },
    {
      "name": "size_36",
      "value": "36vp"
    },
    {
      "name": "size_37",
      "value": "37vp"
    },
    {
      "name": "size_38",
      "value": "38vp"
    },
    {
      "name": "size_39",
      "value": "39vp"
    },
    {
      "name": "size_40",
      "value": "40vp"
    },
    {
      "name": "size_41",
      "value": "41vp"
    },
    {
      "name": "size_42",
      "value": "42vp"
    },
    {
      "name": "size_43",
      "value": "43vp"
    },
    {
      "name": "size_44",
      "value": "44vp"
    },
    {
      "name": "size_45",
      "value": "45vp"
    },
    {
      "name": "size_46",
      "value": "46vp"
    },
    {
      "name": "size_47",
      "value": "47vp"
    },
    {
      "name": "size_48",
      "value": "48vp"
    },
    {
      "name": "size_49",
      "value": "49vp"
    },
    {
      "name": "size_50",
      "value": "50vp"
    },
    {
      "name": "size_51",
      "value": "51vp"
    },
    {
      "name": "size_52",
      "value": "52vp"
    },
    {
      "name": "size_53",
      "value": "53vp"
    },
    {
      "name": "size_54",
      "value": "54vp"
    },
    {
      "name": "size_55",
      "value": "55vp"
    },
    {
      "name": "size_56",
      "value": "56vp"
    },
    {
      "name": "size_57",
      "value": "57vp"
    },
    {
      "name": "size_58",
      "value": "58vp"
    },
    {
      "name": "size_59",
      "value": "59vp"
    },
    {
      "name": "size_60",
      "value": "60vp"
    },
    {
      "name": "size_61",
      "value": "61vp"
    },
    {
      "name": "size_62",
      "value": "62vp"
    },
    {
      "name": "size_63",
      "value": "63vp"
    },
    {
      "name": "size_64",
      "value": "64vp"
    },
    {
      "name": "size_65",
      "value": "65vp"
    },
    {
      "name": "size_66",
      "value": "66vp"
    },
    {
      "name": "size_67",
      "value": "67vp"
    },
    {
      "name": "size_68",
      "value": "68vp"
    },
    {
      "name": "size_69",
      "value": "69vp"
    },
    {
      "name": "size_70",
      "value": "70vp"
    },
    {
      "name": "size_71",
      "value": "71vp"
    },
    {
      "name": "size_72",
      "value": "72vp"
    },
    {
      "name": "size_73",
      "value": "73vp"
    },
    {
      "name": "size_74",
      "value": "74vp"
    },
    {
      "name": "size_75",
      "value": "75vp"
    },
    {
      "name": "size_76",
      "value": "76vp"
    },
    {
      "name": "size_77",
      "value": "77vp"
    },
    {
      "name": "size_78",
      "value": "78vp"
    },
    {
      "name": "size_79",
      "value": "79vp"
    },
    {
      "name": "size_80",
      "value": "80vp"
    },
    {
      "name": "size_81",
      "value": "81vp"
    },
    {
      "name": "size_82",
      "value": "82vp"
    },
    {
      "name": "size_83",
      "value": "83vp"
    },
    {
      "name": "size_84",
      "value": "84vp"
    },
    {
      "name": "size_85",
      "value": "85vp"
    },
    {
      "name": "size_86",
      "value": "86vp"
    },
    {
      "name": "size_87",
      "value": "87vp"
    },
    {
      "name": "size_88",
      "value": "88vp"
    },
    {
      "name": "size_89",
      "value": "89vp"
    },
    {
      "name": "size_90",
      "value": "90vp"
    },
    {
      "name": "size_91",
      "value": "91vp"
    },
    {
      "name": "size_92",
      "value": "92vp"
    },
    {
      "name": "size_93",
      "value": "93vp"
    },
    {
      "name": "size_94",
      "value": "94vp"
    },
    {
      "name": "size_95",
      "value": "95vp"
    },
    {
      "name": "size_96",
      "value": "96vp"
    },
    {
      "name": "size_97",
      "value": "97vp"
    },
    {
      "name": "size_98",
      "value": "98vp"
    },
    {
      "name": "size_99",
      "value": "99vp"
    },
    {
      "name": "size_100",
      "value": "100vp"
    },
    {
      "name": "size_101",
      "value": "101vp"
    },
    {
      "name": "size_102",
      "value": "102vp"
    },
    {
      "name": "size_103",
      "value": "103vp"
    },
    {
      "name": "size_104",
      "value": "104vp"
    },
    {
      "name": "size_105",
      "value": "105vp"
    },
    {
      "name": "size_106",
      "value": "106vp"
    },
    {
      "name": "size_107",
      "value": "107vp"
    },
    {
      "name": "size_108",
      "value": "108vp"
    },
    {
      "name": "size_109",
      "value": "109vp"
    },
    {
      "name": "size_110",
      "value": "110vp"
    },
    {
      "name": "size_111",
      "value": "111vp"
    },
    {
      "name": "size_112",
      "value": "112vp"
    },
    {
      "name": "size_113",
      "value": "113vp"
    },
    {
      "name": "size_114",
      "value": "114vp"
    },
    {
      "name": "size_115",
      "value": "115vp"
    },
    {
      "name": "size_116",
      "value": "116vp"
    },
    {
      "name": "size_117",
      "value": "117vp"
    },
    {
      "name": "size_118",
      "value": "118vp"
    },
    {
      "name": "size_119",
      "value": "119vp"
    },
    {
      "name": "size_120",
      "value": "120vp"
    },
    {
      "name": "size_121",
      "value": "121vp"
    },
    {
      "name": "size_122",
      "value": "122vp"
    },
    {
      "name": "size_123",
      "value": "123vp"
    },
    {
      "name": "size_124",
      "value": "124vp"
    },
    {
      "name": "size_125",
      "value": "125vp"
    },
    {
      "name": "size_126",
      "value": "126vp"
    },
    {
      "name": "size_127",
      "value": "127vp"
    },
    {
      "name": "size_128",
      "value": "128vp"
    },
    {
      "name": "size_129",
      "value": "129vp"
    },
    {
      "name": "size_130",
      "value": "130vp"
    },
    {
      "name": "size_131",
      "value": "131vp"
    },
    {
      "name": "size_132",
      "value": "132vp"
    },
    {
      "name": "size_133",
      "value": "133vp"
    },
    {
      "name": "size_134",
      "value": "134vp"
    },
    {
      "name": "size_135",
      "value": "135vp"
    },
    {
      "name": "size_136",
      "value": "136vp"
    },
    {
      "name": "size_137",
      "value": "137vp"
    },
    {
      "name": "size_138",
      "value": "138vp"
    },
    {
      "name": "size_139",
      "value": "139vp"
    },
    {
      "name": "size_140",
      "value": "140vp"
    },
    {
      "name": "size_141",
      "value": "141vp"
    },
    {
      "name": "size_142",
      "value": "142vp"
    },
    {
      "name": "size_143",
      "value": "143vp"
    },
    {
      "name": "size_144",
      "value": "144vp"
    },
    {
      "name": "size_145",
      "value": "145vp"
    },
    {
      "name": "size_146",
      "value": "146vp"
    },
    {
      "name": "size_147",
      "value": "147vp"
    },
    {
      "name": "size_148",
      "value": "148vp"
    },
    {
      "name": "size_149",
      "value": "149vp"
    },
    {
      "name": "size_150",
      "value": "150vp"
    },
    {
      "name": "size_151",
      "value": "151vp"
    },
    {
      "name": "size_152",
      "value": "152vp"
    },
    {
      "name": "size_153",
      "value": "153vp"
    },
    {
      "name": "size_154",
      "value": "154vp"
    },
    {
      "name": "size_155",
      "value": "155vp"
    },
    {
      "name": "size_156",
      "value": "156vp"
    },
    {
      "name": "size_157",
      "value": "157vp"
    },
    {
      "name": "size_158",
      "value": "158vp"
    },
    {
      "name": "size_159",
      "value": "159vp"
    },
    {
      "name": "size_160",
      "value": "160vp"
    },
    {
      "name": "size_161",
      "value": "161vp"
    },
    {
      "name": "size_162",
      "value": "162vp"
    },
    {
      "name": "size_163",
      "value": "163vp"
    },
    {
      "name": "size_164",
      "value": "164vp"
    },
    {
      "name": "size_165",
      "value": "165vp"
    },
    {
      "name": "size_166",
      "value": "166vp"
    },
    {
      "name": "size_167",
      "value": "167vp"
    },
    {
      "name": "size_168",
      "value": "168vp"
    },
    {
      "name": "size_169",
      "value": "169vp"
    },
    {
      "name": "size_170",
      "value": "170vp"
    },
    {
      "name": "size_171",
      "value": "171vp"
    },
    {
      "name": "size_172",
      "value": "172vp"
    },
    {
      "name": "size_173",
      "value": "173vp"
    },
    {
      "name": "size_174",
      "value": "174vp"
    },
    {
      "name": "size_175",
      "value": "175vp"
    },
    {
      "name": "size_176",
      "value": "176vp"
    },
    {
      "name": "size_177",
      "value": "177vp"
    },
    {
      "name": "size_178",
      "value": "178vp"
    },
    {
      "name": "size_179",
      "value": "179vp"
    },
    {
      "name": "size_180",
      "value": "180vp"
    },
    {
      "name": "size_181",
      "value": "181vp"
    },
    {
      "name": "size_182",
      "value": "182vp"
    },
    {
      "name": "size_183",
      "value": "183vp"
    },
    {
      "name": "size_184",
      "value": "184vp"
    },
    {
      "name": "size_185",
      "value": "185vp"
    },
    {
      "name": "size_186",
      "value": "186vp"
    },
    {
      "name": "size_187",
      "value": "187vp"
    },
    {
      "name": "size_188",
      "value": "188vp"
    },
    {
      "name": "size_189",
      "value": "189vp"
    },
    {
      "name": "size_190",
      "value": "190vp"
    },
    {
      "name": "size_191",
      "value": "191vp"
    },
    {
      "name": "size_192",
      "value": "192vp"
    },
    {
      "name": "size_193",
      "value": "193vp"
    },
    {
      "name": "size_194",
      "value": "194vp"
    },
    {
      "name": "size_195",
      "value": "195vp"
    },
    {
      "name": "size_196",
      "value": "196vp"
    },
    {
      "name": "size_197",
      "value": "197vp"
    },
    {
      "name": "size_198",
      "value": "198vp"
    },
    {
      "name": "size_199",
      "value": "199vp"
    },
    {
      "name": "size_200",
      "value": "200vp"
    },
    {
      "name": "size_201",
      "value": "201vp"
    },
    {
      "name": "size_202",
      "value": "202vp"
    },
    {
      "name": "size_203",
      "value": "203vp"
    },
    {
      "name": "size_204",
      "value": "204vp"
    },
    {
      "name": "size_205",
      "value": "205vp"
    },
    {
      "name": "size_206",
      "value": "206vp"
    },
    {
      "name": "size_207",
      "value": "207vp"
    },
    {
      "name": "size_208",
      "value": "208vp"
    },
    {
      "name": "size_209",
      "value": "209vp"
    },
    {
      "name": "size_210",
      "value": "210vp"
    },
    {
      "name": "size_211",
      "value": "211vp"
    },
    {
      "name": "size_212",
      "value": "212vp"
    },
    {
      "name": "size_213",
      "value": "213vp"
    },
    {
      "name": "size_214",
      "value": "214vp"
    },
    {
      "name": "size_215",
      "value": "215vp"
    },
    {
      "name": "size_216",
      "value": "216vp"
    },
    {
      "name": "size_217",
      "value": "217vp"
    },
    {
      "name": "size_218",
      "value": "218vp"
    },
    {
      "name": "size_219",
      "value": "219vp"
    },
    {
      "name": "size_220",
      "value": "220vp"
    },
    {
      "name": "size_221",
      "value": "221vp"
    },
    {
      "name": "size_222",
      "value": "222vp"
    },
    {
      "name": "size_223",
      "value": "223vp"
    },
    {
      "name": "size_224",
      "value": "224vp"
    },
    {
      "name": "size_225",
      "value": "225vp"
    },
    {
      "name": "size_226",
      "value": "226vp"
    },
    {
      "name": "size_227",
      "value": "227vp"
    },
    {
      "name": "size_228",
      "value": "228vp"
    },
    {
      "name": "size_229",
      "value": "229vp"
    },
    {
      "name": "size_230",
      "value": "230vp"
    },
    {
      "name": "size_231",
      "value": "231vp"
    },
    {
      "name": "size_232",
      "value": "232vp"
    },
    {
      "name": "size_233",
      "value": "233vp"
    },
    {
      "name": "size_234",
      "value": "234vp"
    },
    {
      "name": "size_235",
      "value": "235vp"
    },
    {
      "name": "size_236",
      "value": "236vp"
    },
    {
      "name": "size_237",
      "value": "237vp"
    },
    {
      "name": "size_238",
      "value": "238vp"
    },
    {
      "name": "size_239",
      "value": "239vp"
    },
    {
      "name": "size_240",
      "value": "240vp"
    },
    {
      "name": "size_241",
      "value": "241vp"
    },
    {
      "name": "size_242",
      "value": "242vp"
    },
    {
      "name": "size_243",
      "value": "243vp"
    },
    {
      "name": "size_244",
      "value": "244vp"
    },
    {
      "name": "size_245",
      "value": "245vp"
    },
    {
      "name": "size_246",
      "value": "246vp"
    },
    {
      "name": "size_247",
      "value": "247vp"
    },
    {
      "name": "size_248",
      "value": "248vp"
    },
    {
      "name": "size_249",
      "value": "249vp"
    },
    {
      "name": "size_250",
      "value": "250vp"
    },
    {
      "name": "size_251",
      "value": "251vp"
    },
    {
      "name": "size_252",
      "value": "252vp"
    },
    {
      "name": "size_253",
      "value": "253vp"
    },
    {
      "name": "size_254",
      "value": "254vp"
    },
    {
      "name": "size_255",
      "value": "255vp"
    },
    {
      "name": "size_256",
      "value": "256vp"
    },
    {
      "name": "size_257",
      "value": "257vp"
    },
    {
      "name": "size_258",
      "value": "258vp"
    },
    {
      "name": "size_259",
      "value": "259vp"
    },
    {
      "name": "size_260",
      "value": "260vp"
    },
    {
      "name": "size_261",
      "value": "261vp"
    },
    {
      "name": "size_262",
      "value": "262vp"
    },
    {
      "name": "size_263",
      "value": "263vp"
    },
    {
      "name": "size_264",
      "value": "264vp"
    },
    {
      "name": "size_265",
      "value": "265vp"
    },
    {
      "name": "size_266",
      "value": "266vp"
    },
    {
      "name": "size_267",
      "value": "267vp"
    },
    {
      "name": "size_268",
      "value": "268vp"
    },
    {
      "name": "size_269",
      "value": "269vp"
    },
    {
      "name": "size_270",
      "value": "270vp"
    },
    {
      "name": "size_271",
      "value": "271vp"
    },
    {
      "name": "size_272",
      "value": "272vp"
    },
    {
      "name": "size_273",
      "value": "273vp"
    },
    {
      "name": "size_274",
      "value": "274vp"
    },
    {
      "name": "size_275",
      "value": "275vp"
    },
    {
      "name": "size_276",
      "value": "276vp"
    },
    {
      "name": "size_277",
      "value": "277vp"
    },
    {
      "name": "size_278",
      "value": "278vp"
    },
    {
      "name": "size_279",
      "value": "279vp"
    },
    {
      "name": "size_280",
      "value": "280vp"
    },
    {
      "name": "size_281",
      "value": "281vp"
    },
    {
      "name": "size_282",
      "value": "282vp"
    },
    {
      "name": "size_283",
      "value": "283vp"
    },
    {
      "name": "size_284",
      "value": "284vp"
    },
    {
      "name": "size_285",
      "value": "285vp"
    },
    {
      "name": "size_286",
      "value": "286vp"
    },
    {
      "name": "size_287",
      "value": "287vp"
    },
    {
      "name": "size_288",
      "value": "288vp"
    },
    {
      "name": "size_289",
      "value": "289vp"
    },
    {
      "name": "size_290",
      "value": "290vp"
    },
    {
      "name": "size_291",
      "value": "291vp"
    },
    {
      "name": "size_292",
      "value": "292vp"
    },
    {
      "name": "size_293",
      "value": "293vp"
    },
    {
      "name": "size_294",
      "value": "294vp"
    },
    {
      "name": "size_295",
      "value": "295vp"
    },
    {
      "name": "size_296",
      "value": "296vp"
    },
    {
      "name": "size_297",
      "value": "297vp"
    },
    {
      "name": "size_298",
      "value": "298vp"
    },
    {
      "name": "size_299",
      "value": "299vp"
    },
    {
      "name": "size_300",
      "value": "300vp"
    },
    {
      "name": "size_text_1",
      "value": "1fp"
    },
    {
      "name": "size_text_2",
      "value": "2fp"
    },
    {
      "name": "size_text_3",
      "value": "3fp"
    },
    {
      "name": "size_text_4",
      "value": "4fp"
    },
    {
      "name": "size_text_5",
      "value": "5fp"
    },
    {
      "name": "size_text_6",
      "value": "6fp"
    },
    {
      "name": "size_text_7",
      "value": "7fp"
    },
    {
      "name": "size_text_8",
      "value": "8fp"
    },
    {
      "name": "size_text_9",
      "value": "9fp"
    },
    {
      "name": "size_text_10",
      "value": "10fp"
    },
    {
      "name": "size_text_11",
      "value": "11fp"
    },
    {
      "name": "size_text_12",
      "value": "12fp"
    },
    {
      "name": "size_text_13",
      "value": "13fp"
    },
    {
      "name": "size_text_14",
      "value": "14fp"
    },
    {
      "name": "size_text_15",
      "value": "15fp"
    },
    {
      "name": "size_text_16",
      "value": "16fp"
    },
    {
      "name": "size_text_17",
      "value": "17fp"
    },
    {
      "name": "size_text_18",
      "value": "18fp"
    },
    {
      "name": "size_text_19",
      "value": "19fp"
    },
    {
      "name": "size_text_20",
      "value": "20fp"
    },
    {
      "name": "size_text_21",
      "value": "21fp"
    },
    {
      "name": "size_text_22",
      "value": "22fp"
    },
    {
      "name": "size_text_23",
      "value": "23fp"
    },
    {
      "name": "size_text_24",
      "value": "24fp"
    },
    {
      "name": "size_text_25",
      "value": "25fp"
    },
    {
      "name": "size_text_26",
      "value": "26fp"
    },
    {
      "name": "size_text_27",
      "value": "27fp"
    },
    {
      "name": "size_text_28",
      "value": "28fp"
    },
    {
      "name": "size_text_29",
      "value": "29fp"
    },
    {
      "name": "size_text_30",
      "value": "30fp"
    },
    {
      "name": "size_text_31",
      "value": "31fp"
    },
    {
      "name": "size_text_32",
      "value": "32fp"
    },
    {
      "name": "size_text_33",
      "value": "33fp"
    },
    {
      "name": "size_text_34",
      "value": "34fp"
    },
    {
      "name": "size_text_35",
      "value": "35fp"
    },
    {
      "name": "size_text_36",
      "value": "36fp"
    },
    {
      "name": "size_text_37",
      "value": "37fp"
    },
    {
      "name": "size_text_38",
      "value": "38fp"
    },
    {
      "name": "size_text_39",
      "value": "39fp"
    },
    {
      "name": "size_text_40",
      "value": "40fp"
    },
    {
      "name": "size_text_41",
      "value": "41fp"
    },
    {
      "name": "size_text_42",
      "value": "42fp"
    },
    {
      "name": "size_text_43",
      "value": "43fp"
    },
    {
      "name": "size_text_44",
      "value": "44fp"
    },
    {
      "name": "size_text_45",
      "value": "45fp"
    },
    {
      "name": "size_text_46",
      "value": "46fp"
    },
    {
      "name": "size_text_47",
      "value": "47fp"
    },
    {
      "name": "size_text_48",
      "value": "48fp"
    },
    {
      "name": "size_text_49",
      "value": "49fp"
    },
    {
      "name": "size_text_50",
      "value": "50fp"
    },
    {
      "name": "size_text_51",
      "value": "51fp"
    },
    {
      "name": "size_text_52",
      "value": "52fp"
    },
    {
      "name": "size_text_53",
      "value": "53fp"
    },
    {
      "name": "size_text_54",
      "value": "54fp"
    },
    {
      "name": "size_text_55",
      "value": "55fp"
    },
    {
      "name": "size_text_56",
      "value": "56fp"
    },
    {
      "name": "size_text_57",
      "value": "57fp"
    },
    {
      "name": "size_text_58",
      "value": "58fp"
    },
    {
      "name": "size_text_59",
      "value": "59fp"
    },
    {
      "name": "size_text_60",
      "value": "60fp"
    },
    {
      "name": "size_text_61",
      "value": "61fp"
    },
    {
      "name": "size_text_62",
      "value": "62fp"
    },
    {
      "name": "size_text_63",
      "value": "63fp"
    },
    {
      "name": "size_text_64",
      "value": "64fp"
    },
    {
      "name": "size_text_65",
      "value": "65fp"
    },
    {
      "name": "size_text_66",
      "value": "66fp"
    },
    {
      "name": "size_text_67",
      "value": "67fp"
    },
    {
      "name": "size_text_68",
      "value": "68fp"
    },
    {
      "name": "size_text_69",
      "value": "69fp"
    },
    {
      "name": "size_text_70",
      "value": "70fp"
    },
    {
      "name": "size_text_71",
      "value": "71fp"
    },
    {
      "name": "size_text_72",
      "value": "72fp"
    },
    {
      "name": "size_text_73",
      "value": "73fp"
    },
    {
      "name": "size_text_74",
      "value": "74fp"
    },
    {
      "name": "size_text_75",
      "value": "75fp"
    },
    {
      "name": "size_text_76",
      "value": "76fp"
    },
    {
      "name": "size_text_77",
      "value": "77fp"
    },
    {
      "name": "size_text_78",
      "value": "78fp"
    },
    {
      "name": "size_text_79",
      "value": "79fp"
    },
    {
      "name": "size_text_80",
      "value": "80fp"
    },
    {
      "name": "size_text_81",
      "value": "81fp"
    },
    {
      "name": "size_text_82",
      "value": "82fp"
    },
    {
      "name": "size_text_83",
      "value": "83fp"
    },
    {
      "name": "size_text_84",
      "value": "84fp"
    },
    {
      "name": "size_text_85",
      "value": "85fp"
    },
    {
      "name": "size_text_86",
      "value": "86fp"
    },
    {
      "name": "size_text_87",
      "value": "87fp"
    },
    {
      "name": "size_text_88",
      "value": "88fp"
    },
    {
      "name": "size_text_89",
      "value": "89fp"
    },
    {
      "name": "size_text_90",
      "value": "90fp"
    },
    {
      "name": "size_text_91",
      "value": "91fp"
    },
    {
      "name": "size_text_92",
      "value": "92fp"
    },
    {
      "name": "size_text_93",
      "value": "93fp"
    },
    {
      "name": "size_text_94",
      "value": "94fp"
    },
    {
      "name": "size_text_95",
      "value": "95fp"
    },
    {
      "name": "size_text_96",
      "value": "96fp"
    },
    {
      "name": "size_text_97",
      "value": "97fp"
    },
    {
      "name": "size_text_98",
      "value": "98fp"
    },
    {
      "name": "size_text_99",
      "value": "99fp"
    },
    {
      "name": "size_text_100",
      "value": "100fp"
    }
  ]
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    },
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
{
  "color": [
    {
      "name": "color_0aa671",
      "value": "#0aa671"
    },
    {
      "name": "start_window_background",
      "value": "#FFFFFF"
    },
    {
      "name": "color_0165b8",
      "value": "#0165b8"
    },
    {
      "name": "color_182431",
      "value": "#182431"
    },
    {
      "name": "color_efefef",
      "value": "#EFEFEF"
    },
    {
      "name": "color_f5f5f5",
      "value": "#F5F5F5"
    },
    {
      "name": "color_adadb3",
      "value": "#adadb3"
    },
    {
      "name": "color_fff",
      "value": "#fff"
    },
    {
      "name": "color_898e92",
      "value": "#898e92"
    },
    {
      "name": "color_0165B8",
      "value": "#0165B8"
    },
    {
      "name": "color_f0f2f4",
      "value": "#f0f2f4"
    },
    {
      "name": "color_80000000",
      "value": "#80000000"
    },
    {
      "name": "color_009688",
      "value": "#009688"
    },
    {
      "name": "color_d68751",
      "value": "#d68751"
    },
    {
      "name": "color_F44336",
      "value": "#F44336"
    },
    {
      "name": "color_666",
      "value": "#666"
    },
    {
      "name": "color_999",
      "value": "#999"
    }
  ]
}
export { ChargePage } from './src/main/ets/page/ChargePage';
{
  "name": "@tbs/charge",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {
    "@tbs/common": "file:../../common"
  }
}
{
  "meta": {
    "stableOrder": true
  },
  "lockfileVersion": 3,
  "ATTENTION": "THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.",
  "specifiers": {
    "@tbs/common@../../common": "@tbs/common@../../common"
  },
  "packages": {
    "@tbs/common@../../common": {
      "name": "@tbs/common",
      "version": "1.0.0",
      "resolved": "../../common",
      "registryType": "local"
    }
  }
}
import { BusinessError } from "@kit.BasicServicesKit"
import { bundleManager } from "@kit.AbilityKit"
export enum ThirdApp {
  Alipay = 'alipays://',
  Amapuri = "amapuri://", // 高德地图的 scheme
  Baidumap = "baidumap://map/direction", // 百度地图的 scheme
  Maps = "maps://", // 华为地图的 scheme
  Https = "https://" // App link scheme
}
class ThirdAppManager{
  /** 第三方应用是否安装 */
  isAppInstall(thirdApp: ThirdApp): boolean {
    try {
      return bundleManager.canOpenLink(thirdApp)
    } catch (e) {
      let code = (e as BusinessError)?.code
      let msg = (e as BusinessError)?.message ?? ''
      if (code !== undefined) {
        if (code === 17700056) {
          msg += ` Please include "${thirdApp.replace('://',
            '')}" inside the "querySchemes" element of module.json5 in your app module.`
        }
        console.log(`isAppInstall get error${msg}`)
      } else {
        console.log(`isAppInstall get error${e}`)
      }
      return false
    }
  }
}
export const thirdAppManager = new ThirdAppManager()
import { geoLocationManager } from "@kit.LocationKit";
import { PermissionConst } from "./PermissionConst";
import { permissionManager } from "./PermissionManager";
class LocationManager {
  async requestPermissionAgain() {
    return await permissionManager.requestPermissionAgain(PermissionConst.locationPermissions, getContext(this))
  }
  // 检查是否有定位权限，外部可直接调用，异常时返回false
  async checkLocationPermissions(): Promise<boolean> {
    try {
      return await permissionManager.checkPermissions(PermissionConst.locationPermissions) &&
      geoLocationManager.isLocationEnabled();
    } catch (e) {
      console.log(`lucy== hasLocationPermissions, ${JSON.stringify(e)}`)
      return false;
    }
  }
  // 校验并申请权限，如果申请权限返回false，则抛出异常，使用者需要使用catch接收。
  async checkAndApplyPermissions(context: Context): Promise<boolean> {
    let isGranted = await this.checkLocationPermissions();
    if (isGranted) {
      return true;
    }
    try {
      let userGranted = await permissionManager.reqPermissionsFromUser(PermissionConst.locationPermissions, context);
      if (userGranted) {
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }
}
export const locationManager = new LocationManager()
import { Permissions } from '@kit.AbilityKit';
export class PermissionConst {
  static readonly locationPermissions: Array<Permissions> = [
    'ohos.permission.APPROXIMATELY_LOCATION',
    'ohos.permission.LOCATION',
  ];
  static readonly mediaRWPermissions: Array<Permissions> = [
    'ohos.permission.READ_MEDIA',
    'ohos.permission.WRITE_MEDIA'
  ];
  static readonly imageVideoReadPermission: Permissions = 'ohos.permission.READ_IMAGEVIDEO';
  static readonly imageVideoWritePermission: Permissions = 'ohos.permission.WRITE_IMAGEVIDEO';
  static readonly cameraPermission: Permissions = 'ohos.permission.CAMERA';
  // 获取OAID
  static readonly oaIdPermission: Permissions = 'ohos.permission.APP_TRACKING_CONSENT';
}
export * from './LocationManager';
export * from './ThirdAppManager'
import { abilityAccessCtrl, PermissionRequestResult, Permissions } from "@kit.AbilityKit";
import { BusinessError } from "@kit.BasicServicesKit";
import { appBundleManager } from "./AppBundleManager";
class PermissionManager{
  atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
  // 每次访问受目标权限保护的接口之前，都需要使用requestPermissionsFromUser()接口请求相应的权限。
  // 权限组：当应用请求权限时，同一个权限组的权限将会在一个弹窗内一起请求用户授权。用户点击同意，即同意了整个权限组。
  // 如定位权限组：['ohos.permission.APPROXIMATELY_LOCATION', 'ohos.permission.LOCATION']
  async checkPermissions(permissions: Array<Permissions>): Promise<boolean> {
    console.log(`check permission ${permissions}`);
    try {
      let grantStatusArray: abilityAccessCtrl.GrantStatus[] = [];
      for (let i = 0; i < permissions.length; i++) {
        grantStatusArray[i] = await this.checkPermissionInner(permissions[i]);
      }
      console.log(`checkPermissions: ${permissions}, grantStatus ${grantStatusArray} `);
      // todo 暂定全同意才算同意
      const denied = grantStatusArray.indexOf(abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) > -1;
      return !denied;
    } catch (e) {
      return Promise.reject(e);
    }
  }
  private async checkPermissionInner(permission: Permissions): Promise<abilityAccessCtrl.GrantStatus> {
    let grantStatus: abilityAccessCtrl.GrantStatus = abilityAccessCtrl.GrantStatus.PERMISSION_DENIED;
    // 校验应用是否被授予权限
    try {
      grantStatus = await this.atManager.checkAccessToken(appBundleManager.getTokenId(), permission);
    } catch (error) {
      const err: BusinessError = error as BusinessError;
      console.log(`Failed to check access token. Code is ${err.code}, message is ${err.message}`);
      return Promise.reject(`checkPermissionInner: checkAccessToken error: ${JSON.stringify(error)}`,);
    }
    return grantStatus;
  }
  async reqPermissionsFromUser(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
    // requestPermissionsFromUser会判断权限的授权状态来决定是否唤起弹窗
    try {
      let result: PermissionRequestResult = await atManager.requestPermissionsFromUser(context, permissions);
      let grantStatus: Array<number> = result.authResults;
      for (let i = 0; i < grantStatus.length; i++) {
        if (grantStatus[i] === 0) {
          // 用户授权，可以继续访问目标操作
          console.log(`reqPermissionsFromUser: ${permissions[i]} is granted`);
        } else {
          console.log(`reqPermissionsFromUser: ${permissions[i]} is denied`);
          return false;
        }
      }
      return true;
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
  //被拒绝后，再次点击全权限申请使用该方法
  async requestPermissionAgain(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    try {
      const result = await this.atManager.requestPermissionOnSetting(context, permissions)
      return result.every((status) => {
        return status === abilityAccessCtrl.GrantStatus.PERMISSION_GRANTED
      })
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
}
let permissionManager = new PermissionManager();
export { permissionManager };
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
{
  "module": {
    "name": "scan",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
@Component
export struct ScanPage {
  build() {
    Text('ScanPage')
  }
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "scan",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/scan",
		"installationFree": false
	}
}
{
  "module": {
    "name": "charge_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
{
  "module": {
    "name": "charge",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
{
  "float": [
    {
      "name": "page_text_font_size",
      "value": "50fp"
    }
  ]
}
export * from './ShowToast'
export * from './BottomPop'
import { StyleConst } from "../common";
import { ScreenUtils, WindowModel,ComponentUtils } from "../utils";
@CustomDialog
@Component
export struct BottomPop {
  controller: CustomDialogController;
  title: ResourceStr = '';
  titlePadding: Padding = { top: $r('app.float.size_16'), bottom: $r('app.float.size_16') }
  titleFontSize: ResourceStr = $r('app.float.size_text_16')
  titleTextColor: ResourceColor = Color.Black
  titleBgColor: ResourceColor = Color.Transparent
  contentBgColor: ResourceColor = Color.Transparent
  bgColor?: ResourceColor = Color.White
  // 软键盘是否显示
  @State keyBoardVisible: boolean = false
  keyboardAvoidMode: KeyboardAvoidMode = KeyboardAvoidMode.DEFAULT
  minHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.3 // 弹窗最低高度
  maxHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.8 // 弹窗最大高度
  @State dialogMaxHeight: number = 0 // 通过 maxHeight 计算出来的内容的高度
  @Builder
  child() {
  };
  @BuilderParam childBuilderParam: () => void = this.child;
  aboutToAppear(): void {
    if (this.isKeyboardAvoidNone()) {
      this.getKeyBoardVisible()
    }
    this.getTitleHeight()
  }
  // 软键盘是否拉起
  getKeyBoardVisible() {
    WindowModel.getInstance().getKeyBoardVisible((visible) => {
      this.keyBoardVisible = visible
    })
  }
  // 弹窗是否在拉起软键盘时进行自动避让
  isKeyboardAvoidNone() {
    return this.keyboardAvoidMode === KeyboardAvoidMode.NONE // 弹窗不避让软键盘
  }
  getTitleHeight() {
    ComponentUtils.getComponentHeightSync('BottomPop_title', (componentHeight) => {
      const safeBottomHeight = ScreenUtils.getInstance().getSafeBottomHeight() // 底部安全区高度
      // 内容最大高度 = 屏幕80%高度 - title高度 - 底部安全区高度
      this.dialogMaxHeight = Number(this.maxHeight) - componentHeight - safeBottomHeight
    })
  }
  build() {
    Stack({ alignContent: Alignment.TopEnd }) {
      Column() {
        Text(this.title)
          .padding(this.titlePadding)
          .fontColor(this.titleTextColor)
          .fontSize(this.titleFontSize)
          .fontWeight(FontWeight.Medium)
          .textAlign(TextAlign.Center)
          .width(StyleConst.FULL_WIDTH)
          .height($r('app.float.size_50'))
          .backgroundColor(this.titleBgColor)
          .id('BottomPop_title')
          .borderRadius({
            topLeft: $r('app.float.size_16'),
            topRight: $r('app.float.size_16')
          })
        Column() {
          this.childBuilderParam()
        }
        .backgroundColor(this.contentBgColor)
        .constraintSize({
          maxHeight: this.dialogMaxHeight,
        })
      }
      .padding({
        bottom: ScreenUtils.getInstance().getSafeBottomHeight(), // 设置padding避开底部安全区
      })
      .width(StyleConst.FULL_WIDTH)
      .backgroundColor(this.bgColor)
      .borderRadius({
        topLeft: $r('app.float.size_16'),
        topRight: $r('app.float.size_16')
      })
      .constraintSize({
        maxHeight: this.maxHeight,
        minHeight: this.minHeight
      })
      Image($r("app.media.common_bottom_sheet_close"))
        .size({ width: $r('app.float.size_20'), height: $r('app.float.size_20') })
        .margin({ top: $r('app.float.size_16'), right: $r('app.float.size_16') })
        .responseRegion({
          x: '-25%',
          y: '-25%',
          width: '150%',
          height: '150%'
        })
        .onClick(() => {
          this.controller.close();
        })
    }
  }
}
import { promptAction } from '@kit.ArkUI'
//轻提示工具类
export const toast = (hintContent: string | ResourceStr, alignment: Alignment = Alignment.Center): void => {
  promptAction.showToast({ message: hintContent, alignment: alignment })
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    }
  ]
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "charge",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/charge",
		"installationFree": false
	}
}
export class ChargeListData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: ChargeType[]
}
export class ChargeType {
  address?: string //地址
  coordinate?: string //坐标
  distance?: number //距离
  freePileTotal?: number //空闲数据
  id?: number //id
  imageUrl?: string //图片
  name?: string //站名
  pileTotal?: number //剩余数据
  pricePerHour?: number //多少钱一度
  tenantId?: number //租户id
  tenantName?: string //租户
}
export class PileListData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: PileType[]
}
export class PileType {
  code?: string //编号
  id?: number //id
  state?: number //充电桩状态
  stationId?: number //充电站站id
  stationName?: string //充电站站名
}
export class PriceListData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: PriceType[]
}
export class PriceType {
  endHour?: number|string  //结束时间
  id?: number  //id
  price?: string   //价格
  startHour?: number|string  //开始时间
  tenantId?: number  //租户id
}
export class OrderTypeData {
  PageNo?: number
  PageSize?: number
  TotalCount?: number
  List?: OrderType[]
}
export class OrderType{
  id?: number  //id
  pileCode?: string  //充电桩编号
  orderCode?: string  //订单号
  price?: number  //价格
  startAt?: string  //开始时间
  state?: number  //订单状态
  stationName?: string  //充电站名
  stopAt?: string  //结束时间
}
export class mapListItem {
  name: ResourceStr = ''
  link: string = ''
  isAppInstall: boolean = false
}
export class AddressData {
  latitude?: number = 0.0;
  longitude?: number = 0.0;
}
//桩参数
export const pileParam: Array<pileParamType> = [
  { text: $r('app.string.fast_charge'), type: '1' },
  { text: $r('app.string.180KW'), type: '2' },
  { text: $r('app.string.0V'), type: '3' },
  { text: $r('app.string.national_standard'), type: '4' }
]
export class pileParamType {
  text?: ResourceStr
  type?: string
}
export class CommonDataSource<T> implements IDataSource {
  private listeners: DataChangeListener[] = [];
  protected items: T[] = []
  public totalCount(): number {
    return this.items.length
  }
  public getData(index: number): T | void {
    return this.items[index]
  };
  public getList(): T[] {
    return this.items
  }
  public clearData() {
    this.items = [];
    this.notifyDataReload()
  }
  public resetData(data: T | T[]) {
    this.items = [];
    if (Array.isArray(data)) {
      this.items.push(...data);
    } else {
      this.items.push(data);
    }
    this.notifyDataReload()
  }
  public setDataArray(data: T[]) {
    this.items = data
    this.notifyDataReload()
  }
  // 向列表追加数据
  public pushData(data: T | T[]): void {
    let fromIndex = this.items.length
    if (Array.isArray(data)) {
      this.items.push(...data)
    } else {
      this.items.push(data)
    }
    this.notifyDatasetAdd(fromIndex, this.items.length - fromIndex)
  }
  public changeItem(index: number) {
    this.notifyDataChange(index)
  }
  public deleteData(index: number): void {
    this.items.splice(index, 1);
    this.notifyDataDelete(index);
  }
  registerDataChangeListener(listener: DataChangeListener): void {
    if (this.listeners.indexOf(listener) < 0) {
      this.listeners.push(listener);
    }
  }
  unregisterDataChangeListener(listener: DataChangeListener): void {
    const pos = this.listeners.indexOf(listener);
    if (pos >= 0) {
      this.listeners.splice(pos, 1);
    }
  }
  notifyDataReload(): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.RELOAD }]);
    });
  }
  notifyDatasetAdd(insertIndex: number, addCount: number): void {
    this.listeners.forEach(listener => {
      listener.onDatasetChange([{ type: DataOperationType.ADD, index: insertIndex, count: addCount }]);
    })
  }
  notifyDataChange(changeIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.CHANGE, index: changeIndex }]);
    });
  }
  notifyDataDelete(deleteIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.DELETE, index: deleteIndex }]);
    });
  }
}
export class UserInfoData {
  id?: number
  username?: string
  nickname?: string
  balance?: number
  avatarUrl?: string
}
import { BottomPop, StyleConst, ThirdApp, thirdAppManager, toast,locationManager } from "@tbs/common"
import { AddressData, ChargeType, mapListItem, PileType } from "../model/ChargeModel"
import { getPiles } from "../viewModel/ChargeViewModel"
import { ChargeItemDialogView } from "./ChargeItemDialogView"
import { router } from "@kit.ArkUI"
import '../page/ChargingPage'
import { OpenLinkOptions, common } from "@kit.AbilityKit"
import { BusinessError } from "@kit.BasicServicesKit"
import { geoLocationManager } from "@kit.LocationKit"
import { MapDialogCall } from "./MapDialogCall"
@Component
export struct ChargeListView {
  @Prop chargeList: ChargeType[]
  @State Piles: PileType[] = []
  @State destinationLongitude: number = 0
  @State destinationLatitude: number = 0
  @State destinationName: string = ''
  @State mapList: mapListItem[] = []
  locationData: AddressData = {}
  private selectMapDialogController?: CustomDialogController
  async getPileData(id: number) {
    let data = await getPiles(id)
    if (data) {
      this.Piles = data
    }
  }
  aboutToDisappear(): void {
    this.chargeItemController = null
    this.selectMapDialogController?.close()
    this.selectMapDialogController = undefined
  }
  chargeItemController: CustomDialogController | null = new CustomDialogController({
    builder: BottomPop({
      title: $r('app.string.selection_of_charging_pile'),
      bgColor: $r('app.color.color_f0f2f4'),
      titleBgColor: $r('app.color.color_f0f2f4'),
      contentBgColor: $r('app.color.color_f0f2f4'),
      keyboardAvoidMode: KeyboardAvoidMode.NONE,
      childBuilderParam: () => {
        this.chargeItemDialog()
      }
    }),
    customStyle: true,
    alignment: DialogAlignment.Bottom,
    maskColor: $r('app.color.color_80000000'),
  })
  @Builder
  chargeItemDialog() {
    ChargeItemDialogView({
      Piles: this.Piles,
      clickPileItemCallBack: (item: PileType) => {
        this.clickPileItem(item)
      }
    })
  }
  //单个桩点击处理
  clickPileItem(item: PileType) {
    if (item.state === 0) {
      this.chargeItemController?.close()
      router.pushNamedRoute({
        name: 'ChargingPage',
        params: { item }
      })
    } else if (item.state === 1) {
      toast('此桩正在充电中～')
    } else {
      toast('桩故障，无法充电哦～')
    }
  }
  @Builder
  chargeItem(item: ChargeType) {
    Column({ space: 12 }) {
      Text(item.name).fontWeight(FontWeight.Bold)
        .onClick(() => {
          this.chargeItemController?.open()
          if (item.id) {
            this.getPileData(item.id)
          }
        })
      Row({ space: 8 }) {
        Text(`￥ ${item.pricePerHour}`).fontColor($r('app.color.color_0aa671'))
        Text('/度').fontColor($r('app.color.color_adadb3'))
        Blank()
        Text(item.tenantName).fontSize($r('app.float.size_text_18')).fontColor($r('app.color.color_0aa671'))
        Blank()
        Image($r('app.media.fast')).width($r('app.float.size_20'))
        Text(`闲${item.freePileTotal}`).fontWeight(FontWeight.Bold)
        Text(`/${item.pileTotal}`)
      }
      .width(StyleConst.FULL_WIDTH)
      .onClick(() => {
        this.chargeItemController?.open()
        if (item.id) {
          this.getPileData(item.id)
        }
      })
      Row({ space: 8 }) {
        Row({ space: 8 }) {
          if (item.distance) {
            Text(`${item.distance.toFixed(2)}km`)
          }
          Image($r('app.media.location')).width($r('app.float.size_20'))
        }
        .onClick(()=>{
          this.handleCheckInstallation(item)
        })
        Image($r('app.media.imgUrl')).width($r('app.float.size_20'))
      }
    }
    .backgroundColor($r('app.color.color_fff'))
    .padding({
      left: $r('app.float.size_10'),
      right: $r('app.float.size_10'),
      top: $r('app.float.size_15'),
      bottom: $r('app.float.size_15')
    })
    .borderRadius($r('app.float.size_20'))
    .alignItems(HorizontalAlign.Start)
  }
  //有数据页面
  @Builder
  haveDataCardView() {
    //列表
    List({ space: 10 }) {
      ForEach(this.chargeList, (item: ChargeType) => {
        ListItem() {
          this.chargeItem(item)
        }
      })
    }
    .width(StyleConst.FULL_WIDTH)
    .padding($r('app.float.size_10'))
    .layoutWeight(1)
  }
  //无数据页面
  @Builder
  noDataCardView() {
    Column() {
      Image($r('app.media.empty_charge1'))
        .width($r('app.float.size_100'))
        .height($r('app.float.size_100'))
      Text($r('app.string.no_data'))
        .fontSize($r('app.float.size_text_20'))
        .fontColor(Color.Black)
        .fontWeight(FontWeight.Bold)
        .margin({ top: $r('app.float.size_20'), bottom: $r('app.float.size_24') })
    }
    .margin({ top: $r('app.float.size_200') })
  }
  handleCheckInstallation(item: ChargeType) {
    this.isAppInstalled(item)
    if (this.mapList.length === 0) {
      toast($r('app.string.visit_store_install_maps_first'))
    } else {
      this.permissionRequest()
    }
  }
  isAppInstalled(model: ChargeType) {
    const mapList = [ThirdApp.Amapuri, ThirdApp.Baidumap, ThirdApp.Maps].map((key: ThirdApp) => {
      let name: Length = ''
      let link: string = ""
      switch (key) {
        case ThirdApp.Amapuri:
          link =
            `amapuri://route/plan?dlat=${model.coordinate?.split(',')[0]}&dname=${model.name}&slat=${this.locationData.latitude}&dlon=${model.coordinate?.split(',')[1]}&slon=${this.locationData.longitude}&sname=我的位置&t=0&sourceApplication=com.huawei.hmos.maps.app`
          name = $r('app.string.visit_store_map')
          break
        case ThirdApp.Baidumap:
          name = $r('app.string.visit_store_baidu_map')
          link =
            `baidumap://map/direction?destination=latlng:${model.coordinate?.split(',')[0]},${model.coordinate?.split(',')[1]}|name:${model.name}&mode=driving`
          break
        case ThirdApp.Maps:
          name = $r('app.string.visit_store_petal_map')
          link =
            `https://www.petalmaps.com/routes/?daddr=${model.coordinate?.split(',')[0]},${model.coordinate?.split(',')[1]}(${model.name})&coordinateType=0&type=drive&utm_source=com.huawei.hmos.maps.app`
          break
        default:
          name = ""
      }
      return {
        name,
        link,
        isAppInstall: thirdAppManager.isAppInstall(key)
      } as mapListItem
    })
    console.log('lucy== map',JSON.stringify(mapList))
    this.mapList = mapList.filter(ele => ele.isAppInstall)
  }
  async permissionRequest() {
    try {
      let isGranted = await locationManager.checkAndApplyPermissions(getContext(this))
      if (!isGranted) {
        isGranted = await locationManager.requestPermissionAgain()
      }
      if (isGranted) {
        this.selectMapDialogController = new CustomDialogController({
          builder: MapDialogCall({
            title: '请选择地图',
            titleFontSize: $r('app.float.size_13'),
            titleTextColor: '#acb1b6',
            mapList: this.mapList,
            propBackgroundColor: Color.Transparent,
            propBorderRadius: $r('app.float.size_8'),
            propHeight: $r('app.float.size_50'),
            propSpace: 0,
            titleHeight: $r('app.float.size_42'),
            propContentPadding: {
              top: $r('app.float.size_12'),
              bottom: 0
            },
            propPadding: {
              left: $r('app.float.size_12'),
              right: $r('app.float.size_12'),
              bottom: $r('app.float.size_31'),
            },
            onClickCallBack: (item) => {
              this.handleStartNavigation(item)
            }
          }),
          customStyle: true,
          autoCancel: true,
          alignment: DialogAlignment.Bottom,
          keyboardAvoidMode: KeyboardAvoidMode.NONE
        })
        this.selectMapDialogController.open()
        const request: geoLocationManager.SingleLocationRequest = {
          locatingPriority: geoLocationManager.LocatingPriority.PRIORITY_LOCATING_SPEED,
          locatingTimeoutMs: 10000
        };
        await geoLocationManager.getCurrentLocation(request).then((location) => {
          // 获取到的经纬度
          this.locationData.latitude = location.latitude;
          this.locationData.longitude = location.longitude;
        }).catch((err: object) => {
          console.error("lucy== 获取位置失败:", JSON.stringify(err));
        });
      }
    } catch (e) {
      console.log('lucy== Address request location Permission fail' + e.message)
    }
  }
  handleStartNavigation(item: mapListItem) {
    this.selectMapDialogController?.close()
    this.jumpToMapApp(item.link)
  }
  jumpToMapApp(link: string) {
    try {
      const openLinkOptions: OpenLinkOptions = {
        appLinkingOnly: false
      };
      const context = getContext(this) as common.UIAbilityContext
      context.openLink(link, openLinkOptions)
        .then(() => {
          console.log('open link success.');
        }).catch((err: BusinessError) => {
        console.log(`open link failed. Code is ${err.code}, message is ${err.message}`);
      });
    } catch (paramError) {
      console.log(`Failed to start link. Code is ${paramError.code}, message is ${paramError.message}`);
    }
  }
  build() {
    if (this.chargeList.length > 0) {
      this.haveDataCardView()
    } else {
      this.noDataCardView()
    }
  }
}
import { StyleConst } from "@tbs/common"
import { mapListItem } from "../model/ChargeModel"
interface TextStyle {
  height: Length
}
@Extend(Text)
//文本样式
function textStyles(item: TextStyle) {
  .fontColor($r('app.color.color_0165b8'))
  .textAlign(TextAlign.Center)
  .fontSize($r('app.float.size_18'))
  .height(item.height)
}
@CustomDialog
@Component
export struct MapDialogCall {
  mapList: mapListItem[] = []
  controller: CustomDialogController
  propBackgroundColor: Color | number | string | Resource = '#f3f4f5'
  propPadding: Padding | Length | LocalizedPadding = {}
  propBorderRadius: ResourceStr = '0'
  title: ResourceStr = '';
  titlePadding: Padding = { top: $r('app.float.size_16'), bottom: $r('app.float.size_16') }
  titleFontSize: ResourceStr = $r('app.float.size_text_16')
  titleTextColor: ResourceColor = '#222427'
  titleBgColor: ResourceColor = Color.Transparent
  onClickCallBack?: (ele: mapListItem) => void
  propHeight: Length = $r('app.float.size_25')
  propSpace: number = 13
  propContentPadding: Padding | Length | LocalizedPadding = {
    top: $r('app.float.size_12'),
    bottom: $r('app.float.size_12')
  }
  titleHeight: Length = 0
  build() {
    Column({ space: 12 }) {
      Column({ space: this.propSpace }) {
        Text(this.title)
          .fontColor(this.titleTextColor)
          .fontSize(this.titleFontSize)
          .textAlign(TextAlign.Center)
          .width(StyleConst.FULL_WIDTH)
          .height(this.titleHeight)
        ForEach(
          this.mapList,
          (ele: mapListItem) => {
            Text(ele.name)
              .textStyles({ height: this.propHeight })
              .onClick(() => {
                this.onClickCallBack && this.onClickCallBack(ele)
              })
          }
        )
      }
      .borderRadius(this.propBorderRadius)
      .justifyContent(FlexAlign.Center)
      .width(StyleConst.FULL_WIDTH)
      .backgroundColor(Color.White)
      .padding(this.propContentPadding)
      Row() {
        Text('取消')
          .textStyles({ height: this.propHeight })
          .fontColor($r('app.color.color_0165b8'))
          .width(StyleConst.FULL_WIDTH)
      }
      .borderRadius(this.propBorderRadius)
      .backgroundColor(Color.White)
      .height($r('app.float.size_50'))
      .margin({ bottom: $r('app.float.size_16') })
      .onClick(()=>{
        this.controller.close()
      })
    }
    .padding(this.propPadding)
    .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor(this.propBackgroundColor)
  }
}
import { ScreenUtils, StyleConst } from "@tbs/common"
@Extend(TextInput)
function orderInputStyle(focus: boolean) {
  .textAlign(TextAlign.Start)
  .fontColor(Color.Black)
  .placeholderColor($r('app.color.color_898e92'))
  .placeholderFont({ size: $r('app.float.size_text_13') })
  .fontSize($r('app.float.size_text_14'))
  .backgroundColor(Color.Transparent)
  .enterKeyType(EnterKeyType.Search) //设置输入法回车键类型 显示为搜索样式
  .defaultFocus(focus)
}
@Component
export struct ChargeSearchBarView {
  @Link name: string
  @State cancelMode: CancelButtonStyle = CancelButtonStyle.INVISIBLE // 输入框清除按钮模式
  inputController?: TextInputController
  keyboardFocus: boolean = false // 控制键盘首次是否自动弹出
  maxLength: number = Infinity
  searchButtonCallback?: (value: string) => void // 点击搜索按钮回调
  //输入框
  @Builder
  inputBuilder() {
    Row() {
      Image($r('app.media.search_icon'))
        .width($r('app.float.size_18'))
        .height($r('app.float.size_18'))
        .margin({ left: $r('app.float.size_7') })
      TextInput({
        text: this.name,
        placeholder: $r('app.string.search_content'),
        controller: this.inputController
      })
        .orderInputStyle(this.keyboardFocus)
        .maxLines(this.maxLength)
        .layoutWeight(1)
        .cancelButton({
          style: this.cancelMode,
          icon: { src: $r('app.media.search_delete'), size: $r('app.float.size_14') }
        })
        .padding({ left: $r('app.float.size_6') })
        .onChange((value: string) => {
          this.name = value
          if (value) {
            //输入框有值时，清除按钮显示
            this.cancelMode = CancelButtonStyle.INPUT
          }
        })
        .onSubmit(() => {
          this.lostKeyboard()
          if (this.searchButtonCallback) {
            this.searchButtonCallback(this.name)
          }
        })
    }
    .height($r('app.float.size_34'))
    .clip(true)
    .layoutWeight(1)
    .backgroundColor($r('app.color.color_fff'))
    .borderRadius($r('app.float.size_8'))
    .margin({ left: $r('app.float.size_6'), right: $r('app.float.size_8') })
  }
  //搜索按钮
  @Builder
  searchButtonBuilder() {
    Text($r('app.string.search'))
      .fontSize($r('app.float.size_text_14'))
      .fontColor($r('app.color.color_0aa671'))
      .fontWeight(FontWeight.Medium)
      .height($r('app.float.size_30'))
      .padding({ left: $r('app.float.size_12'), right: $r('app.float.size_12') })
      .backgroundColor(Color.White)
      .borderRadius($r('app.float.size_6'))
      .onClick(() => {
        if (this.searchButtonCallback) {
          this.searchButtonCallback(this.name)
        }
        if (this.name) {
          this.lostKeyboard()
        }
      })
  }
  lostKeyboard() {
    if (this.inputController) {
      this.inputController.stopEditing()
    }
  }
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight()).backgroundColor($r('app.color.color_0aa671'))
      Row() {
        //输入框
        this.inputBuilder()
        //搜索按钮
        this.searchButtonBuilder()
      }
      .width(StyleConst.FULL_WIDTH)
      .padding({ left: $r('app.float.size_12'), right: $r('app.float.size_12') })
      .margin({ bottom: $r('app.float.size_15') })
    }
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
// import { PriceType } from "../model/ChargeModel"
//
//
// //标题样式
// @Extend(Text) function PriceHeaderSty(){
//   .fontSize(18).fontWeight(FontWeight.Bold).fontColor(Color.White)
// }
// //行内样式
// @Extend(Text) function PriceCellSty(){
//   .fontSize(20).textAlign(TextAlign.Center)
// }
// @Component
// export struct ChargePriceDialogView {
//   @Prop priceList:PriceType[]
//
//   build() {
//     Column({space:10}){
//       Text('收费标准').textAlign(TextAlign.Center).fontWeight(FontWeight.Bold).fontSize(25)
//       Column({space:10}){
//         Row({space:50}){
//           Text('收费时段').PriceHeaderSty()
//           Text('收费(元/度)').PriceHeaderSty().margin({left:20})
//         }
//         .width('90%')
//         .padding(15)
//         .backgroundColor('#0aa671')
//         .borderRadius(5)
//         Column({space:10}){
//           List({space:10}){
//             ForEach(this.priceList,(item:PriceType) => {
//               ListItem(){
//                 Column(){
//                   Row({space:100}){
//                     Text(`${item.startHour} - ${item.endHour}`).width(80).PriceCellSty()
//                     Text(`${item.price}`).width(60).PriceCellSty()
//                   }
//                   .width('90%')
//                   .height(40)
//                   Divider().width('95%').opacity(0.6)
//                 }
//               }
//             })
//           }
//           .width('90%')
//           .layoutWeight(1)
//         }
//         .width('90%')
//         .height(180)
//         .padding(10)
//         .borderWidth(1).borderColor(Color.Gray)
//       }
//       .width('90%')
//     }
//     .width('100%')
//     .padding(10)
//   }
// }
import { PriceType } from "../model/ChargeModel"
@Component
export struct ChargePriceDialogView {
  @Prop priceList:PriceType[]
  build() {
    Column() {
      // 顶部标题
      this.buildHeader()
      // 价格表格区域
      this.buildPriceTable()
      // 分隔线
      Divider()
        .strokeWidth(1)
        .color('#e0e0e0')
        .margin({ top: 25, bottom: 20 })
      // 底部提示
      this.buildFooter()
    }
    .padding(20)
    .backgroundColor('#f5f7fa')
    .borderRadius(12)
    .width('100%')
    .height('auto')
  }
  // 顶部标题组件
  @Builder
  buildHeader() {
    Text('桩编号：00205020101100000000323')
      .fontSize(14)
      .fontColor('#666666')
      .margin({ bottom: 15 })
  }
  // 价格表格组件 - 简化为两列
  @Builder
  buildPriceTable() {
    Column() {
      // 表头 - 左右分布
      Row() {
        Text('充电时段')
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .layoutWeight(1) // 左边占据1份空间
        Text('价格（元/度）')
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .layoutWeight(1) // 右边占据1份空间
      }
      .width('100%')
      .padding({ bottom: 10 })
      // 表格内容 - 左右分布
      ForEach(this.priceList,
        (item: PriceType, index: number) => {
          Row() {
            Text(`${item.startHour} - ${item.endHour}`)
              .fontSize(16)
              .fontColor('#333333')
              .layoutWeight(1) // 左边占据1份空间
            if(item.price){
              Text(`${item.price}`)
                .fontSize(16)
                .fontColor('#e91e63')// 价格使用红色强调
                .fontWeight(FontWeight.Medium)
                .layoutWeight(1) // 右边占据1份空间
            }
          }
          .width('100%')
          .padding({ top: 10, bottom: 10 })
          .backgroundColor(index % 2 === 0 ? '#ffffff' : '#f8f9fa')
        })
    }
    .width('100%')
    .padding(12)
    .backgroundColor(Color.White)
    .borderRadius(8)
    .shadow({
      radius: 4,
      color: '#20000000',
      offsetX: 1,
      offsetY: 1
    })
  }
  // 底部提示组件
  @Builder
  buildFooter() {
    Text('*充电费用仅供参考，请以实际收取费用为准')
      .fontSize(12)
      .fontColor('#999999')
      .fontStyle(FontStyle.Italic)
      .alignSelf(ItemAlign.Start)
  }
}
import { StorageConst, ScreenUtils, StyleConst } from "@tbs/common"
import { pileParam, pileParamType, PileType } from "../model/ChargeModel"
@Component
export struct ChargeItemDialogView {
  @StorageProp(StorageConst.SCREEN_WIDTH_VP) screenWidth: number =
    ScreenUtils.getInstance().getScreenWidthVp()
  @Prop Piles: PileType[]
  clickPileItemCallBack?: (item:PileType) => void
  @Builder
  pileItem(item: PileType) {
    Row() {
      //左
      this.pileItemLeftBuilder(item)
      //右
      this.pileItemRightBuilder(item)
    }
    .padding({ top: $r('app.float.size_12'), bottom: $r('app.float.size_12') })
    .width(this.screenWidth - 12 * 2)
    .margin({ bottom: $r('app.float.size_12') })
    .borderRadius($r('app.float.size_12'))
    .backgroundColor(Color.White)
    .onClick(() => {
      if (this.clickPileItemCallBack) {
        this.clickPileItemCallBack(item)
      }
    })
  }
  //桩左侧UI
  @Builder
  pileItemLeftBuilder(item: PileType) {
    Column({ space: 10 }) {
      Image(this.pileImage(item.state ?? 0))
        .height($r('app.float.size_30'))
      Text(this.pileStateText(item.state ?? 0))
        .textAlign(TextAlign.Center)
        .fontSize($r('app.float.size_text_10'))
        .fontColor(this.pileStateTextColor(item.state ?? 0))
        .width($r('app.float.size_40'))
        .height($r('app.float.size_20'))
        .border({
          width: $r('app.float.size_1'),
          color: this.pileStateTextColor(item.state ?? 0),
          style: BorderStyle.Solid,
          radius: $r('app.float.size_20')
        })
    }
    .margin({ left: $r('app.float.size_20'), right: $r('app.float.size_20') })
  }
  //桩右侧UI
  @Builder
  pileItemRightBuilder(item: PileType) {
    Column({ space: 10 }) {
      Text() {
        Span($r('app.string.pile_number')).fontColor($r('app.color.color_898e92'))
        Span(item.code).fontColor(Color.Black)
      }.fontSize($r('app.float.size_text_14'))
      Text() {
        Span($r('app.string.station_name')).fontColor($r('app.color.color_898e92'))
        Span(item.stationName).fontColor(Color.Black)
      }.fontSize($r('app.float.size_text_14'))
      Row({ space: 10 }) {
        ForEach(pileParam, (item: pileParamType) => {
          Row() {
            Text(item.text)
              .textAlign(TextAlign.Center)
              .fontSize($r('app.float.size_text_11'))
              .fontColor(Color.Black)
          }
          .backgroundColor($r('app.color.color_f5f5f5'))
          .padding({
            top: $r('app.float.size_5'),
            bottom: $r('app.float.size_5'),
            left: $r('app.float.size_8'),
            right: $r('app.float.size_8')
          })
        })
      }
    }
    .layoutWeight(1)
    .alignItems(HorizontalAlign.Start)
  }
  //区分不同状态的桩图片
  pileImage(state: number) {
    switch (state) {
      case 0:
        return $r('app.media.pile_idle')
      case 1:
        return $r('app.media.pile_charging_in_progress')
      case 2:
        return $r('app.media.pile_faults')
      default:
        return $r('app.media.pile_idle')
    }
  }
  //区分不同状态的文本
  pileStateText(state: number) {
    switch (state) {
      case 0:
        return $r('app.string.idle')
      case 1:
        return $r('app.string.charging_in_progress')
      case 2:
        return $r('app.string.faults')
      default:
        return $r('app.string.idle')
    }
  }
  //区分不同状态的文本颜色
  pileStateTextColor(state: number) {
    switch (state) {
      case 0:
        return $r('app.color.color_009688')
      case 1:
        return $r('app.color.color_d68751')
      case 2:
        return $r('app.color.color_F44336')
      default:
        return $r('app.color.color_009688')
    }
  }
  build() {
    List() {
      ForEach(this.Piles, (item: PileType) => {
        ListItem() {
          this.pileItem(item)
        }
        .width(StyleConst.FULL_WIDTH)
      })
    }
    .width(StyleConst.FULL_WIDTH)
  }
}
{
  "float": [
    {
      "name": "page_text_font_size",
      "value": "50fp"
    }
  ]
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    }
  ]
}
import { BottomLoadingBuilder, formatDate, StyleConst, TbsTitleBar, toast } from "@tbs/common"
import { OrderType } from "../model/ChargeModel"
import { getChargeOrders, getStopCharge } from "../viewModel/ChargeViewModel"
@Entry({ routeName: 'ChargeOrderPage' })
@Component
export struct ChargeOrderPage {
  @State Orders: OrderType[] = []
  @State loading: boolean = false // 加载状态
  @State pageNum: number = 1 //当前页，起始值为1
  @State pageSize: number = 5
  @State haveNextPage: boolean = false //是否还有下一页数据
  onPageShow(): void {
    this.resetPage()
    this.getChargeOrdersData(false)
  }
  // 重置分页状态
  resetPage() {
    this.pageNum = 1
    this.haveNextPage = true
    this.Orders = []
  }
  // 获取充电列表数据
  async getChargeOrdersData(isLoadMore: boolean = false) {
    // 如果没有下一页，不再请求
    if (isLoadMore && !this.haveNextPage) {
      return
    }
    this.loading = true
    try {
      // 计算当前请求的页码
      const currentPage: number = isLoadMore ? this.pageNum + 1 : 1
      let data = await getChargeOrders(currentPage, this.pageSize)
      if (data && data.List) {
        // 更新分页状态
        this.pageNum = currentPage
        this.haveNextPage = data.List.length >= this.pageSize
        // 更新订单列表
        if (isLoadMore) {
          this.Orders = [...this.Orders, ...data.List]
        } else {
          this.Orders = data.List
        }
      }
    } catch (error) {
      toast('加载订单失败')
      console.error('获取订单失败:', error)
    } finally {
      this.loading = false
    }
  }
  //结束充电
  async getStopChargeInfo(id: number) {
    let data = await getStopCharge(id)
    if (data != null && Number(data) === 0) {
      this.Orders = this.Orders.map(item => {
        if (item.id == id) {
          return {
            id: item.id,
            pileCode: item.pileCode,
            orderCode: item.orderCode,
            price: item.price,
            startAt: item.startAt,
            state: 1,
            stationName: item.stationName,
            stopAt: item.stopAt
          }
        }
        return item
      })
      toast('停止充电成功')
    } else {
      toast('停止充电失败')
    }
  }
  build() {
    Column({ space: 10 }) {
      //1.标题
      TbsTitleBar({ title: '充电订单', showBackIcon: true })
      //2.订单
      this.OrderCard()
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_efefef'))
  }
  @Builder
  OrderCard() {
    List({ space: 10 }) {
      ForEach(this.Orders, (item: OrderType) => {
        ListItem() {
          RelativeContainer() {
            Text(item.orderCode)
              .fontColor(Color.White)
              .height($r('app.float.size_40'))
              .padding($r('app.float.size_10'))
              .borderRadius({ bottomRight: $r('app.float.size_10'), bottomLeft: $r('app.float.size_10') })
              .backgroundColor($r('app.color.color_0aa671'))
              .id('code_text')
              .alignRules({
                right: { anchor: "__container__", align: HorizontalAlign.End },
              })
            Column({ space: 8 }) {
              if (item.state === 0) {
                Text($r('app.string.charging_in_progress')).fontWeight(FontWeight.Bold).fontColor(Color.Red)
              } else {
                Text($r('app.string.completed')).fontWeight(FontWeight.Bold).fontColor($r('app.color.color_0aa671'))
              }
              Row({ space: 10 }) {
                Text($r('app.string.pile_code'))
                Text(item.pileCode)
              }
              Row({ space: 10 }) {
                Text($r('app.string.charge_name'))
                Text(item.stationName)
              }
              Row({ space: 10 }) {
                Text($r('app.string.price'))
                Text(`${item.price}`)
              }
              Row({ space: 10 }) {
                Text($r('app.string.order_status'))
                Text(item.state == 0 ? '充电中' : item.state == 1 ? '已完成' : '未付账')
              }
              Row({ space: 10 }) {
                Text($r('app.string.start_time'))
                Text(formatDate(item.startAt ?? ''))
              }
              Row({ space: 10 }) {
                Text($r('app.string.end_time'))
                Text(item.stopAt && item.state !== 0 ? formatDate(item.stopAt) : '')
              }
              if (item.state === 0) {
                Button($r('app.string.stop_charge')).width($r('app.float.size_90')).backgroundColor(Color.Red)
                  .onClick(() => {
                    if (item.id) {
                      this.getStopChargeInfo(item.id)
                    }
                  })
              } else {
                Text('')
              }
            }
            .alignItems(HorizontalAlign.Start)
            .id('content')
            .alignRules({
              top: { anchor: "code_text", align: VerticalAlign.Bottom }
            })
          }
          .width(StyleConst.FULL_WIDTH)
          .height('auto')
          .padding({ left: $r('app.float.size_10'), bottom: $r('app.float.size_10') })
          .borderRadius($r('app.float.size_10'))
          .backgroundColor('#FFF')
        }
        .width(StyleConst.FULL_WIDTH)
      })
      ListItem() {
        BottomLoadingBuilder({
          haveNextPage: this.haveNextPage,
          loading: this.loading,
          dataLength: this.Orders.length
        })
      }
    }
    .width(StyleConst.FULL_WIDTH)
    .padding({ left: $r('app.float.size_10'), right: $r('app.float.size_10') })
    .layoutWeight(1)
    .onReachEnd(() => {
      if (this.haveNextPage && !this.loading) {
        this.getChargeOrdersData(true)
      }
    })
  }
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "charge",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/charge",
		"installationFree": false
	}
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
import { requestApiCall, Apis, toast } from "@tbs/common";
import { http } from "@kit.NetworkKit";
import { ChargeListData, OrderTypeData, PileListData, PriceListData } from "../model/ChargeModel";
import { BusinessError } from "@kit.BasicServicesKit";
//获取充电站
export function getStations(name: string, pageNo: number = 1, pageSize: number = 20) {
  return requestApiCall(`${Apis.CHARGE_STATION_LIST}?name=${name}&pageNo=${pageNo}&pageSize=${pageSize}`,
    http.RequestMethod.GET).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    const data = res.data as ChargeListData
    return data
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 获取充电站接口调用失败，${err.code}+${err.message}`)
  })
}
//获取充电桩
export function getPiles(stationId: number) {
  return requestApiCall(`${Apis.CHARGE_PILE_LIST}?stationId=${stationId}`, http.RequestMethod.GET).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    const data = res.data as PileListData
    return data.List
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 获取充电桩接口调用失败，${err.code}+${err.message}`)
  })
}
//获取充电价格
export function getChargePrice(pageNo: number = 1, pageSize: number = 20) {
  return requestApiCall(`${Apis.CHARGE_PRICE}?pageNo=${pageNo}&pageSize=${pageSize}`, http.RequestMethod.GET)
    .then(res => {
      if (res.code !== 0 && res.message) {
        toast(res.message)
      }
      const data = res.data as PriceListData
      return data.List
    }).catch((err: BusinessError) => {
      console.error(`lucy++ 获取充电价格接口调用失败，${err.code}+${err.message}`)
    })
}
//开始充电
export function getStartCharge(pileId: number) {
  const params: Record<string, Object> = {
    "pileId": pileId
  }
  return requestApiCall(Apis.CHARGE_START, http.RequestMethod.POST, params).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    return res.code
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 开始充电接口调用失败，${err.code}+${err.message}`)
  })
}
//获取充电订单列表
export function getChargeOrders(pageNo: number, pageSize: number) {
  return requestApiCall(`${Apis.CHARGE_ORDER_LIST}?pageNo=${pageNo}&pageSize=${pageSize}`, http.RequestMethod.GET)
    .then(res => {
      if (res.code !== 0 && res.message) {
        toast(res.message)
      }
      const data = res.data as OrderTypeData
      return data
    }).catch((err: BusinessError) => {
      console.error(`lucy++ 获取充电订单列表接口调用失败，${err.code}+${err.message}`)
    })
}
//结束充电
export function getStopCharge(orderId: number) {
  const params: Record<string, Object> = {
    "orderId": orderId
  }
  return requestApiCall(Apis.CHARGE_STOP, http.RequestMethod.POST, params).then(res => {
    if (res.code !== 0 && res.message) {
      toast(res.message)
    }
    console.log('lucy== 结束res', JSON.stringify(res))
    return res.code
  }).catch((err: BusinessError) => {
    console.error(`lucy++ 结束充电接口调用失败，${err.code}+${err.message}`)
  })
}
export class StyleConst {
  // 宽高
  static readonly FULL_WIDTH: string = '100%';
  static readonly FULL_HEIGHT: string = '100%';
  static readonly PERCENT_10 = '10%'
  static readonly PERCENT_15 = '15%'
  static readonly PERCENT_17 = '17%'
  static readonly PERCENT_20 = '20%'
  static readonly PERCENT_25 = '25%'
  static readonly PERCENT_30 = '30%'
  static readonly PERCENT_35 = '35%'
  static readonly PERCENT_40 = '40%'
  static readonly PERCENT_45 = '45%'
  static readonly PERCENT_50 = '50%'
  static readonly PERCENT_60 = '60%'
  static readonly PERCENT_65 = '65%'
  static readonly PERCENT_70 = '70%'
  static readonly PERCENT_72 = '72%'
  static readonly PERCENT_75 = '75%'
  static readonly PERCENT_80 = '80%'
  static readonly PERCENT_85 = '85%'
  static readonly PERCENT_90 = '90%'
  static readonly PERCENT_95 = '95%'
  static readonly PERCENT_100 = '100%'
}
export class ResponseResult {
  code?: number
  message?: string
  data?: object
}
import { StyleConst } from "../../../../Index"
@Component
export struct BottomLoadingBuilder {
  @Prop haveNextPage: boolean
  @Prop loading: boolean
  @Prop dataLength: number
  build() {
    if (this.haveNextPage && this.loading) {
      Row() {
        LoadingProgress()
          .width($r('app.float.size_30'))
          .height($r('app.float.size_30'))
          .margin({ right: $r('app.float.size_10') })
        Text($r('app.string.loading'))
          .fontSize($r('app.float.size_text_14'))
          .fontColor($r('app.color.color_666'))
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_60'))
      .justifyContent(FlexAlign.Center)
    } else if (!this.haveNextPage && this.dataLength > 0) {
      Text($r('app.string.there_is_no_more_data'))
        .fontSize($r('app.float.size_text_14'))
        .fontColor($r('app.color.color_999'))
        .textAlign(TextAlign.Center)
        .width(StyleConst.FULL_WIDTH)
        .margin({ top: $r('app.float.size_10'), bottom: $r('app.float.size_20') })
    }
  }
}
export { requestApiCall } from './httpUtils'
export * from './Apis'
export class Apis {
  //注册
  static readonly USER_REGISTER = "/saas-api/tenant/register"
  //获取token-登录
  static readonly USER_LOGIN = "/saas-api/user/login"
  //获取租户ID
  static readonly USER_TENANT = "/saas-api/tenant/selects"
  //获取用户信息
  static readonly USER_INFO = "/wx-api/me/info"
  //获取充电站
  static readonly CHARGE_STATION_LIST = "/wx-api/station/list"
  //获取充电桩
  static readonly CHARGE_PILE_LIST = "/wx-api/pile/list"
  //获取充电价格
  static readonly CHARGE_PRICE = "/wx-api/price/list"
  //开始充电
  static readonly CHARGE_START = "/wx-api/charge/start"
  //结束充电
  static readonly CHARGE_STOP = "/wx-api/charge/stop"
  //获取充电订单列表
  static readonly CHARGE_ORDER_LIST = "/wx-api/charge/list"
}
import http from '@ohos.net.http';
import { commonStorage } from '../../../../Index';
import { StorageConst } from '../manager';
import { ResponseResult } from './response';
export function requestApiCall(url: string,
  method: http.RequestMethod,
  data?: Record<string, number | boolean | string | Object | undefined>,
  headers?: Record<string, string>,
): Promise<ResponseResult> {
  const BASE_URL = 'https://charging.lusson.xyz'
  const httpRequest = http.createHttp();
  const defaultHeaders: Record<string, string> = {
    'Content-Type': 'application/json',
  }
  const token = commonStorage.getStringValueSync(StorageConst.TOKEN, "")
  if (token) {
    defaultHeaders['Authorization'] = `Bearer ${token}`
  }
  const finalHeaders: Record<string, string> = {};
  Object.keys(defaultHeaders).forEach(key => {
    finalHeaders[key] = defaultHeaders[key];
  });
  if (headers) {
    Object.keys(headers).forEach(key => {
      finalHeaders[key] = String(headers[key]);
    });
  }
  let responseResult = httpRequest.request(BASE_URL + url, {
    method: method,
    extraData: data ? JSON.stringify(data) : undefined,
    header: finalHeaders
  });
  let response: ResponseResult = new ResponseResult();
  return responseResult.then((value: http.HttpResponse) => {
    if (value.responseCode === 200) {
      let res: ResponseResult = JSON.parse(`${value.result}`);
      response.data = res.data;
      response.code = res.code;
      response.message = res.message;
    } else {
      response.message = '请求错误';
      response.code = 400;
    }
    return response;
  }).catch((error: Error) => {
    console.log('lucy++ error', JSON.stringify(error))
    response.message = '请求错误';
    response.code = 400;
    return response;
  })
}
{
  "module": {
    "name": "common",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
export * from './StyleConst'
export * from './TbsTitleBar'
export * from './BottomLoadingBuilder'
import { ScreenUtils, StyleConst } from "../../../../Index"
import { router } from "@kit.ArkUI"
@Component
export struct TbsTitleBar {
  @Prop title: ResourceStr = ''
  @Prop showBackIcon: boolean = false
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight())
      RelativeContainer() {
        Text(this.title)
          .fontColor(Color.White)
          .fontSize($r('app.float.size_text_20'))
          .textAlign(TextAlign.Center)
          .maxLines(1)
          .id('text')
          .alignRules({
            center: { anchor: "__container__", align: VerticalAlign.Center },
            middle: { anchor: "__container__", align: HorizontalAlign.Center }
          })
        if (this.showBackIcon) {
          Image($r('app.media.back'))
            .width($r('app.float.size_45'))
            .id('image')
            .alignRules({
              left: { anchor: "__container__", align: HorizontalAlign.Start }
            })
            .onClick(() => {
              router.back()
            })
        }
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_45'))
    }
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
// 与EntryAbility交互，获取ability当前的数据
export class GlobalContext {
  static readonly CONTEXT = 'context';
  static readonly WANT = 'want';
  //状态栏高度
  static readonly STATUS_BAR_HEIGHT = 'statusBarHeight';
  //导航栏高度
  static readonly NAVIGATION_HEIGHT = 'navigationHeight';
  private constructor() { }
  private static instance: GlobalContext;
  private _objects = new Map<string, Object>();
  public static getContext(): GlobalContext {
    if (!GlobalContext.instance) {
      GlobalContext.instance = new GlobalContext();
    }
    return GlobalContext.instance;
  }
  getObject(value: string): Object | undefined {
    return this._objects.get(value);
  }
  setObject(key: string, objectClass: Object): void {
    this._objects.set(key, objectClass);
  }
}
import { StyleConst, TbsTitleBar, BottomPop, toast } from "@tbs/common"
import { router } from "@kit.ArkUI"
import { PileType, PriceType } from "../model/ChargeModel"
import { ChargePriceDialogView } from "../view/ChargePriceDialogView"
import { getChargePrice, getStartCharge } from "../viewModel/ChargeViewModel"
import './ChargeOrderPage'
//充电中
@Entry({ routeName: 'ChargingPage' })
@Component
export struct ChargingPage {
  @State pileItem: PileType = {}
  @State priceList: PriceType[] = []
  onPageShow(): void {
    const PileTypeParams = router.getParams() as Record<string, Object>
    if (PileTypeParams) {
      this.pileItem = PileTypeParams.item as PileType
    }
  }
  chargePriceController: CustomDialogController | null = new CustomDialogController({
    builder: BottomPop({
      title: '收费标准',
      bgColor: $r('app.color.color_f0f2f4'),
      titleBgColor: $r('app.color.color_f0f2f4'),
      contentBgColor: $r('app.color.color_f0f2f4'),
      keyboardAvoidMode: KeyboardAvoidMode.NONE,
      childBuilderParam: () => {
        this.chargePriceDialog()
      }
    }),
    customStyle: true,
    alignment: DialogAlignment.Bottom,
    maskColor: $r('app.color.color_80000000'),
  })
  @Builder
  chargePriceDialog() {
    ChargePriceDialogView({ priceList: this.priceList })
  }
  //获取不同时间段充电价格
  async getChargePriceData() {
    let data = await getChargePrice()
    if (data) {
      this.priceList = data
    }
  }
  //开始充电
  async getStartChargeData() {
    if (this.pileItem.id){
      let data = await getStartCharge(this.pileItem.id)
      if(data == 0){
        toast('充电成功')
        router.pushNamedRoute({
          name:'ChargeOrderPage'
        })
      }
    }
  }
  build() {
    Column({ space: 10 }) {
      //1.标题
      TbsTitleBar({ title: '充电ing', showBackIcon: true })
      //2.主体
      Column({ space: 10 }) {
        //2.1 充电站
        Row() {
          Text('充电站')
          Text(this.pileItem?.stationName)
        }
        .height($r('app.float.size_50'))
        .justifyContent(FlexAlign.SpaceBetween)
        .chargingSty()
        //2.2 设备编号
        Row() {
          Text('设备编号')
          Text(this.pileItem.code)
        }
        .height($r('app.float.size_50'))
        .justifyContent(FlexAlign.SpaceBetween)
        .chargingSty()
        //2.3 收费标准
        Column({ space: 20 }) {
          Row() {
            Text('收费标准')
            Text('收费规则 >>')
              .onClick(() => {
                this.chargePriceController?.open()
                this.getChargePriceData()
              })
          }
          .width(StyleConst.FULL_WIDTH)
          .justifyContent(FlexAlign.SpaceBetween)
          Row() {
            Text('充电时长')
            Text('充满即止 >>')
          }
          .width(StyleConst.FULL_WIDTH)
          .justifyContent(FlexAlign.SpaceBetween)
          Text('PS：此功能不涉及支付，只做演示使用')
            .fontColor(Color.Red)
        }
        .chargingSty()
        .alignItems(HorizontalAlign.Start)
        Button('充电')
          .onClick(() => {
            this.getStartChargeData()
          })
          .fontColor(Color.White)
          .backgroundColor($r('app.color.color_0aa671'))
          .width(StyleConst.PERCENT_95)
      }
    }
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_efefef'))
  }
  //公共样式
  @Styles
  chargingSty(){
    .width(StyleConst.PERCENT_95)
    .padding($r('app.float.size_10'))
    .borderRadius($r('app.float.size_10'))
    .backgroundColor($r('app.color.color_fff'))
  }
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
import display from '@ohos.display';
import { GlobalContext } from '.';
import window from '@ohos.window';
import common from '@ohos.app.ability.common';
import { StorageConst } from '../manager';
export class ScreenUtils {
  private static instance: ScreenUtils;
  setWindow(windowInfo: window.Window) {
    // 获取窗口属性
    const properties = windowInfo.getWindowProperties();
    this.setScreen(properties.windowRect.width, properties.windowRect.height)
    windowInfo.on("windowSizeChange", (size: Size) => {
      this.setScreen(size.width, size.height)
    })
  }
  private constructor() {
    this.defaultDisplay = display.getDefaultDisplaySync()
    this.defaultDisplay.getCutoutInfo((e, data) => {
      this.cutoutInfo = data
    })
    let callback: Callback<display.FoldDisplayMode> = (data: display.FoldDisplayMode) => {
      this.setFoldDisplayMode(data)
    };
    display.on("foldDisplayModeChange", callback)
  }
  private setScreen(width: number, height: number) {
    AppStorage.setOrCreate(StorageConst.SCREEN_WIDTH_VP, px2vp(width));
    AppStorage.setOrCreate(StorageConst.SCREEN_HEIGHT_VP, px2vp(height));
  }
  private setFoldDisplayMode(data: display.FoldDisplayMode) {
    AppStorage.setOrCreate(StorageConst.FOLD_DISPLAY_MODE, data);
  }
  public static getInstance(): ScreenUtils {
    if (!ScreenUtils.instance) {
      ScreenUtils.instance = new ScreenUtils();
    }
    return ScreenUtils.instance;
  }
  //屏幕数据
  private defaultDisplay: display.Display | null = null
  //挖孔屏状态栏区域
  private cutoutInfo: display.CutoutInfo | null = null
  getDisplay(): display.Display | null {
    return this.defaultDisplay
  }
  getScreenWidthPx(): number {
    return this.defaultDisplay?.width ?? -1
  }
  getScreenHeightPx(): number {
    return this.defaultDisplay?.height ?? -1
  }
  getScreenContentHeightPX(): number {
    return vp2px(this.getScreenHeightVp() - this.getStatusBarHeight())
  }
  getScreenContentHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenWidthVp(): number {
    return px2vp(this.getScreenWidthPx())
  }
  /**
   * 获取刘海屏状态栏最大的区域
   * @returns
   */
  getStatusBarHeight(): number {
    const statusBar = GlobalContext.getContext().getObject(GlobalContext.STATUS_BAR_HEIGHT) as number;
    return px2vp(statusBar)
  }
  // 底部安全距离
  getSafeBottomHeight() {
    const navigation = GlobalContext.getContext().getObject(GlobalContext.NAVIGATION_HEIGHT) as number;
    return px2vp(navigation)
  }
  /**
   * 获取底部导航栏的高度
   * @returns
   */
  async getBottomNavBarHeight(context: common.BaseContext): Promise<number> {
    const win = await window.getLastWindow(context)
    return px2vp(win.getWindowAvoidArea(window.AvoidAreaType.TYPE_NAVIGATION_INDICATOR).bottomRect.height)
  }
  async getStatusBarColor(): Promise<string> {
    const currentWindow = await window.getLastWindow(getContext(this))
    return currentWindow.getWindowSystemBarProperties().statusBarColor ?? '#000000'
  }
  // 改变状态栏文字颜色
  updateStatusBarColor(isBlack: boolean) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      currentWindow.setWindowSystemBarProperties({ statusBarContentColor: isBlack ? '#000000' : '#ffffff' })
    })
  }
  // 检查设备是否可折叠
  isFoldable() {
    return display.isFoldable()
  }
  // 设备当前折叠状态是否为为完全展开
  isFoldExpanded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_EXPANDED
  }
  // 设备当前折叠状态是否为为半折叠
  isFoldHalfFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_HALF_FOLDED
  }
  // 设备当前折叠状态为是否为折叠
  isFoldFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_FOLDED
  }
}
import { ScreenUtils, StyleConst, toast } from "@tbs/common";
import { ChargeType } from "../model/ChargeModel";
import { ChargeListView } from "../view/ChargeListView";
import { ChargeSearchBarView } from "../view/ChargeSearchBarView";
import { getStations } from "../viewModel/ChargeViewModel";
@Component
export struct ChargePage {
  @State @Watch('onChangeName')name: string = ''
  @State chargeList: ChargeType[] = []
  inputController: TextInputController = new TextInputController()
  aboutToAppear(): void {
    this.getStationData()
  }
  //获取充电站数据
  async getStationData() {
    let data = await getStations(this.name)
    if (data && data.List) {
      this.chargeList = data.List
    }
  }
  onChangeName(){
    if(this.name == ''){
      this.getStationData()
    }
  }
  //顶部搜索
  @Builder
  chargeSearchBar() {
    ChargeSearchBarView({
      name: this.name,
      maxLength: 30,
      inputController: this.inputController,
      searchButtonCallback: (value) => {
        if (!value) {
          toast('请输入搜索内容')
        } else {
          this.name = value.replace(/\s+/g, '')
          this.getStationData()
        }
      }
    })
  }
  //搜索结果
  @Builder
  chargeSearchList() {
    ChargeListView({ chargeList: this.chargeList })
      .margin({ top: 50 + ScreenUtils.getInstance().getStatusBarHeight() })
  }
  build() {
    Stack() {
      this.chargeSearchBar() //顶部搜索
      this.chargeSearchList() //搜索结果
    }
    .alignContent(Alignment.Top)
    .width(StyleConst.FULL_WIDTH)
    .height(StyleConst.FULL_HEIGHT)
    .backgroundColor($r('app.color.color_f0f2f4'))
  }
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
export class StorageConst {
  static readonly TOKEN = 'token'
  static readonly USER_INFO = 'userInfo'
  // 屏幕宽高
  static readonly SCREEN_WIDTH_VP = 'screenWidthVp'
  static readonly SCREEN_HEIGHT_VP = 'screenHeightVp'
  // 折叠屏显示模式
  static readonly FOLD_DISPLAY_MODE = 'foldDisplayMode'
  static readonly SEARCH_HISTORY = "search_history"
}
import { BusinessError } from "@kit.BasicServicesKit"
import { bundleManager } from "@kit.AbilityKit"
export enum ThirdApp {
  Alipay = 'alipays://',
  Amapuri = "amapuri://", // 高德地图的 scheme
  Baidumap = "baidumap://map/direction", // 百度地图的 scheme
  Maps = "maps://", // 华为地图的 scheme
  Https = "https://" // App link scheme
}
class ThirdAppManager{
  /** 第三方应用是否安装 */
  isAppInstall(thirdApp: ThirdApp): boolean {
    try {
      return bundleManager.canOpenLink(thirdApp)
    } catch (e) {
      let code = (e as BusinessError)?.code
      let msg = (e as BusinessError)?.message ?? ''
      if (code !== undefined) {
        if (code === 17700056) {
          msg += ` Please include "${thirdApp.replace('://',
            '')}" inside the "querySchemes" element of module.json5 in your app module.`
        }
        console.log(`isAppInstall get error${msg}`)
      } else {
        console.log(`isAppInstall get error${e}`)
      }
      return false
    }
  }
}
export const thirdAppManager = new ThirdAppManager()
import { componentUtils, inspector } from "@kit.ArkUI"
export class ComponentUtils {
  /**
   * 同步方式获取组件渲染后的实际高度
   * @param componentId 组件ID
   * @param callback 注册的回调函数
   */
  static getComponentHeightSync(componentId: string, callback: (width: number) => void): void {
    // 监听组件
    const listener = inspector.createComponentObserver(componentId)
    // 注册回调
    listener.on('layout', () => {
      const componentInfo = componentUtils.getRectangleById(componentId)
      const height = px2vp(componentInfo.size.height)
      callback?.(height)
      // 取消注册回调
      listener.off('layout')
    })
  }
}
import { StorageConst } from "./StorageConst"
import { UserInfoData } from "../model/UserInfoModel"
import { commonStorage } from "../utils"
class UserCenterConst {
  userInfo: UserInfoData | null = null
  getUserInfoData(): UserInfoData | null {
    if (this.userInfo) {
      return this.userInfo;
    }
    const value = commonStorage.getStringValueSync(StorageConst.USER_INFO, '');
    // 如果已经是对象，直接使用
    if (value && typeof value === 'object') {
      this.userInfo = value as UserInfoData;
      return this.userInfo;
    }
    // 如果是字符串，尝试解析
    if (typeof value === 'string' && value) {
      const p = JsonParse<UserInfoData>(value);
      if (p) {
        this.userInfo = p;
        return this.userInfo;
      }
    }
    return null;
  }
}
function JsonParse<T>(text: string): T | undefined {
  try {
    return JSON.parse(text);
  } catch (e) {
    console.error(`JSON解析错误: ${text}, 错误信息: ${e}`);
    return undefined;
  }
}
export default new UserCenterConst()
export class RoutePageConst {
  static readonly AppHomePage = "home/HomePage" //App-充电页面
  static readonly LoginPage = "login/LoginPage" //App-登录页面
}
import { abilityAccessCtrl, PermissionRequestResult, Permissions } from "@kit.AbilityKit";
import { BusinessError } from "@kit.BasicServicesKit";
import { appBundleManager } from "./AppBundleManager";
class PermissionManager{
  atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
  // 每次访问受目标权限保护的接口之前，都需要使用requestPermissionsFromUser()接口请求相应的权限。
  // 权限组：当应用请求权限时，同一个权限组的权限将会在一个弹窗内一起请求用户授权。用户点击同意，即同意了整个权限组。
  // 如定位权限组：['ohos.permission.APPROXIMATELY_LOCATION', 'ohos.permission.LOCATION']
  async checkPermissions(permissions: Array<Permissions>): Promise<boolean> {
    console.log(`check permission ${permissions}`);
    try {
      let grantStatusArray: abilityAccessCtrl.GrantStatus[] = [];
      for (let i = 0; i < permissions.length; i++) {
        grantStatusArray[i] = await this.checkPermissionInner(permissions[i]);
      }
      console.log(`checkPermissions: ${permissions}, grantStatus ${grantStatusArray} `);
      // todo 暂定全同意才算同意
      const denied = grantStatusArray.indexOf(abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) > -1;
      return !denied;
    } catch (e) {
      return Promise.reject(e);
    }
  }
  private async checkPermissionInner(permission: Permissions): Promise<abilityAccessCtrl.GrantStatus> {
    let grantStatus: abilityAccessCtrl.GrantStatus = abilityAccessCtrl.GrantStatus.PERMISSION_DENIED;
    // 校验应用是否被授予权限
    try {
      grantStatus = await this.atManager.checkAccessToken(appBundleManager.getTokenId(), permission);
    } catch (error) {
      const err: BusinessError = error as BusinessError;
      console.log(`Failed to check access token. Code is ${err.code}, message is ${err.message}`);
      return Promise.reject(`checkPermissionInner: checkAccessToken error: ${JSON.stringify(error)}`,);
    }
    return grantStatus;
  }
  async reqPermissionsFromUser(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
    // requestPermissionsFromUser会判断权限的授权状态来决定是否唤起弹窗
    try {
      let result: PermissionRequestResult = await atManager.requestPermissionsFromUser(context, permissions);
      let grantStatus: Array<number> = result.authResults;
      for (let i = 0; i < grantStatus.length; i++) {
        if (grantStatus[i] === 0) {
          // 用户授权，可以继续访问目标操作
          console.log(`reqPermissionsFromUser: ${permissions[i]} is granted`);
        } else {
          console.log(`reqPermissionsFromUser: ${permissions[i]} is denied`);
          return false;
        }
      }
      return true;
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
  //被拒绝后，再次点击全权限申请使用该方法
  async requestPermissionAgain(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    try {
      const result = await this.atManager.requestPermissionOnSetting(context, permissions)
      return result.every((status) => {
        return status === abilityAccessCtrl.GrantStatus.PERMISSION_GRANTED
      })
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
}
let permissionManager = new PermissionManager();
export { permissionManager };
export * from './StorageConst'
export * from './RoutePageConst'
export * from './UserCenterConst'
import { bundleManager } from "@kit.AbilityKit";
class AppBundleManager{
  private bundleInfo?: bundleManager.BundleInfo
  getBundleInfo(): bundleManager.BundleInfo {
    if (this.bundleInfo == null || this.bundleInfo == undefined) {
      return bundleManager.getBundleInfoForSelfSync(bundleManager.BundleFlag.GET_BUNDLE_INFO_WITH_APPLICATION)
    }
    return this.bundleInfo
  }
  getTokenId(): number {
    let bundleInfo = this.getBundleInfo();
    return bundleInfo.appInfo.accessTokenId;
  }
}
export const appBundleManager = new AppBundleManager()
import { window } from "@kit.ArkUI";
import { BusinessError } from "@kit.BasicServicesKit";
export class WindowModel {
  private constructor() {
  }
  /**
   * 默认样式
   */
  private readonly DEFAULT: window.SystemBarProperties = {
    statusBarColor: '#00000000',
    navigationBarColor: '#00000000',
    // 以下两个属性从API Version 8开始支持
    statusBarContentColor: '#000000',
    navigationBarContentColor: '#00000000'
  };
  /**
   * WindowModel 单例
   */
  private static instance?: WindowModel;
  /**
   * 获取WindowModel单例实例
   * @returns {WindowModel} WindowModel
   */
  static getInstance(): WindowModel {
    if (!WindowModel.instance) {
      WindowModel.instance = new WindowModel();
    }
    return WindowModel.instance;
  }
  /**
   * 缓存的当前WindowStage实例
   */
  private windowStage?: window.WindowStage;
  /**
   * 缓存windowStage
   * @param windowStage 当前WindowStage实例
   * @returns {void}
   */
  setWindowStage(windowStage: window.WindowStage): void {
    this.windowStage = windowStage;
  }
  getWindowStage(): window.WindowStage | undefined {
    return this.windowStage
  }
  /**
   * 当前主窗口是否开启沉浸模式
   * @param enable 是否开启
   * @returns {void}
   */
  setMainWindowImmersive(enable: boolean, properties?: window.SystemBarProperties): void {
    if (this.windowStage === undefined) {
      console.error('windowStage is undefined.');
      return;
    }
    // 1.获取应用主窗口。
    let windowClass: window.Window | null = null;
    this.windowStage.getMainWindow((err: BusinessError, data) => {
      let errCode: number = err.code;
      if (errCode) {
        console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));
        return;
      }
      windowClass = data;
      console.info('Succeeded in obtaining the main window data.');
      // 2.实现沉浸式效果。方式二：设置窗口为全屏布局，配合设置导航栏、状态栏的透明度、背景/文字颜色及高亮图标等属性，与主窗口显示保持协调一致。
      windowClass.setWindowLayoutFullScreen(enable, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the window layout to full-screen mode.');
      });
      const p = properties ? properties : this.DEFAULT
      windowClass.setWindowSystemBarProperties(p, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the system bar properties.');
      });
    })
  }
  /**
   * 软键盘是否显示/隐藏
   * @param callback
   */
  getKeyBoardVisible(callback: (visible: boolean) => void) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      // 监听软键盘的隐藏和显示
      currentWindow.on('avoidAreaChange', data => {
        if (data.type == window.AvoidAreaType.TYPE_KEYBOARD) {
          const keyBoardHeight = px2vp(data.area.bottomRect.height);
          if (keyBoardHeight > 0) {
            callback(true)
          } else {
            callback(false)
          }
        }
      })
    })
  }
}
import { Permissions } from '@kit.AbilityKit';
export class PermissionConst {
  static readonly locationPermissions: Array<Permissions> = [
    'ohos.permission.APPROXIMATELY_LOCATION',
    'ohos.permission.LOCATION',
  ];
  static readonly mediaRWPermissions: Array<Permissions> = [
    'ohos.permission.READ_MEDIA',
    'ohos.permission.WRITE_MEDIA'
  ];
  static readonly imageVideoReadPermission: Permissions = 'ohos.permission.READ_IMAGEVIDEO';
  static readonly imageVideoWritePermission: Permissions = 'ohos.permission.WRITE_IMAGEVIDEO';
  static readonly cameraPermission: Permissions = 'ohos.permission.CAMERA';
  // 获取OAID
  static readonly oaIdPermission: Permissions = 'ohos.permission.APP_TRACKING_CONSENT';
}
import dataPreferences from '@ohos.data.preferences';
import preferences from '@ohos.data.preferences';
import { HashMap } from '@kit.ArkTS';
import { common } from '@kit.AbilityKit';
import { GlobalContext } from './GlobalContext';
import { BusinessError } from '@kit.BasicServicesKit';
class Storage{
  private name: string = 'app_storage'
  private preferences: dataPreferences.Preferences | null = null
  private listenerKeyMap = new HashMap<string, HashMap<string, Callback<string>>>()
  constructor(name: string) {
    this.name = name;
  }
  initStorage() {
    const context = GlobalContext.getContext().getObject('context') as common.UIAbilityContext
    const options: dataPreferences.Options = { name: this.name }
    this.preferences = dataPreferences.getPreferencesSync(context, options)
    this.preferences?.on('change', (key: string) => {
      const pageMap = this.listenerKeyMap.get(key)
      pageMap?.forEach((callBack: Callback<string>) => {
        callBack(key)
      })
    })
  }
  /**
   * 存储key,value到preference缓存里面
   * @param key
   * @param value
   */
  saveValueSync(key: string, value: preferences.ValueType) {
    this.preferences?.putSync(key, value)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 根据key删除值
   * @param key
   */
  deleteValueSync(key: string) {
    this.preferences?.deleteSync(key)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns string
   */
  getStringValueSync(key: string, defaultValue: string) {
    return this.preferences?.getSync(key, defaultValue) as string
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns Array<string>
   */
  getArrayStringValueSync(key: string, defaultValue: Array<string>) {
    return this.preferences?.getSync(key, defaultValue) as Array<string>
  }
}
export const commonStorage = new Storage('common_storage')
export function initDataPreference() {
  commonStorage.initStorage()
}
export * from './LocationManager';
export * from './ThirdAppManager'
import { geoLocationManager } from "@kit.LocationKit";
import { PermissionConst } from "./PermissionConst";
import { permissionManager } from "./PermissionManager";
class LocationManager {
  async requestPermissionAgain() {
    return await permissionManager.requestPermissionAgain(PermissionConst.locationPermissions, getContext(this))
  }
  // 检查是否有定位权限，外部可直接调用，异常时返回false
  async checkLocationPermissions(): Promise<boolean> {
    try {
      return await permissionManager.checkPermissions(PermissionConst.locationPermissions) &&
      geoLocationManager.isLocationEnabled();
    } catch (e) {
      console.log(`lucy== hasLocationPermissions, ${JSON.stringify(e)}`)
      return false;
    }
  }
  // 校验并申请权限，如果申请权限返回false，则抛出异常，使用者需要使用catch接收。
  async checkAndApplyPermissions(context: Context): Promise<boolean> {
    let isGranted = await this.checkLocationPermissions();
    if (isGranted) {
      return true;
    }
    try {
      let userGranted = await permissionManager.reqPermissionsFromUser(PermissionConst.locationPermissions, context);
      if (userGranted) {
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }
}
export const locationManager = new LocationManager()
export * from './WindowModel'
export * from './GlobalContext'
export * from './TextUtil'
export { ScreenUtils } from './ScreenUtil';
export { initDataPreference, commonStorage } from './StorageUtils'
export * from './ComponentUtils'
export { formatDate } from './formatDate'
//封装一个函数：简化时间格式
export const formatDate = (dateStr:string)=>{
  const date = new Date(dateStr)
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}
import measure from '@ohos.measure'
export class TextUtil{
  static getTextWidth(textContent: string,
    fontSize: number | string | Resource = $r('app.float.size_text_14'), maxLines: number = 1,
    weight: FontWeight | number = FontWeight.Regular): number {
    if (!textContent || textContent.length === 0) {
      return 0
    }
    const width: number = measure.measureText({
      textContent: textContent,
      fontSize: fontSize,
      fontWeight: weight,
      maxLines: maxLines
    })
    return px2vp(width)
  }
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
{
  "module": {
    "name": "common_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
export * from './src/main/ets/common'
export * from './src/main/ets/http'
export * from './src/main/ets/widgets'
export * from './src/main/ets/manager'
export * from './src/main/ets/utils'
export { CommonDataSource } from './src/main/ets/model/CommonDataSource'
export * from './src/main/ets/location'
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
{
  "name": "@tbs/common",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {}
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
export { ChargePage } from './src/main/ets/page/ChargePage';
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
{
  "name": "@tbs/charge",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {
    "@tbs/common": "file:../../common"
  }
}
{
  "meta": {
    "stableOrder": true
  },
  "lockfileVersion": 3,
  "ATTENTION": "THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.",
  "specifiers": {
    "@tbs/common@../../common": "@tbs/common@../../common"
  },
  "packages": {
    "@tbs/common@../../common": {
      "name": "@tbs/common",
      "version": "1.0.0",
      "resolved": "../../common",
      "registryType": "local"
    }
  }
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
{
  "module": {
    "name": "scan_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
import { bundleManager } from "@kit.AbilityKit";
class AppBundleManager{
  private bundleInfo?: bundleManager.BundleInfo
  getBundleInfo(): bundleManager.BundleInfo {
    if (this.bundleInfo == null || this.bundleInfo == undefined) {
      return bundleManager.getBundleInfoForSelfSync(bundleManager.BundleFlag.GET_BUNDLE_INFO_WITH_APPLICATION)
    }
    return this.bundleInfo
  }
  getTokenId(): number {
    let bundleInfo = this.getBundleInfo();
    return bundleInfo.appInfo.accessTokenId;
  }
}
export const appBundleManager = new AppBundleManager()
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
export { ScanPage } from './src/main/ets/page/ScanPage'
{
  "name": "@tbs/scan",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {}
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "common",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/common",
		"installationFree": false
	}
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
{
	"app":	{
		"bundleName":	"com.example.tbschargeharmonyos",
		"vendor":	"example",
		"versionCode":	1000000,
		"versionName":	"1.0.0",
		"icon":	"$media:layered_image",
		"label":	"$string:app_name",
		"apiReleaseType":	"Release",
		"compileSdkVersion":	"5.0.4.150",
		"targetAPIVersion":	50004016,
		"minAPIVersion":	50004016,
		"compileSdkType":	"HarmonyOS",
		"appEnvironments":	[],
		"bundleType":	"app",
		"buildMode":	"debug",
		"debug":	true,
		"iconId":	33554435,
		"labelId":	33554432
	},
	"module":	{
		"name":	"entry",
		"type":	"entry",
		"description":	"$string:module_desc",
		"mainElement":	"EntryAbility",
		"deviceTypes":	["phone", "tablet", "2in1"],
		"deliveryWithInstall":	true,
		"installationFree":	false,
		"pages":	"$profile:main_pages",
		"querySchemes":	["amapuri", "baidumap", "maps"],
		"requestPermissions":	[{
				"name":	"ohos.permission.INTERNET"
			}, {
				"name":	"ohos.permission.APPROXIMATELY_LOCATION",
				"reason":	"$string:permission_approximately_location",
				"usedScene":	{
					"abilities":	["EntryAbility"],
					"when":	"always"
				},
				"reasonId":	50331677
			}, {
				"name":	"ohos.permission.LOCATION",
				"reason":	"$string:location_permission_reason",
				"usedScene":	{
					"abilities":	["EntryAbility"],
					"when":	"always"
				},
				"reasonId":	50331666
			}],
		"abilities":	[{
				"name":	"EntryAbility",
				"srcEntry":	"./ets/entryability/EntryAbility.ets",
				"description":	"$string:EntryAbility_desc",
				"icon":	"$media:layered_image",
				"label":	"$string:EntryAbility_label",
				"startWindowIcon":	"$media:startIcon",
				"startWindowBackground":	"$color:start_window_background",
				"exported":	true,
				"skills":	[{
						"entities":	["entity.system.home"],
						"actions":	["action.system.home"]
					}],
				"descriptionId":	33554436,
				"iconId":	33554435,
				"labelId":	33554437,
				"startWindowIconId":	33554441,
				"startWindowBackgroundId":	33554439
			}],
		"extensionAbilities":	[{
				"name":	"EntryBackupAbility",
				"srcEntry":	"./ets/entrybackupability/EntryBackupAbility.ets",
				"type":	"backup",
				"exported":	false,
				"metadata":	[{
						"name":	"ohos.extension.backup",
						"resource":	"$profile:backup_config",
						"resourceId":	33554442
					}]
			}],
		"packageName":	"entry",
		"virtualMachine":	"ark12.0.6.0",
		"compileMode":	"esmodule",
		"dependencies":	[],
		"descriptionId":	33554438
	}
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "module description"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "charge"
    },
    {
      "name": "scan",
      "value": "scan"
    },
    {
      "name": "mine",
      "value": "mine"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "Welcome to log in to the Groundhog charging platform"
    },
    {
      "name": "please_select_the_tenant",
      "value": "Please select the tenant"
    },
    {
      "name": "please_enter_the_username",
      "value": "Please enter the username"
    },
    {
      "name": "please_enter_the_password",
      "value": "Please enter your password"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "Please enter the verification code"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "Please enter the company name"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "Please enter the company website"
    },
    {
      "name": "login",
      "value": "Login"
    },
    {
      "name": "no_account",
      "value": "No account?"
    },
    {
      "name": "register",
      "value": "Register"
    },
    {
      "name": "login_in",
      "value": "login in"
    },
    {
      "name": "existing_account",
      "value": "existing account?"
    },
    {
      "name": "register_immediately",
      "value": "register immediately"
    },
    {
      "name": "company_website",
      "value": "The company 's website, such as www.example.com"
    },
    {
      "name": "company_name",
      "value": "company name"
    },
    {
      "name": "password_length",
      "value": "Password: At least 5 characters in length"
    },
    {
      "name": "get_code",
      "value": "get code"
    },
    {
      "name": "verification_code",
      "value": "Verification code :666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "Welcome to register on the Groundhog charging platform"
    },
    {
      "name": "search_content",
      "value": "Please enter the search content"
    },
    {
      "name": "search",
      "value": "search"
    },
    {
      "name": "no_data",
      "value": "no data"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "Selection of charging pile"
    },
    {
      "name": "fast_charge",
      "value": "fast charge"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "national standard"
    },
    {
      "name": "idle",
      "value": "Idle"
    },
    {
      "name": "faults",
      "value": "Faults"
    },
    {
      "name": "charging_in_progress",
      "value": "Charging in progress"
    },
    {
      "name": "pile_number",
      "value": "Pile_number:"
    },
    {
      "name": "station_name",
      "value": "Station name:"
    },
    {
      "name": "agreement",
      "value": "agreement"
    },
    {
      "name": "certification",
      "value": "certification"
    },
    {
      "name": "feat",
      "value": "feat"
    },
    {
      "name": "message",
      "value": "message"
    },
    {
      "name": "person",
      "value": "person"
    },
    {
      "name": "rule",
      "value": "rule"
    },
    {
      "name": "order",
      "value": "order"
    },
    {
      "name": "service",
      "value": "service"
    },
    {
      "name": "there_is_no_more_data",
      "value": "There is no more data"
    },
    {
      "name": "loading",
      "value": "loading..."
    },
    {
      "name": "completed",
      "value": "Completed"
    },
    {
      "name": "pile_code",
      "value": "Pile code:"
    },
    {
      "name": "charge_name",
      "value": "Charge name:"
    },
    {
      "name": "price",
      "value": "Price:"
    },
    {
      "name": "order_status",
      "value": "Order status:"
    },
    {
      "name": "start_time",
      "value": "Start time:"
    },
    {
      "name": "end_time",
      "value": "End time:"
    },
    {
      "name": "stop_charge",
      "value": "Stop charging"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
import { abilityDelegatorRegistry, TestRunner } from '@kit.TestKit';
import { BusinessError } from '@kit.BasicServicesKit';
import { hilog } from '@kit.PerformanceAnalysisKit';
import { resourceManager } from '@kit.LocalizationKit';
import { util } from '@kit.ArkTS';
import { Hypium } from '@ohos/hypium';
import testsuite from '../test/List.test';
let abilityDelegator: abilityDelegatorRegistry.AbilityDelegator;
let abilityDelegatorArguments: abilityDelegatorRegistry.AbilityDelegatorArgs;
let jsonPath: string = 'mock/mock-config.json';
let domain: number = 0x0000; 
let tag: string = 'testTag'; 
export default class OpenHarmonyTestRunner implements TestRunner {
  constructor() {
  }
  onPrepare() {
    hilog.info(domain, tag, '%{public}s', 'OpenHarmonyTestRunner OnPrepare');
  }
  async onRun() {
    hilog.info(domain, tag, '%{public}s', 'OpenHarmonyTestRunner onRun run');
    abilityDelegatorArguments = abilityDelegatorRegistry.getArguments();
    abilityDelegator = abilityDelegatorRegistry.getAbilityDelegator();
    let moduleName = abilityDelegatorArguments.parameters['-m'];
    let context = abilityDelegator.getAppContext().getApplicationContext().createModuleContext(moduleName);
    let mResourceManager = context.resourceManager;
    await checkMock(abilityDelegator, mResourceManager);
    hilog.info(domain, tag, '%{public}s', 'start run testcase!!!');
    Hypium.hypiumTest(abilityDelegator, abilityDelegatorArguments, testsuite);
    hilog.info(domain, tag, '%{public}s', 'OpenHarmonyTestRunner onRun end');
  }
}
async function checkMock(abilityDelegator: abilityDelegatorRegistry.AbilityDelegator, resourceManager: resourceManager.ResourceManager) {
  let rawFile: Uint8Array;
  try {
    rawFile = resourceManager.getRawFileContentSync(jsonPath);
    hilog.info(domain, tag, 'MockList file exists');
    let mockStr: string = util.TextDecoder.create("utf-8", { ignoreBOM: true }).decodeWithStream(rawFile);
    let mockMap: Record<string, string> = getMockList(mockStr);
    try {
      abilityDelegator.setMockList(mockMap);
    } catch (error) {
      let code = (error as BusinessError).code;
      let message = (error as BusinessError).message;
      hilog.error(domain, tag, `abilityDelegator.setMockList failed, error code: ${code}, message: ${message}.`);
    }
  } catch (error) {
    let code = (error as BusinessError).code;
    let message = (error as BusinessError).message;
    hilog.error(domain, tag, `ResourceManager:callback getRawFileContent failed, error code: ${code}, message: ${message}.`);
  }
}
function getMockList(jsonStr: string) {
  let jsonObj: Record<string, Object> = JSON.parse(jsonStr);
  let map: Map<string, object> = new Map<string, object>(Object.entries(jsonObj));
  let mockList: Record<string, string> = {};
  map.forEach((value: object, key: string) => {
    let realValue: string = value['source'].toString();
    mockList[key] = realValue;
  });
  hilog.info(domain, tag, '%{public}s', 'mock-json value:' + JSON.stringify(mockList) ?? '');
  return mockList;
}
{
  "float": [
    {
      "name": "size_1",
      "value": "1vp"
    },
    {
      "name": "size_2",
      "value": "2vp"
    },
    {
      "name": "size_3",
      "value": "3vp"
    },
    {
      "name": "size_4",
      "value": "4vp"
    },
    {
      "name": "size_5",
      "value": "5vp"
    },
    {
      "name": "size_6",
      "value": "6vp"
    },
    {
      "name": "size_7",
      "value": "7vp"
    },
    {
      "name": "size_8",
      "value": "8vp"
    },
    {
      "name": "size_9",
      "value": "9vp"
    },
    {
      "name": "size_10",
      "value": "10vp"
    },
    {
      "name": "size_11",
      "value": "11vp"
    },
    {
      "name": "size_12",
      "value": "12vp"
    },
    {
      "name": "size_13",
      "value": "13vp"
    },
    {
      "name": "size_14",
      "value": "14vp"
    },
    {
      "name": "size_15",
      "value": "15vp"
    },
    {
      "name": "size_16",
      "value": "16vp"
    },
    {
      "name": "size_17",
      "value": "17vp"
    },
    {
      "name": "size_18",
      "value": "18vp"
    },
    {
      "name": "size_19",
      "value": "19vp"
    },
    {
      "name": "size_20",
      "value": "20vp"
    },
    {
      "name": "size_21",
      "value": "21vp"
    },
    {
      "name": "size_22",
      "value": "22vp"
    },
    {
      "name": "size_23",
      "value": "23vp"
    },
    {
      "name": "size_24",
      "value": "24vp"
    },
    {
      "name": "size_25",
      "value": "25vp"
    },
    {
      "name": "size_26",
      "value": "26vp"
    },
    {
      "name": "size_27",
      "value": "27vp"
    },
    {
      "name": "size_28",
      "value": "28vp"
    },
    {
      "name": "size_29",
      "value": "29vp"
    },
    {
      "name": "size_30",
      "value": "30vp"
    },
    {
      "name": "size_31",
      "value": "31vp"
    },
    {
      "name": "size_32",
      "value": "32vp"
    },
    {
      "name": "size_33",
      "value": "33vp"
    },
    {
      "name": "size_34",
      "value": "34vp"
    },
    {
      "name": "size_35",
      "value": "35vp"
    },
    {
      "name": "size_36",
      "value": "36vp"
    },
    {
      "name": "size_37",
      "value": "37vp"
    },
    {
      "name": "size_38",
      "value": "38vp"
    },
    {
      "name": "size_39",
      "value": "39vp"
    },
    {
      "name": "size_40",
      "value": "40vp"
    },
    {
      "name": "size_41",
      "value": "41vp"
    },
    {
      "name": "size_42",
      "value": "42vp"
    },
    {
      "name": "size_43",
      "value": "43vp"
    },
    {
      "name": "size_44",
      "value": "44vp"
    },
    {
      "name": "size_45",
      "value": "45vp"
    },
    {
      "name": "size_46",
      "value": "46vp"
    },
    {
      "name": "size_47",
      "value": "47vp"
    },
    {
      "name": "size_48",
      "value": "48vp"
    },
    {
      "name": "size_49",
      "value": "49vp"
    },
    {
      "name": "size_50",
      "value": "50vp"
    },
    {
      "name": "size_51",
      "value": "51vp"
    },
    {
      "name": "size_52",
      "value": "52vp"
    },
    {
      "name": "size_53",
      "value": "53vp"
    },
    {
      "name": "size_54",
      "value": "54vp"
    },
    {
      "name": "size_55",
      "value": "55vp"
    },
    {
      "name": "size_56",
      "value": "56vp"
    },
    {
      "name": "size_57",
      "value": "57vp"
    },
    {
      "name": "size_58",
      "value": "58vp"
    },
    {
      "name": "size_59",
      "value": "59vp"
    },
    {
      "name": "size_60",
      "value": "60vp"
    },
    {
      "name": "size_61",
      "value": "61vp"
    },
    {
      "name": "size_62",
      "value": "62vp"
    },
    {
      "name": "size_63",
      "value": "63vp"
    },
    {
      "name": "size_64",
      "value": "64vp"
    },
    {
      "name": "size_65",
      "value": "65vp"
    },
    {
      "name": "size_66",
      "value": "66vp"
    },
    {
      "name": "size_67",
      "value": "67vp"
    },
    {
      "name": "size_68",
      "value": "68vp"
    },
    {
      "name": "size_69",
      "value": "69vp"
    },
    {
      "name": "size_70",
      "value": "70vp"
    },
    {
      "name": "size_71",
      "value": "71vp"
    },
    {
      "name": "size_72",
      "value": "72vp"
    },
    {
      "name": "size_73",
      "value": "73vp"
    },
    {
      "name": "size_74",
      "value": "74vp"
    },
    {
      "name": "size_75",
      "value": "75vp"
    },
    {
      "name": "size_76",
      "value": "76vp"
    },
    {
      "name": "size_77",
      "value": "77vp"
    },
    {
      "name": "size_78",
      "value": "78vp"
    },
    {
      "name": "size_79",
      "value": "79vp"
    },
    {
      "name": "size_80",
      "value": "80vp"
    },
    {
      "name": "size_81",
      "value": "81vp"
    },
    {
      "name": "size_82",
      "value": "82vp"
    },
    {
      "name": "size_83",
      "value": "83vp"
    },
    {
      "name": "size_84",
      "value": "84vp"
    },
    {
      "name": "size_85",
      "value": "85vp"
    },
    {
      "name": "size_86",
      "value": "86vp"
    },
    {
      "name": "size_87",
      "value": "87vp"
    },
    {
      "name": "size_88",
      "value": "88vp"
    },
    {
      "name": "size_89",
      "value": "89vp"
    },
    {
      "name": "size_90",
      "value": "90vp"
    },
    {
      "name": "size_91",
      "value": "91vp"
    },
    {
      "name": "size_92",
      "value": "92vp"
    },
    {
      "name": "size_93",
      "value": "93vp"
    },
    {
      "name": "size_94",
      "value": "94vp"
    },
    {
      "name": "size_95",
      "value": "95vp"
    },
    {
      "name": "size_96",
      "value": "96vp"
    },
    {
      "name": "size_97",
      "value": "97vp"
    },
    {
      "name": "size_98",
      "value": "98vp"
    },
    {
      "name": "size_99",
      "value": "99vp"
    },
    {
      "name": "size_100",
      "value": "100vp"
    },
    {
      "name": "size_101",
      "value": "101vp"
    },
    {
      "name": "size_102",
      "value": "102vp"
    },
    {
      "name": "size_103",
      "value": "103vp"
    },
    {
      "name": "size_104",
      "value": "104vp"
    },
    {
      "name": "size_105",
      "value": "105vp"
    },
    {
      "name": "size_106",
      "value": "106vp"
    },
    {
      "name": "size_107",
      "value": "107vp"
    },
    {
      "name": "size_108",
      "value": "108vp"
    },
    {
      "name": "size_109",
      "value": "109vp"
    },
    {
      "name": "size_110",
      "value": "110vp"
    },
    {
      "name": "size_111",
      "value": "111vp"
    },
    {
      "name": "size_112",
      "value": "112vp"
    },
    {
      "name": "size_113",
      "value": "113vp"
    },
    {
      "name": "size_114",
      "value": "114vp"
    },
    {
      "name": "size_115",
      "value": "115vp"
    },
    {
      "name": "size_116",
      "value": "116vp"
    },
    {
      "name": "size_117",
      "value": "117vp"
    },
    {
      "name": "size_118",
      "value": "118vp"
    },
    {
      "name": "size_119",
      "value": "119vp"
    },
    {
      "name": "size_120",
      "value": "120vp"
    },
    {
      "name": "size_121",
      "value": "121vp"
    },
    {
      "name": "size_122",
      "value": "122vp"
    },
    {
      "name": "size_123",
      "value": "123vp"
    },
    {
      "name": "size_124",
      "value": "124vp"
    },
    {
      "name": "size_125",
      "value": "125vp"
    },
    {
      "name": "size_126",
      "value": "126vp"
    },
    {
      "name": "size_127",
      "value": "127vp"
    },
    {
      "name": "size_128",
      "value": "128vp"
    },
    {
      "name": "size_129",
      "value": "129vp"
    },
    {
      "name": "size_130",
      "value": "130vp"
    },
    {
      "name": "size_131",
      "value": "131vp"
    },
    {
      "name": "size_132",
      "value": "132vp"
    },
    {
      "name": "size_133",
      "value": "133vp"
    },
    {
      "name": "size_134",
      "value": "134vp"
    },
    {
      "name": "size_135",
      "value": "135vp"
    },
    {
      "name": "size_136",
      "value": "136vp"
    },
    {
      "name": "size_137",
      "value": "137vp"
    },
    {
      "name": "size_138",
      "value": "138vp"
    },
    {
      "name": "size_139",
      "value": "139vp"
    },
    {
      "name": "size_140",
      "value": "140vp"
    },
    {
      "name": "size_141",
      "value": "141vp"
    },
    {
      "name": "size_142",
      "value": "142vp"
    },
    {
      "name": "size_143",
      "value": "143vp"
    },
    {
      "name": "size_144",
      "value": "144vp"
    },
    {
      "name": "size_145",
      "value": "145vp"
    },
    {
      "name": "size_146",
      "value": "146vp"
    },
    {
      "name": "size_147",
      "value": "147vp"
    },
    {
      "name": "size_148",
      "value": "148vp"
    },
    {
      "name": "size_149",
      "value": "149vp"
    },
    {
      "name": "size_150",
      "value": "150vp"
    },
    {
      "name": "size_151",
      "value": "151vp"
    },
    {
      "name": "size_152",
      "value": "152vp"
    },
    {
      "name": "size_153",
      "value": "153vp"
    },
    {
      "name": "size_154",
      "value": "154vp"
    },
    {
      "name": "size_155",
      "value": "155vp"
    },
    {
      "name": "size_156",
      "value": "156vp"
    },
    {
      "name": "size_157",
      "value": "157vp"
    },
    {
      "name": "size_158",
      "value": "158vp"
    },
    {
      "name": "size_159",
      "value": "159vp"
    },
    {
      "name": "size_160",
      "value": "160vp"
    },
    {
      "name": "size_161",
      "value": "161vp"
    },
    {
      "name": "size_162",
      "value": "162vp"
    },
    {
      "name": "size_163",
      "value": "163vp"
    },
    {
      "name": "size_164",
      "value": "164vp"
    },
    {
      "name": "size_165",
      "value": "165vp"
    },
    {
      "name": "size_166",
      "value": "166vp"
    },
    {
      "name": "size_167",
      "value": "167vp"
    },
    {
      "name": "size_168",
      "value": "168vp"
    },
    {
      "name": "size_169",
      "value": "169vp"
    },
    {
      "name": "size_170",
      "value": "170vp"
    },
    {
      "name": "size_171",
      "value": "171vp"
    },
    {
      "name": "size_172",
      "value": "172vp"
    },
    {
      "name": "size_173",
      "value": "173vp"
    },
    {
      "name": "size_174",
      "value": "174vp"
    },
    {
      "name": "size_175",
      "value": "175vp"
    },
    {
      "name": "size_176",
      "value": "176vp"
    },
    {
      "name": "size_177",
      "value": "177vp"
    },
    {
      "name": "size_178",
      "value": "178vp"
    },
    {
      "name": "size_179",
      "value": "179vp"
    },
    {
      "name": "size_180",
      "value": "180vp"
    },
    {
      "name": "size_181",
      "value": "181vp"
    },
    {
      "name": "size_182",
      "value": "182vp"
    },
    {
      "name": "size_183",
      "value": "183vp"
    },
    {
      "name": "size_184",
      "value": "184vp"
    },
    {
      "name": "size_185",
      "value": "185vp"
    },
    {
      "name": "size_186",
      "value": "186vp"
    },
    {
      "name": "size_187",
      "value": "187vp"
    },
    {
      "name": "size_188",
      "value": "188vp"
    },
    {
      "name": "size_189",
      "value": "189vp"
    },
    {
      "name": "size_190",
      "value": "190vp"
    },
    {
      "name": "size_191",
      "value": "191vp"
    },
    {
      "name": "size_192",
      "value": "192vp"
    },
    {
      "name": "size_193",
      "value": "193vp"
    },
    {
      "name": "size_194",
      "value": "194vp"
    },
    {
      "name": "size_195",
      "value": "195vp"
    },
    {
      "name": "size_196",
      "value": "196vp"
    },
    {
      "name": "size_197",
      "value": "197vp"
    },
    {
      "name": "size_198",
      "value": "198vp"
    },
    {
      "name": "size_199",
      "value": "199vp"
    },
    {
      "name": "size_200",
      "value": "200vp"
    },
    {
      "name": "size_201",
      "value": "201vp"
    },
    {
      "name": "size_202",
      "value": "202vp"
    },
    {
      "name": "size_203",
      "value": "203vp"
    },
    {
      "name": "size_204",
      "value": "204vp"
    },
    {
      "name": "size_205",
      "value": "205vp"
    },
    {
      "name": "size_206",
      "value": "206vp"
    },
    {
      "name": "size_207",
      "value": "207vp"
    },
    {
      "name": "size_208",
      "value": "208vp"
    },
    {
      "name": "size_209",
      "value": "209vp"
    },
    {
      "name": "size_210",
      "value": "210vp"
    },
    {
      "name": "size_211",
      "value": "211vp"
    },
    {
      "name": "size_212",
      "value": "212vp"
    },
    {
      "name": "size_213",
      "value": "213vp"
    },
    {
      "name": "size_214",
      "value": "214vp"
    },
    {
      "name": "size_215",
      "value": "215vp"
    },
    {
      "name": "size_216",
      "value": "216vp"
    },
    {
      "name": "size_217",
      "value": "217vp"
    },
    {
      "name": "size_218",
      "value": "218vp"
    },
    {
      "name": "size_219",
      "value": "219vp"
    },
    {
      "name": "size_220",
      "value": "220vp"
    },
    {
      "name": "size_221",
      "value": "221vp"
    },
    {
      "name": "size_222",
      "value": "222vp"
    },
    {
      "name": "size_223",
      "value": "223vp"
    },
    {
      "name": "size_224",
      "value": "224vp"
    },
    {
      "name": "size_225",
      "value": "225vp"
    },
    {
      "name": "size_226",
      "value": "226vp"
    },
    {
      "name": "size_227",
      "value": "227vp"
    },
    {
      "name": "size_228",
      "value": "228vp"
    },
    {
      "name": "size_229",
      "value": "229vp"
    },
    {
      "name": "size_230",
      "value": "230vp"
    },
    {
      "name": "size_231",
      "value": "231vp"
    },
    {
      "name": "size_232",
      "value": "232vp"
    },
    {
      "name": "size_233",
      "value": "233vp"
    },
    {
      "name": "size_234",
      "value": "234vp"
    },
    {
      "name": "size_235",
      "value": "235vp"
    },
    {
      "name": "size_236",
      "value": "236vp"
    },
    {
      "name": "size_237",
      "value": "237vp"
    },
    {
      "name": "size_238",
      "value": "238vp"
    },
    {
      "name": "size_239",
      "value": "239vp"
    },
    {
      "name": "size_240",
      "value": "240vp"
    },
    {
      "name": "size_241",
      "value": "241vp"
    },
    {
      "name": "size_242",
      "value": "242vp"
    },
    {
      "name": "size_243",
      "value": "243vp"
    },
    {
      "name": "size_244",
      "value": "244vp"
    },
    {
      "name": "size_245",
      "value": "245vp"
    },
    {
      "name": "size_246",
      "value": "246vp"
    },
    {
      "name": "size_247",
      "value": "247vp"
    },
    {
      "name": "size_248",
      "value": "248vp"
    },
    {
      "name": "size_249",
      "value": "249vp"
    },
    {
      "name": "size_250",
      "value": "250vp"
    },
    {
      "name": "size_251",
      "value": "251vp"
    },
    {
      "name": "size_252",
      "value": "252vp"
    },
    {
      "name": "size_253",
      "value": "253vp"
    },
    {
      "name": "size_254",
      "value": "254vp"
    },
    {
      "name": "size_255",
      "value": "255vp"
    },
    {
      "name": "size_256",
      "value": "256vp"
    },
    {
      "name": "size_257",
      "value": "257vp"
    },
    {
      "name": "size_258",
      "value": "258vp"
    },
    {
      "name": "size_259",
      "value": "259vp"
    },
    {
      "name": "size_260",
      "value": "260vp"
    },
    {
      "name": "size_261",
      "value": "261vp"
    },
    {
      "name": "size_262",
      "value": "262vp"
    },
    {
      "name": "size_263",
      "value": "263vp"
    },
    {
      "name": "size_264",
      "value": "264vp"
    },
    {
      "name": "size_265",
      "value": "265vp"
    },
    {
      "name": "size_266",
      "value": "266vp"
    },
    {
      "name": "size_267",
      "value": "267vp"
    },
    {
      "name": "size_268",
      "value": "268vp"
    },
    {
      "name": "size_269",
      "value": "269vp"
    },
    {
      "name": "size_270",
      "value": "270vp"
    },
    {
      "name": "size_271",
      "value": "271vp"
    },
    {
      "name": "size_272",
      "value": "272vp"
    },
    {
      "name": "size_273",
      "value": "273vp"
    },
    {
      "name": "size_274",
      "value": "274vp"
    },
    {
      "name": "size_275",
      "value": "275vp"
    },
    {
      "name": "size_276",
      "value": "276vp"
    },
    {
      "name": "size_277",
      "value": "277vp"
    },
    {
      "name": "size_278",
      "value": "278vp"
    },
    {
      "name": "size_279",
      "value": "279vp"
    },
    {
      "name": "size_280",
      "value": "280vp"
    },
    {
      "name": "size_281",
      "value": "281vp"
    },
    {
      "name": "size_282",
      "value": "282vp"
    },
    {
      "name": "size_283",
      "value": "283vp"
    },
    {
      "name": "size_284",
      "value": "284vp"
    },
    {
      "name": "size_285",
      "value": "285vp"
    },
    {
      "name": "size_286",
      "value": "286vp"
    },
    {
      "name": "size_287",
      "value": "287vp"
    },
    {
      "name": "size_288",
      "value": "288vp"
    },
    {
      "name": "size_289",
      "value": "289vp"
    },
    {
      "name": "size_290",
      "value": "290vp"
    },
    {
      "name": "size_291",
      "value": "291vp"
    },
    {
      "name": "size_292",
      "value": "292vp"
    },
    {
      "name": "size_293",
      "value": "293vp"
    },
    {
      "name": "size_294",
      "value": "294vp"
    },
    {
      "name": "size_295",
      "value": "295vp"
    },
    {
      "name": "size_296",
      "value": "296vp"
    },
    {
      "name": "size_297",
      "value": "297vp"
    },
    {
      "name": "size_298",
      "value": "298vp"
    },
    {
      "name": "size_299",
      "value": "299vp"
    },
    {
      "name": "size_300",
      "value": "300vp"
    },
    {
      "name": "size_text_1",
      "value": "1fp"
    },
    {
      "name": "size_text_2",
      "value": "2fp"
    },
    {
      "name": "size_text_3",
      "value": "3fp"
    },
    {
      "name": "size_text_4",
      "value": "4fp"
    },
    {
      "name": "size_text_5",
      "value": "5fp"
    },
    {
      "name": "size_text_6",
      "value": "6fp"
    },
    {
      "name": "size_text_7",
      "value": "7fp"
    },
    {
      "name": "size_text_8",
      "value": "8fp"
    },
    {
      "name": "size_text_9",
      "value": "9fp"
    },
    {
      "name": "size_text_10",
      "value": "10fp"
    },
    {
      "name": "size_text_11",
      "value": "11fp"
    },
    {
      "name": "size_text_12",
      "value": "12fp"
    },
    {
      "name": "size_text_13",
      "value": "13fp"
    },
    {
      "name": "size_text_14",
      "value": "14fp"
    },
    {
      "name": "size_text_15",
      "value": "15fp"
    },
    {
      "name": "size_text_16",
      "value": "16fp"
    },
    {
      "name": "size_text_17",
      "value": "17fp"
    },
    {
      "name": "size_text_18",
      "value": "18fp"
    },
    {
      "name": "size_text_19",
      "value": "19fp"
    },
    {
      "name": "size_text_20",
      "value": "20fp"
    },
    {
      "name": "size_text_21",
      "value": "21fp"
    },
    {
      "name": "size_text_22",
      "value": "22fp"
    },
    {
      "name": "size_text_23",
      "value": "23fp"
    },
    {
      "name": "size_text_24",
      "value": "24fp"
    },
    {
      "name": "size_text_25",
      "value": "25fp"
    },
    {
      "name": "size_text_26",
      "value": "26fp"
    },
    {
      "name": "size_text_27",
      "value": "27fp"
    },
    {
      "name": "size_text_28",
      "value": "28fp"
    },
    {
      "name": "size_text_29",
      "value": "29fp"
    },
    {
      "name": "size_text_30",
      "value": "30fp"
    },
    {
      "name": "size_text_31",
      "value": "31fp"
    },
    {
      "name": "size_text_32",
      "value": "32fp"
    },
    {
      "name": "size_text_33",
      "value": "33fp"
    },
    {
      "name": "size_text_34",
      "value": "34fp"
    },
    {
      "name": "size_text_35",
      "value": "35fp"
    },
    {
      "name": "size_text_36",
      "value": "36fp"
    },
    {
      "name": "size_text_37",
      "value": "37fp"
    },
    {
      "name": "size_text_38",
      "value": "38fp"
    },
    {
      "name": "size_text_39",
      "value": "39fp"
    },
    {
      "name": "size_text_40",
      "value": "40fp"
    },
    {
      "name": "size_text_41",
      "value": "41fp"
    },
    {
      "name": "size_text_42",
      "value": "42fp"
    },
    {
      "name": "size_text_43",
      "value": "43fp"
    },
    {
      "name": "size_text_44",
      "value": "44fp"
    },
    {
      "name": "size_text_45",
      "value": "45fp"
    },
    {
      "name": "size_text_46",
      "value": "46fp"
    },
    {
      "name": "size_text_47",
      "value": "47fp"
    },
    {
      "name": "size_text_48",
      "value": "48fp"
    },
    {
      "name": "size_text_49",
      "value": "49fp"
    },
    {
      "name": "size_text_50",
      "value": "50fp"
    },
    {
      "name": "size_text_51",
      "value": "51fp"
    },
    {
      "name": "size_text_52",
      "value": "52fp"
    },
    {
      "name": "size_text_53",
      "value": "53fp"
    },
    {
      "name": "size_text_54",
      "value": "54fp"
    },
    {
      "name": "size_text_55",
      "value": "55fp"
    },
    {
      "name": "size_text_56",
      "value": "56fp"
    },
    {
      "name": "size_text_57",
      "value": "57fp"
    },
    {
      "name": "size_text_58",
      "value": "58fp"
    },
    {
      "name": "size_text_59",
      "value": "59fp"
    },
    {
      "name": "size_text_60",
      "value": "60fp"
    },
    {
      "name": "size_text_61",
      "value": "61fp"
    },
    {
      "name": "size_text_62",
      "value": "62fp"
    },
    {
      "name": "size_text_63",
      "value": "63fp"
    },
    {
      "name": "size_text_64",
      "value": "64fp"
    },
    {
      "name": "size_text_65",
      "value": "65fp"
    },
    {
      "name": "size_text_66",
      "value": "66fp"
    },
    {
      "name": "size_text_67",
      "value": "67fp"
    },
    {
      "name": "size_text_68",
      "value": "68fp"
    },
    {
      "name": "size_text_69",
      "value": "69fp"
    },
    {
      "name": "size_text_70",
      "value": "70fp"
    },
    {
      "name": "size_text_71",
      "value": "71fp"
    },
    {
      "name": "size_text_72",
      "value": "72fp"
    },
    {
      "name": "size_text_73",
      "value": "73fp"
    },
    {
      "name": "size_text_74",
      "value": "74fp"
    },
    {
      "name": "size_text_75",
      "value": "75fp"
    },
    {
      "name": "size_text_76",
      "value": "76fp"
    },
    {
      "name": "size_text_77",
      "value": "77fp"
    },
    {
      "name": "size_text_78",
      "value": "78fp"
    },
    {
      "name": "size_text_79",
      "value": "79fp"
    },
    {
      "name": "size_text_80",
      "value": "80fp"
    },
    {
      "name": "size_text_81",
      "value": "81fp"
    },
    {
      "name": "size_text_82",
      "value": "82fp"
    },
    {
      "name": "size_text_83",
      "value": "83fp"
    },
    {
      "name": "size_text_84",
      "value": "84fp"
    },
    {
      "name": "size_text_85",
      "value": "85fp"
    },
    {
      "name": "size_text_86",
      "value": "86fp"
    },
    {
      "name": "size_text_87",
      "value": "87fp"
    },
    {
      "name": "size_text_88",
      "value": "88fp"
    },
    {
      "name": "size_text_89",
      "value": "89fp"
    },
    {
      "name": "size_text_90",
      "value": "90fp"
    },
    {
      "name": "size_text_91",
      "value": "91fp"
    },
    {
      "name": "size_text_92",
      "value": "92fp"
    },
    {
      "name": "size_text_93",
      "value": "93fp"
    },
    {
      "name": "size_text_94",
      "value": "94fp"
    },
    {
      "name": "size_text_95",
      "value": "95fp"
    },
    {
      "name": "size_text_96",
      "value": "96fp"
    },
    {
      "name": "size_text_97",
      "value": "97fp"
    },
    {
      "name": "size_text_98",
      "value": "98fp"
    },
    {
      "name": "size_text_99",
      "value": "99fp"
    },
    {
      "name": "size_text_100",
      "value": "100fp"
    }
  ]
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    },
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
{
  "color": [
    {
      "name": "color_0aa671",
      "value": "#0aa671"
    },
    {
      "name": "start_window_background",
      "value": "#FFFFFF"
    },
    {
      "name": "color_0165b8",
      "value": "#0165b8"
    },
    {
      "name": "color_182431",
      "value": "#182431"
    },
    {
      "name": "color_efefef",
      "value": "#EFEFEF"
    },
    {
      "name": "color_f5f5f5",
      "value": "#F5F5F5"
    },
    {
      "name": "color_adadb3",
      "value": "#adadb3"
    },
    {
      "name": "color_fff",
      "value": "#fff"
    },
    {
      "name": "color_898e92",
      "value": "#898e92"
    },
    {
      "name": "color_0165B8",
      "value": "#0165B8"
    },
    {
      "name": "color_f0f2f4",
      "value": "#f0f2f4"
    },
    {
      "name": "color_80000000",
      "value": "#80000000"
    },
    {
      "name": "color_009688",
      "value": "#009688"
    },
    {
      "name": "color_d68751",
      "value": "#d68751"
    },
    {
      "name": "color_F44336",
      "value": "#F44336"
    },
    {
      "name": "color_666",
      "value": "#666"
    },
    {
      "name": "color_999",
      "value": "#999"
    }
  ]
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "common",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/common",
		"installationFree": false
	}
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"vendor": "example",
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"icon": "$media:layered_image",
		"label": "$string:app_name",
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"targetAPIVersion": 50004016,
		"minAPIVersion": 50004016,
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug",
		"debug": true
	},
	"module": {
		"name": "entry",
		"type": "entry",
		"description": "$string:module_desc",
		"mainElement": "EntryAbility",
		"deviceTypes": [
			"phone",
			"tablet",
			"2in1"
		],
		"deliveryWithInstall": true,
		"installationFree": false,
		"pages": "$profile:main_pages",
		"querySchemes": [
			"amapuri",
			"baidumap",
			"maps"
		],
		"requestPermissions": [
			{
				"name": "ohos.permission.INTERNET"
			},
			{
				"name": "ohos.permission.APPROXIMATELY_LOCATION",
				"reason": "$string:permission_approximately_location",
				"usedScene": {
					"abilities": [
						"EntryAbility"
					],
					"when": "always"
				}
			},
			{
				"name": "ohos.permission.LOCATION",
				"reason": "$string:location_permission_reason",
				"usedScene": {
					"abilities": [
						"EntryAbility"
					],
					"when": "always"
				}
			}
		],
		"abilities": [
			{
				"name": "EntryAbility",
				"srcEntry": "./ets/entryability/EntryAbility.ets",
				"description": "$string:EntryAbility_desc",
				"icon": "$media:layered_image",
				"label": "$string:EntryAbility_label",
				"startWindowIcon": "$media:startIcon",
				"startWindowBackground": "$color:start_window_background",
				"exported": true,
				"skills": [
					{
						"entities": [
							"entity.system.home"
						],
						"actions": [
							"action.system.home"
						]
					}
				]
			}
		],
		"extensionAbilities": [
			{
				"name": "EntryBackupAbility",
				"srcEntry": "./ets/entrybackupability/EntryBackupAbility.ets",
				"type": "backup",
				"exported": false,
				"metadata": [
					{
						"name": "ohos.extension.backup",
						"resource": "$profile:backup_config"
					}
				]
			}
		],
		"packageName": "entry",
		"virtualMachine": "ark12.0.6.0",
		"compileMode": "esmodule",
		"dependencies": []
	}
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
[{"hapName":"entry-default-signed.hap","deviceTypes":["phone","tablet","2in1"],"isSigned":true,"dependRemoteHsps":[]}]
{"routerMap":[]}
{"routerMap":[]}
{"@tbs/common":{"packageName":"@tbs/common","bundleName":"","moduleName":"","version":"1.0.0","entryPath":"Index.ets","isSO":false,"dependencyAlias":""},"@tbs/charge":{"packageName":"@tbs/charge","bundleName":"","moduleName":"","version":"1.0.0","entryPath":"Index.ets","isSO":false,"dependencyAlias":""},"@tbs/mine":{"packageName":"@tbs/mine","bundleName":"","moduleName":"","version":"1.0.0","entryPath":"Index.ets","isSO":false,"dependencyAlias":""},"@tbs/scan":{"packageName":"@tbs/scan","bundleName":"","moduleName":"","version":"1.0.0","entryPath":"Index.ets","isSO":false,"dependencyAlias":""},"@ohos/hypium":{"packageName":"@ohos/hypium","bundleName":"","moduleName":"","version":"1.0.21","entryPath":"index.js","isSO":false,"dependencyAlias":""},"@ohos/hamock":{"packageName":"@ohos/hamock","bundleName":"","moduleName":"","version":"1.0.0","entryPath":"index.ets","isSO":false,"dependencyAlias":""},"entry":{"packageName":"entry","bundleName":"","moduleName":"","version":"","entryPath":"src/main/","isSO":false,"dependencyAlias":""}}
{
  "modulePathMap": {
    "entry": "/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry",
    "common": "/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/common",
    "charge": "/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/feature/charge",
    "mine": "/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/feature/mine",
    "scan": "/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/feature/scan"
  },
  "compileMode": "esmodule",
  "projectRootPath": "/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs",
  "nodeModulesPath": "/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/loader_out/default/node_modules",
  "byteCodeHarInfo": {},
  "declarationEntry": [],
  "moduleName": "entry",
  "hspNameOhmMap": {},
  "harNameOhmMap": {},
  "packageManagerType": "ohpm",
  "compileEntry": [],
  "otherCompileFiles": [],
  "dynamicImportLibInfo": {},
  "routerMap": [],
  "hspResourcesMap": {},
  "updateVersionInfo": {},
  "anBuildOutPut": "/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/loader_out/default/an/arm64-v8a",
  "anBuildMode": "type",
  "patchConfig": {
    "changedFileList": "/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/patch/default/changedFileList.json"
  }
}
{"libs":{},"stripped":{}}
import SysTestKit from './module/kit/SysTestKit';
import { TAG } from './Constant';
import LogExpectError from './module/report/LogExpectError';
import { NestFilter } from './module/config/Filter';
function assertTrueFun(actualValue) {
    let result = {
        pass: (actualValue) === true,
        message: 'expect true, actualValue is ' + actualValue
    };
    return result;
}
function assertEqualFun(actualValue, args) {
    let msg = 'expect ' + actualValue + ' equals ' + args[0];
    if (actualValue === args[0]) { 
        const aClassName = Object.prototype.toString.call(actualValue);
        const bClassName = Object.prototype.toString.call(args[0]);
        msg = 'expect ' + actualValue + aClassName + ' equals ' + args[0] + bClassName + 'strict mode inspect type';
    }
    let result = {
        pass: (actualValue) === args[0],
        expectValue: args[0],
        message: msg
    };
    return result;
}
function assertThrowFun(actual, args) {
    const result = {
        pass: false
    };
    if (typeof actual !== 'function') {
        result.message = 'toThrow\'s Actual should be a Function';
    } else {
        let hasThrow = false;
        let throwError;
        try {
            actual();
        } catch (e) {
            hasThrow = true;
            throwError = e;
        }
        if (!hasThrow) {
            result.message = 'function did not throw an exception';
        } else if (throwError && throwError.message === args[0]) {
            result.pass = true;
        } else {
            result.message = `expect to throw ${args[0]} , actual throw ${throwError.message}`;
        }
    }
    return result;
}
class AssertException extends Error {
    constructor(message) {
        super();
        this.name = 'AssertException';
        this.message = message;
    }
}
function getFuncWithArgsZero(func, timeout, isStressTest) {
    return new Promise(async (resolve, reject) => {
        let timer = null;
        if (!isStressTest) {
            timer = setTimeout(() => {
                reject(new Error('execute timeout ' + timeout + 'ms'));
            }, timeout);
        }
        try {
            await func();
        } catch (err) {
            reject(err);
        }
        timer !== null ? clearTimeout(timer) : null;
        resolve();
    });
}
function getFuncWithArgsOne(func, timeout, isStressTest) {
    return new Promise(async (resolve, reject) => {
        let timer = null;
        if (!isStressTest) {
            timer = setTimeout(() => {
                reject(new Error('execute timeout ' + timeout + 'ms'));
            }, timeout);
        }
        function done() {
            timer !== null ? clearTimeout(timer) : null;
            resolve();
        }
        try {
            await func(done);
        } catch (err) {
            timer !== null ? clearTimeout(timer) : null;
            reject(err);
        }
    });
}
function getFuncWithArgsTwo(func, timeout, paramItem, isStressTest) {
    return new Promise(async (resolve, reject) => {
        let timer = null;
        if (!isStressTest) {
            timer = setTimeout(() => {
                reject(new Error('execute timeout ' + timeout + 'ms'));
            }, timeout);
        }
        function done() {
            timer !== null ? clearTimeout(timer) : null;
            resolve();
        }
        try {
            await func(done, paramItem);
        } catch (err) {
            timer !== null ? clearTimeout(timer) : null;
            reject(err);
        }
    });
}
function processFunc(coreContext, func) {
    let argNames = ((func || '').toString()
        .replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg, '')
        .match(/^(function)?\s*[^\(]*\(\s*([^\)]*)\)/m) || ['', '', ''])[2]
        .split(',') 
        .map(item => item.replace(/^\s*(_?)(.+?)\1\s*$/, name => name.split('=')[0].trim()))
        .filter(String);
    let funcLen = func.length;
    let processedFunc;
    const config = coreContext.getDefaultService('config');
    config.setSupportAsync(true);
    const timeout = + (config.timeout === undefined ? 5000 : config.timeout);
    const isStressTest = (coreContext.getServices('dataDriver') !== undefined || config.getStress() > 1);
    switch (funcLen) {
        case 0: {
            processedFunc = function () {
                return getFuncWithArgsZero(func, timeout, isStressTest);
            };
            break;
        }
        case 1: {
            processedFunc = function () {
                return getFuncWithArgsOne(func, timeout, isStressTest);
            };
            break;
        }
        default: {
            processedFunc = function (paramItem) {
                return getFuncWithArgsTwo(func, timeout, paramItem, isStressTest);
            };
            break;
        }
    }
    return processedFunc;
}
function secureRandomNumber() {
    return crypto.randomBytes(8).readUInt32LE() / 0xffffffff;
}
class SuiteService {
    constructor(attr) {
        this.id = attr.id;
        this.rootSuite = new SuiteService.Suite({});
        this.currentRunningSuite = this.rootSuite;
        this.suitesStack = [this.rootSuite];
        this.targetSuiteArray = [];
        this.targetSpecArray = [];
        this.currentRunningSuiteDesc = null;
        this.fullRun = false;
        this.isSkipSuite = false;
        this.suiteSkipReason = null;
    }
    describe(desc, func) {
        const configService = this.coreContext.getDefaultService('config');
        if (this.suitesStack.some(suite => { return suite.description === desc })) {
            console.error(`${TAG} Loop nesting occurs : ${desc}`);
            this.suiteSkipReason = '';
            this.isSkipSuite = false;
            return;
        }
        let isFilter = this.analyzeConfigServiceClass(configService.class, desc);
        if (configService.filterSuite(desc) && isFilter) {
            if (this.currentRunningSuite.description === '' || this.currentRunningSuite.description == null) {
                console.info(`${TAG}filter suite : ${desc}`);
                this.suiteSkipReason = '';
                this.isSkipSuite = false;
                return;
            }
        }
        const suite = new SuiteService.Suite({ description: desc });
        if (this.isSkipSuite) {
            suite.isSkip = true;
            suite.skipReason = this.suiteSkipReason;
        }
        this.suiteSkipReason = '';
        this.isSkipSuite = false;
        if (typeof this.coreContext.getServices('dataDriver') !== 'undefined' && configService['dryRun'] !== 'true') {
            let suiteStress = this.coreContext.getServices('dataDriver').dataDriver.getSuiteStress(desc);
            for (let i = 1; i < suiteStress; i++) {
                this.currentRunningSuite.childSuites.push(suite);
            }
        }
        this.currentRunningSuite.childSuites.push(suite);
        this.currentRunningSuite = suite;
        this.suitesStack.push(suite);
        const res = func.call();
        if (Object.prototype.toString.call(res) === '[object Promise]') {
            suite.isPromiseError = true;
        }
        this.suitesStack.pop();
        this.currentRunningSuite = this.suitesStack.pop();
        this.suitesStack.push(this.currentRunningSuite);
    }
    xdescribe(desc, func, reason) {
        const configService = this.coreContext.getDefaultService('config');
        if (!configService.skipMessage && configService.runSkipped !== 'all') {
            if (configService.runSkipped != null && configService.runSkipped !== '') {
                let finalDesc = '';
                this.suitesStack.map(suite => {
                    finalDesc = finalDesc + '.' + suite.description;
                });
                finalDesc = (finalDesc + '.' + desc).substring(2);
                console.info(`${TAG} finalDesc ${finalDesc}`);
                if (configService.checkIfSuiteInSkipRun(finalDesc)) {
                    console.info(`${TAG} runSkipped suite: ${desc}`);
                } else {
                    console.info(reason == null ? `${TAG} skip suite: ${desc}` : `${TAG} skip suite: ${desc}, and the reason is ${reason}`);
                    return;
                }
            } else {
                console.info(reason == null ? `${TAG} skip suite: ${desc}` : `${TAG} skip suite: ${desc}, and the reason is ${reason}`);
                return;
            }
        }
        this.isSkipSuite = true;
        this.suiteSkipReason = reason;
        this.describe(desc, func);
    }
    beforeAll(func) {
        this.currentRunningSuite.beforeAll.push(processFunc(this.coreContext, func));
    }
    beforeEach(func) {
        this.currentRunningSuite.beforeEach.push(processFunc(this.coreContext, func));
    }
    beforeItSpecified(itDescs, func) {
        this.currentRunningSuite.beforeItSpecified.set(itDescs, processFunc(this.coreContext, func));
    }
    afterItSpecified(itDescs, func) {
        this.currentRunningSuite.afterItSpecified.set(itDescs, processFunc(this.coreContext, func));
    }
    afterAll(func) {
        this.currentRunningSuite.afterAll.push(processFunc(this.coreContext, func));
    }
    afterEach(func) {
        this.currentRunningSuite.afterEach.push(processFunc(this.coreContext, func));
    }
    getCurrentRunningSuite() {
        return this.currentRunningSuite;
    }
    setCurrentRunningSuite(suite) {
        this.currentRunningSuite = suite;
    }
    getRootSuite() {
        return this.rootSuite;
    }
    getCurrentRunningSuiteDesc() {
        return this.currentRunningSuiteDesc;
    }
    setCurrentRunningSuiteDesc(suite, currentSuite, prefix) {
        if (suite != null && suite === currentSuite) {
            this.currentRunningSuiteDesc = prefix;
        } else if (suite != null && suite !== currentSuite) {
            suite.childSuites.forEach(it => {
                let temp = prefix;
                if (it.description != null || it.description !== '') {
                    temp = prefix === '' ? it.description : prefix + '.' + it.description;
                }
                this.setCurrentRunningSuiteDesc(it, currentSuite, temp);
            }
            );
        }
    }
    analyzeConfigServiceClass(configServiceClass, desc) {
        if (configServiceClass == null || configServiceClass === '') {
            this.fullRun = true;
            return false;
        }
        const targetArray = configServiceClass.split(',').map(item => item.trim()).filter(item => item !== '');
        if (this.targetSuiteArray.length === 0) {
            for (let index in targetArray) {
                if (targetArray[index].includes('#')) {
                    this.targetSpecArray.push(targetArray[index]);
                } else {
                    this.targetSuiteArray.push(targetArray[index]);
                }
            }
        }
        return targetArray.indexOf(desc) === -1;
    }
    traversalResults(suite, obj, breakOnError) {
        if (suite.childSuites.length === 0 && suite.specs.length === 0) {
            return;
        }
        if (suite.specs.length > 0) {
            for (const itItem of suite.specs) {
                obj.total++;
                let itInfo = {
                    currentThreadName: 'mainThread',
                    description: suite.description + '#' + itItem.description,
                    result: -3
                };
                if (SysTestKit.workerPort !== null) {
                    itInfo.currentThreadName = SysTestKit.workerPort.name;
                }
                obj.itItemList.push(itInfo);
                if (breakOnError && (obj.error > 0 || obj.failure > 0)) { 
                    continue;
                }
                if (itItem.error) {
                    obj.error++;
                    itInfo.result = -1;
                } else if (itItem.fail) {
                    obj.failure++;
                    itInfo.result = -2;
                } else if (itItem.pass === true) {
                    obj.pass++;
                    itInfo.result = 0;
                }
            }
        }
        obj.duration += suite.duration;
        if (suite.childSuites.length > 0) {
            for (const suiteItem of suite.childSuites) {
                this.traversalResults(suiteItem, obj, breakOnError);
            }
        }
    }
    async setSuiteResults(suite, error, coreContext) {
        if (suite.childSuites.length === 0 && suite.specs.length === 0) {
            return;
        }
        if (suite.specs.length > 0) {
            const specService = coreContext.getDefaultService('spec');
            for (const specItem of suite.specs) {
                specService.setCurrentRunningSpec(specItem);
                if (error instanceof AssertException) {
                    specItem.fail = error;
                } else {
                    specItem.error = error;
                }
                await coreContext.fireEvents('spec', 'specStart', specItem);
                await coreContext.fireEvents('spec', 'specDone', specItem);
            }
        }
        if (suite.childSuites.length > 0) {
            for (const suiteItem of suite.childSuites) {
                await this.setSuiteResults(suiteItem, error, coreContext);
            }
        }
    }
    getSummary() {
        let suiteService = this.coreContext.getDefaultService('suite');
        let rootSuite = suiteService.rootSuite;
        const specService = this.coreContext.getDefaultService('spec');
        const configService = this.coreContext.getDefaultService('config');
        let breakOnError = configService.isBreakOnError();
        let isError = specService.getStatus();
        let isBreaKOnError = breakOnError && isError;
        let obj = { total: 0, failure: 0, error: 0, pass: 0, ignore: 0, duration: 0, itItemList: []};
        for (const suiteItem of rootSuite.childSuites) {
            this.traversalResults(suiteItem, obj, isBreaKOnError);
        }
        obj.ignore = obj.total - obj.pass - obj.failure - obj.error;
        return obj;
    }
    init(coreContext) {
        this.coreContext = coreContext;
    }
    traversalSuites(suite, obj, configService) {
        if (suite.childSuites.length === 0 && suite.specs.length === 0) {
            return [];
        }
        if (suite.specs.length > 0) {
            let itArray = [];
            for (const itItem of suite['specs']) {
                if (!configService.filterDesc(suite.description, itItem.description, itItem.fi, null)) {
                    itArray.push({ 'itName': itItem.description });
                }
            }
            obj[suite.description] = itArray;
        }
        if (suite.childSuites.length > 0) {
            let suiteArray = [];
            for (const suiteItem of suite.childSuites) {
                let suiteObj = {};
                this.traversalSuites(suiteItem, suiteObj, configService);
                if (!configService.filterSuite(suiteItem.description)) {
                    suiteArray.push(suiteObj);
                }
            }
            obj.suites = suiteArray;
        }
    }
    async dryRun(abilityDelegator) {
        console.info(`${TAG} rootSuite : ` + JSON.stringify(this.rootSuite));
        let obj = this.rootSuite;
        let prefixStack = [];
        let suiteArray = [];
        let skipSuiteArray = [];
        this.analyzeSuitesArray(prefixStack, suiteArray, skipSuiteArray, obj);
        const configService = this.coreContext.getDefaultService('config');
        let result;
        if (configService.skipMessage) {
            result = { 'suites': suiteArray, 'skipSuites': skipSuiteArray };
        } else {
            result = { 'suites': suiteArray };
        }
        let strJson = JSON.stringify(result);
        let strLen = strJson.length;
        let maxLen = 500;
        let maxCount = Math.floor(strLen / maxLen);
        for (let count = 0; count <= maxCount; count++) {
            await SysTestKit.print(strJson.substring(count * maxLen, (count + 1) * maxLen));
        }
        console.info(`${TAG}dryRun print success`);
        abilityDelegator.finishTest('dry run finished!!!', 0, () => { });
    }
    analyzeSuitesArray(prefixStack, suiteArray, skipSuiteArray, obj) {
        obj.childSuites.map(suite => {
            if (suite.description != null && suite.description !== '') {
                let prefix = '';
                if (prefixStack.length > 0) {
                    prefix = prefixStack.join('.') + '.' + suite.description;
                } else {
                    prefix = suite.description;
                }
                prefixStack.push(suite.description);
                let temp = {};
                temp[prefix] = [];
                let skipTemp = {};
                skipTemp[prefix] = [];
                suite.specs.map(spec => {
                    let it = { 'itName': spec.description };
                    spec.isSkip ? skipTemp[prefix].push(it) : temp[prefix].push(it);
                });
                suiteArray.push(temp);
                skipSuiteArray.push(skipTemp);
            }
            this.analyzeSuitesArray(prefixStack, suiteArray, skipSuiteArray, suite);
            prefixStack.pop();
        });
    }
    getAllChildSuiteNum(suite, specArray) {
        if (suite.specs != null) {
            suite.specs.forEach(spec => specArray.push(spec));
        }
        if (suite.childSuites != null) {
            suite.childSuites.forEach(it => this.getAllChildSuiteNum(it, specArray));
        }
    }
    execute() {
        const configService = this.coreContext.getDefaultService('config');
        if (configService.filterValid.length !== 0) {
            this.coreContext.fireEvents('task', 'incorrectFormat');
            return;
        }
        if (configService.filterXdescribe.length !== 0) {
            this.coreContext.fireEvents('task', 'incorrectTestSuiteFormat');
            return;
        }
        if (configService.isRandom() && this.rootSuite.childSuites.length > 0) {
            this.rootSuite.childSuites.sort(function () {
                return +('0.' + (+ new Date() + '').split('').reverse().join('')) > 0.5 ? -1 : 1;
            });
            this.currentRunningSuite = this.rootSuite.childSuites[0];
        }
        if (configService.isSupportAsync()) {
            console.info(`${TAG} rootSuite:` + JSON.stringify(this.rootSuite));
            let asyncExecute = async () => {
                await this.coreContext.fireEvents('task', 'taskStart');
                await this.rootSuite.asyncRun(this.coreContext);
            };
            asyncExecute().then(async () => {
                await this.coreContext.fireEvents('task', 'taskDone');
            });
        } else {
            console.info('${TAG} rootSuite:' + JSON.stringify(this.rootSuite));
            this.coreContext.fireEvents('task', 'taskStart');
            this.rootSuite.run(this.coreContext);
            this.coreContext.fireEvents('task', 'taskDone');
        }
    }
    apis() {
        const _this = this;
        return {
            describe: function (desc, func) {
                return _this.describe(desc, func);
            },
            xdescribe: function (desc, func, reason) {
                return _this.xdescribe(desc, func, reason);
            },
            beforeItSpecified: function (itDescs, func) {
                return _this.beforeItSpecified(itDescs, func);
            },
            afterItSpecified: function (itDescs, func) {
                return _this.afterItSpecified(itDescs, func);
            },
            beforeAll: function (func) {
                return _this.beforeAll(func);
            },
            beforeEach: function (func) {
                return _this.beforeEach(func);
            },
            afterAll: function (func) {
                return _this.afterAll(func);
            },
            afterEach: function (func) {
                return _this.afterEach(func);
            }
        };
    }
}
SuiteService.Suite = class {
    constructor(attrs) {
        this.description = attrs.description || '';
        this.childSuites = [];
        this.specs = [];
        this.beforeAll = [];
        this.afterAll = [];
        this.beforeItSpecified = new Map();
        this.afterItSpecified = new Map();
        this.beforeEach = [];
        this.afterEach = [];
        this.duration = 0;
        this.hookError = null;
        this.isSkip = false;
        this.skipReason = '';
    }
    pushSpec(spec) {
        this.specs.push(spec);
    }
    removeSpec(desc) {
        this.specs = this.specs.filter((item, index) => {
            return item.description !== desc;
        });
    }
    getSpecsNum() {
        return this.specs.length;
    }
    isRun(coreContext) {
        const configService = coreContext.getDefaultService('config');
        const suiteService = coreContext.getDefaultService('suite');
        const specService = coreContext.getDefaultService('spec');
        let breakOnError = configService.isBreakOnError();
        let isError = specService.getStatus();
        return breakOnError && isError;
    }
    run(coreContext) {
        const suiteService = coreContext.getDefaultService('suite');
        suiteService.setCurrentRunningSuite(this);
        if (this.description !== '') {
            coreContext.fireEvents('suite', 'suiteStart', this);
        }
        this.runHookFunc('beforeAll');
        if (this.specs.length > 0) {
            const configService = coreContext.getDefaultService('config');
            if (configService.isRandom()) {
                this.specs.sort(function () {
                    return +('0.' + (+ new Date() + '').split('').reverse().join('')) > 0.5 ? -1 : 1;
                });
            }
            for (let spec in this.specs) {
                let isBreakOnError = this.isRun(coreContext);
                if (isBreakOnError) {
                    break;
                }
                this.runHookFunc('beforeEach');
                spec.run(coreContext);
                this.runHookFunc('afterEach');
            }
        }
        if (this.childSuites.length > 0) {
            for (let suite in this.childSuites) {
                let isBreakOnError = this.isRun(coreContext);
                if (isBreakOnError) {
                    break;
                }
                suite.run(coreContext);
                suiteService.setCurrentRunningSuite(suite);
            }
        }
        this.runHookFunc('afterAll');
        if (this.description !== '') {
            coreContext.fireEvents('suite', 'suiteDone');
        }
    }
    async runBeforeItSpecified(beforeItSpecified, specItem) {
        for (const [itNames, hookFunc] of beforeItSpecified) {
            if ((Object.prototype.toString.call(itNames) === '[object Array]' && itNames.includes(specItem.description)) ||
                (Object.prototype.toString.call(itNames) === '[object String]' && itNames === specItem.description)) {
                await Reflect.apply(hookFunc, null, []);
            }
            break;
        }
    }
    async runAfterItSpecified(beforeItSpecified, specItem) {
        for (const [itNames, hookFunc] of beforeItSpecified) {
            if ((Object.prototype.toString.call(itNames) === '[object Array]' && itNames.includes(specItem.description)) ||
                (Object.prototype.toString.call(itNames) === '[object String]' && itNames === specItem.description)) {
                await Reflect.apply(hookFunc, null, []);
            }
            break;
        }
    }
    async asyncRunSpecs(coreContext) {
        const configService = coreContext.getDefaultService('config');
        if (configService.isRandom()) {
            this.specs.sort(function () {
                return +('0.' + (+ new Date() + '').split('').reverse().join('')) > 0.5 ? -1 : 1;
            });
        }
        const specService = coreContext.getDefaultService('spec');
        for (let specItem of this.specs) {
            specService.setCurrentRunningSpec(specItem);
            let isBreakOnError = this.isRun(coreContext);
            if (isBreakOnError) {
                console.info('break description :' + this.description);
                break;
            }
            await coreContext.fireEvents('spec', 'specStart', specItem);
            try {
                await this.runBeforeItSpecified(this.beforeItSpecified, specItem);
                await this.runAsyncHookFunc('beforeEach');
                await specItem.asyncRun(coreContext);
                await this.runAfterItSpecified(this.afterItSpecified, specItem);
                await this.runAsyncHookFunc('afterEach');
            } catch (e) {
                console.error(`${TAG}stack:${e?.stack}`);
                console.error(`${TAG}stack end`);
                if (e instanceof AssertException) {
                    specItem.fail = e;
                } else {
                    specItem.error = e;
                }
                specService.setStatus(true);
            }
            specItem.setResult();
            await coreContext.fireEvents('spec', 'specDone', specItem);
            specService.setCurrentRunningSpec(null);
        }
    }
    async asyncRunChildSuites(coreContext) {
        for (let i = 0; i < this.childSuites.length; i++) {
            let isBreakOnError = this.isRun(coreContext);
            if (isBreakOnError) {
                console.info(`${TAG}break description : ${this.description}`);
                break;
            }
            await this.childSuites[i].asyncRun(coreContext);
        }
    }
    async asyncRun(coreContext) {
        const suiteService = coreContext.getDefaultService('suite');
        const specService = coreContext.getDefaultService('spec');
        suiteService.setCurrentRunningSuite(this);
        suiteService.suitesStack.push(this);
        if (this.description !== '') {
            await coreContext.fireEvents('suite', 'suiteStart', this);
        }
        try {
            await this.runAsyncHookFunc('beforeAll');
        } catch (error) {
            console.error(`${TAG}${error?.stack}`);
            this.hookError = error;
        }
        if (this.hookError !== null) {
            specService.setStatus(true);
            await suiteService.setSuiteResults(this, this.hookError, coreContext);
        }
        if (this.specs.length > 0 && this.hookError === null) {
            await this.asyncRunSpecs(coreContext);
        }
        if (this.childSuites.length > 0 && this.hookError === null) {
            await this.asyncRunChildSuites(coreContext);
        }
        try {
            await this.runAsyncHookFunc('afterAll');
        } catch (error) {
            console.error(`${TAG}${error?.stack}`);
            this.hookError = error;
            specService.setStatus(true);
        }
        if (this.description !== '') {
            await coreContext.fireEvents('suite', 'suiteDone');
            let childSuite = suiteService.suitesStack.pop();
            let currentRunningSuite = suiteService.suitesStack.pop();
            suiteService.setCurrentRunningSuite(currentRunningSuite);
            suiteService.suitesStack.push(currentRunningSuite);
        }
    }
    runHookFunc(hookName) {
        if (this[hookName] && this[hookName].length > 0) {
            this[hookName].forEach(func => {
                try {
                    func();
                } catch (e) {
                    console.error(`${TAG}${e.stack}`);
                }
            });
        }
    }
    async runAsyncHookFunc(hookName) {
        for (const hookItem of this[hookName]) {
            try {
                await hookItem();
            } catch (error) {
                error['message'] += `, error in ${hookName} function`;
                throw error;
            }
        }
    }
};
class SpecService {
    constructor(attr) {
        this.id = attr.id;
        this.totalTest = 0;
        this.hasError = false;
        this.skipSpecNum = 0;
        this.isSkipSpec = false;
        this.specSkipReason = '';
    }
    init(coreContext) {
        this.coreContext = coreContext;
    }
    setCurrentRunningSpec(spec) {
        this.currentRunningSpec = spec;
    }
    setStatus(obj) {
        this.hasError = obj;
    }
    getStatus() {
        return this.hasError;
    }
    getTestTotal() {
        return this.totalTest;
    }
    getCurrentRunningSpec() {
        return this.currentRunningSpec;
    }
    getSkipSpecNum() {
        return this.skipSpecNum;
    }
    initSpecService() {
        this.isSkipSpec = false;
        this.specSkipReason = '';
    }
    it(desc, filter, func) {
        const suiteService = this.coreContext.getDefaultService('suite');
        const configService = this.coreContext.getDefaultService('config');
        let isFilter = new NestFilter().filterNestName(suiteService.targetSuiteArray, suiteService.targetSpecArray, suiteService.suitesStack, desc);
        if (configService.filterWithNest(desc, filter)) {
            console.info(`${TAG}filter it :${desc}`);
            this.initSpecService();
            return;
        }
        if (configService.filterDesc(suiteService.currentRunningSuite.description, desc, filter, this.coreContext) && isFilter && !suiteService.fullRun) {
            console.info(`${TAG}filter it :${desc}`);
            this.initSpecService();
        } else {
            let processedFunc = processFunc(this.coreContext, func);
            const spec = new SpecService.Spec({ description: desc, fi: filter, fn: processedFunc });
            if (this.isSkipSpec) {
                spec.isSkip = true;
                spec.skipReason = this.specSkipReason;
            }
            this.initSpecService();
            if (configService.runSkipped === 'skipped' && !spec.isSkip) {
                console.info(`${TAG} runSkipped is skipped , just run xit, don't run it: ${spec.description}`);
                return;
            }
            if (suiteService.getCurrentRunningSuite().isSkip && !spec.isSkip) {
                configService.filterXdescribe.push(suiteService.getCurrentRunningSuite().description);
            }
            if (typeof this.coreContext.getServices('dataDriver') !== 'undefined' && configService['dryRun'] !== 'true') {
                let specStress = this.coreContext.getServices('dataDriver').dataDriver.getSpecStress(desc);
                for (let i = 1; i < specStress; i++) {
                    this.totalTest++;
                    suiteService.getCurrentRunningSuite().pushSpec(spec);
                }
            }
            if (configService['dryRun'] !== 'true') {
                let stress = configService.getStress(); 
                console.info(`${TAG}stress length : ${stress}`);
                for (let i = 1; i < stress; i++) {
                    this.totalTest++;
                    suiteService.getCurrentRunningSuite().pushSpec(spec);
                }
            }
            this.totalTest++;
            suiteService.getCurrentRunningSuite().pushSpec(spec);
        }
    }
    xit(desc, filter, func, reason) {
        const configService = this.coreContext.getDefaultService('config');
        const suiteService = this.coreContext.getDefaultService('suite');
        if (!configService.skipMessage && configService.runSkipped !== 'all') {
            if (configService.runSkipped != null && configService.runSkipped !== '') {
                let finalDesc = '';
                suiteService.suitesStack.map(suite => {
                    finalDesc = finalDesc + '.' + suite.description;
                });
                finalDesc = (finalDesc + '#' + desc).substring(2);
                if (configService.checkIfSpecInSkipRun(finalDesc)) {
                    console.info(`${TAG} runSkipped spec: ${desc}`);
                } else {
                    console.info(reason == null ? `${TAG} skip spec: ${desc}` : `${TAG} skip spec: ${desc}, and the reason is ${reason}`);
                    return;
                }
            } else {
                console.info(reason == null ? `${TAG} skip spec: ${desc}` : `${TAG} skip spec: ${desc}, and the reason is ${reason}`);
                return;
            }
        }
        this.skipSpecNum++;
        this.isSkipSpec = true;
        this.specSkipReason = reason;
        this.it(desc, filter, func);
    }
    apis() {
        const _this = this;
        return {
            it: function (desc, filter, func) {
                return _this.it(desc, filter, func);
            },
            xit: function (desc, filter, func, reason) {
                return _this.xit(desc, filter, func, reason);
            }
        };
    }
}
SpecService.Spec = class {
    constructor(attrs) {
        this.description = attrs.description || '';
        this.fi = attrs.fi;
        this.fn = attrs.fn || function () {
        };
        this.fail = undefined;
        this.error = undefined;
        this.duration = 0;
        this.startTime = 0;
        this.isExecuted = false; 
        this.isSkip = false;
        this.skipReason = '';
        this.expectMsg = '';
    }
    setResult() {
        if (this.fail) {
            this.pass = false;
        } else {
            this.pass = true;
        }
    }
    run(coreContext) {
        const specService = coreContext.getDefaultService('spec');
        specService.setCurrentRunningSpec(this);
        coreContext.fireEvents('spec', 'specStart', this);
        this.isExecuted = true;
        try {
            let dataDriver = coreContext.getServices('dataDriver');
            if (typeof dataDriver === 'undefined') {
                this.fn();
            } else {
                let suiteParams = dataDriver.dataDriver.getSuiteParams();
                let specParams = dataDriver.dataDriver.getSpecParams();
                console.info(`${TAG}[suite params] ${JSON.stringify(suiteParams)}`);
                console.info(`${TAG}[spec params] ${JSON.stringify(specParams)}`);
                if (this.fn.length === 0) {
                    this.fn();
                } else if (specParams.length === 0) {
                    this.fn(suiteParams);
                } else {
                    specParams.forEach(paramItem => this.fn(Object.assign({}, paramItem, suiteParams)));
                }
            }
            this.setResult();
        } catch (e) {
            this.error = e;
            specService.setStatus(true);
        }
        coreContext.fireEvents('spec', 'specDone', this);
    }
    async asyncRun(coreContext) {
        const dataDriver = coreContext.getServices('dataDriver');
        if (typeof dataDriver === 'undefined') {
            await this.fn();
        } else {
            const suiteParams = dataDriver.dataDriver.getSuiteParams();
            const specParams = dataDriver.dataDriver.getSpecParams();
            console.info(`[suite params] ${JSON.stringify(suiteParams)}`);
            console.info(`[spec params] ${JSON.stringify(specParams)}`);
            if (this.fn.length === 0) {
                await this.fn();
            } else if (specParams.length === 0) {
                await this.fn(suiteParams);
            } else {
                for (const paramItem of specParams) {
                    await this.fn(Object.assign({}, paramItem, suiteParams));
                }
            }
        }
        this.isExecuted = true;
    }
    filterCheck(coreContext) {
        const specService = coreContext.getDefaultService('spec');
        specService.setCurrentRunningSpec(this);
        return true;
    }
};
class ExpectService {
    constructor(attr) {
        this.id = attr.id;
        this.matchers = {};
        this.customMatchers = [];
    }
    expect(actualValue) {
        return this.wrapMatchers(actualValue);
    }
    init(coreContext) {
        this.coreContext = coreContext;
        this.addMatchers(this.basicMatchers());
    }
    addMatchers(matchers) {
        for (const matcherName in matchers) {
            if (Object.prototype.hasOwnProperty.call(matchers, matcherName)) {
                this.matchers[matcherName] = matchers[matcherName];
            }
        }
    }
    removeMatchers(customAssertionName) {
        if (customAssertionName === 'all') {
            for (const matcherName in this.matchers) {
                this.matchers[matcherName] = this.customMatchers.includes(matcherName)
                    ? (() => {throw new Error(`${matcherName} is unregistered`)}) : undefined;
            }
        } else {
            this.matchers[customAssertionName] = () => {
                throw new Error(`${customAssertionName} is unregistered`);
            };
        }
    }
    basicMatchers() {
        return {
            assertTrue: assertTrueFun,
            assertEqual: assertEqualFun,
            assertThrow: assertThrowFun
        };
    }
    initWrapMatchers(currentRunningSpec) {
        return {
            isNot: false,
            not: function () {
                this.isNot = true;
                return this;
            },
            message: function (msg) {
                currentRunningSpec.expectMsg = msg;
                console.info(`${TAG} msg: ${msg}`);
                return this;
            }
        };
    }
    handleWithAssertPromise(_this, wrappedMatchers, matcherName, actualValue, currentRunningSpec, currentRunningSuite) {
        wrappedMatchers[matcherName] = async function (...args) {
            await _this.matchers[matcherName](actualValue, args).then(function (result) {
                if (wrappedMatchers.isNot) {
                    result.pass = !result.pass;
                }
                result.actualValue = actualValue;
                result.checkFunc = matcherName;
                if (!result.pass) {
                    const assertError = new AssertException(result.message);
                    currentRunningSpec ? currentRunningSpec.fail = assertError : currentRunningSuite.hookError = assertError;
                    throw assertError;
                }
            });
        };
    }
    handleWithoutAssertPromise(_this, wrappedMatchers, matcherName, actualValue, currentRunningSpec, currentRunningSuite) {
        wrappedMatchers[matcherName] = function (...args) {
            const result = _this.customMatchers.includes(matcherName)
                ? _this.matchers[matcherName](actualValue, args[0]) : _this.matchers[matcherName](actualValue, args);
            if (wrappedMatchers.isNot) {
                result.pass = !result.pass;
                result.message = LogExpectError.getErrorMsg(matcherName, actualValue, args[0], result.message);
            }
            result.actualValue = actualValue;
            result.checkFunc = matcherName;
            if (!result.pass) {
                const assertError = new AssertException(result.message);
                currentRunningSpec ? currentRunningSpec.fail = assertError : currentRunningSuite.hookError = assertError;
                throw assertError;
            }
        };
    }
    addAssert(wrappedMatchers, matcherName, actualValue) {
        const _this = this;
        const specService = _this.coreContext.getDefaultService('spec');
        const currentRunningSpec = specService.getCurrentRunningSpec();
        const currentRunningSuite = _this.coreContext.getDefaultService('suite').getCurrentRunningSuite();
        if (matcherName.search('assertPromise') === 0) {
            this.handleWithAssertPromise(_this, wrappedMatchers, matcherName, actualValue, currentRunningSpec, currentRunningSuite);
        } else {
            this.handleWithoutAssertPromise(_this, wrappedMatchers, matcherName, actualValue, currentRunningSpec, currentRunningSuite);
        }
    }
    wrapMatchers(actualValue) {
        const _this = this;
        const specService = _this.coreContext.getDefaultService('spec');
        const currentRunningSpec = specService.getCurrentRunningSpec();
        const wrappedMatchers = this.initWrapMatchers(currentRunningSpec);
        const currentRunningSuite = _this.coreContext.getDefaultService('suite').getCurrentRunningSuite();
        for (const matcherName in this.matchers) {
            let result = Object.prototype.hasOwnProperty.call(this.matchers, matcherName);
            if (!result) {
                continue;
            }
            this.addAssert(wrappedMatchers, matcherName, actualValue);
        }
        return wrappedMatchers;
    }
    apis() {
        const _this = this;
        return {
            expect: function (actualValue) {
                return _this.expect(actualValue);
            }
        };
    }
}
class ReportService {
    constructor(attr) {
        this.id = attr.id;
    }
    init(coreContext) {
        this.coreContext = coreContext;
        this.specService = this.coreContext.getDefaultService('spec');
        this.suiteService = this.coreContext.getDefaultService('suite');
        this.duration = 0;
    }
    taskStart() {
        console.info(`${TAG}[start] start run suites`);
    }
    async suiteStart() {
        console.info(`${TAG}[suite start]${this.suiteService.getCurrentRunningSuite().description}`);
    }
    async specStart() {
        console.info(`${TAG}start running case '${this.specService.currentRunningSpec.description}'`);
        this.index = this.index + 1;
        let spec = this.specService.currentRunningSpec;
        spec.startTime = await SysTestKit.getRealTime();
    }
    async specDone() {
        let msg = '';
        let spec = this.specService.currentRunningSpec;
        let suite = this.suiteService.currentRunningSuite;
        spec.duration = await SysTestKit.getRealTime() - spec.startTime;
        suite.duration += spec.duration;
        if (spec.error) {
            this.formatPrint('error', spec.description + ' ; consuming ' + spec.duration + 'ms');
            this.formatPrint('errorDetail', spec.error);
        } else if (spec.fail) {
            this.formatPrint('fail', spec.description + ' ; consuming ' + spec.duration + 'ms');
            this.formatPrint('failDetail', spec.fail?.message);
        } else {
            this.formatPrint('pass', spec.description + ' ; consuming ' + spec.duration + 'ms');
        }
        this.formatPrint(this.specService.currentRunningSpec.error, msg);
    }
    suiteDone() {
        let suite = this.suiteService.currentRunningSuite;
        let message = suite.hookError ? `, ${suite.hookError?.message}` : '';
        console.info(`[suite end] ${suite.description} consuming ${suite.duration} ms${message}`);
    }
    taskDone() {
        let msg = '';
        let summary = this.suiteService.getSummary();
        msg = 'total cases:' + summary.total + ';failure ' + summary.failure + ',' + 'error ' + summary.error;
        msg += ',pass ' + summary.pass + '; consuming ' + summary.duration + 'ms';
        console.info(`${TAG}${msg}`);
        console.info(`${TAG}[end] run suites end`);
    }
    incorrectFormat() {
        if (this.coreContext.getDefaultService('config').filterValid.length !== 0) {
            this.coreContext.getDefaultService('config').filterValid.forEach(function (item) {
                console.info(`${TAG}this param ${item} is invalid`);
            });
        }
    }
    incorrectTestSuiteFormat() {
        if (this.coreContext.getDefaultService('config').filterXdescribe.length !== 0) {
            this.coreContext.getDefaultService('config').filterXdescribe.forEach(function (item) {
                console.info(`${TAG}xdescribe: ${item} should not contain it`);
            });
        }
    }
    formatPrint(type, msg) {
        switch (type) {
            case 'pass':
                console.info(`${TAG}[pass]${msg}`);
                break;
            case 'fail':
                console.info(`${TAG}[fail]${msg}`);
                break;
            case 'failDetail':
                console.info(`${TAG}[failDetail]${msg}`);
                break;
            case 'error':
                console.info(`${TAG}[error]${msg}`);
                break;
            case 'errorDetail':
                console.info(`${TAG}[errorDetail]${msg}`);
                break;
        }
    }
    sleep(numberMillis) {
        var now = new Date();
        var exitTime = now.getTime() + numberMillis;
        while (true) {
            now = new Date();
            if (now.getTime() > exitTime) {
                return;
            }
        }
    }
}
export {
    SuiteService,
    SpecService,
    ExpectService,
    ReportService
};
class SpecEvent {
    constructor(attr) {
        this.id = attr.id;
        this.coreContext = attr.context;
        this.eventMonitors = [];
    }
    subscribeEvent(service) {
        this.eventMonitors.push(service);
    }
    async specStart() {
        for (const monitor of this.eventMonitors) {
            await monitor['specStart']();
        }
    }
    async specDone() {
        for (const monitor of this.eventMonitors) {
            await monitor['specDone']();
        }
    }
}
class SuiteEvent {
    constructor(attr) {
        this.id = attr.id;
        this.suiteContext = attr.coreContext;
        this.eventMonitors = [];
    }
    subscribeEvent(service) {
        this.eventMonitors.push(service);
    }
    async suiteStart() {
        for (const monitor of this.eventMonitors) {
            await monitor['suiteStart']();
        }
    }
    async suiteDone() {
        for (const monitor of this.eventMonitors) {
            await monitor['suiteDone']();
        }
    }
}
class TaskEvent {
    constructor(attr) {
        this.id = attr.id;
        this.coreContext = attr.coreContext;
        this.eventMonitors = [];
    }
    subscribeEvent(service) {
        this.eventMonitors.push(service);
    }
    async taskStart() {
        for (const monitor of this.eventMonitors) {
            await monitor['taskStart']();
        }
    }
    async taskDone() {
        for (const monitor of this.eventMonitors) {
            await monitor['taskDone']();
        }
    }
    incorrectFormat() {
        for (const monitor of this.eventMonitors) {
            monitor['incorrectFormat']();
        }
    }
    incorrectTestSuiteFormat() {
        for (const monitor of this.eventMonitors) {
            monitor.incorrectTestSuiteFormat();
        }
    }
}
export { SpecEvent, TaskEvent, SuiteEvent };
import {SuiteService, SpecService, ExpectService, ReportService} from './service';
import {ConfigService} from './module/config/configService';
import {SpecEvent, TaskEvent, SuiteEvent} from './event';
class Core {
    static getInstance() {
        if (!this.instance) {
            this.instance = new Core();
        }
        return this.instance;
    }
    constructor() {
        this.instance = null;
        this.services = {
            suite: {},
            spec: {},
            config: {},
            expect: {},
            log: {},
            report: {}
        };
        this.events = {
            suite: {},
            spec: {},
            task: {}
        };
    }
    addService(name, service) {
        let serviceObj = {};
        if (!this.services[name]) {
            this.services[name] = serviceObj;
        } else {
            serviceObj = this.services[name];
        }
        serviceObj[service.id] = service;
    }
    getDefaultService(name) {
        return this.services[name].default;
    }
    getServices(name) {
        return this.services[name];
    }
    registerEvent(serviceName, event) {
        let eventObj = {};
        if (!this.events[serviceName]) {
            this.events[serviceName] = eventObj;
        } else {
            eventObj = this.events[serviceName];
        }
        eventObj[event.id] = event;
    }
    unRegisterEvent(serviceName, eventID) {
        const eventObj = this.events[serviceName];
        if (eventObj) {
            delete eventObj[eventID];
        }
    }
    subscribeEvent(serviceName, serviceObj) {
        const eventObj = this.events[serviceName];
        if (eventObj) {
            for (const attr in eventObj) {
                eventObj[attr]['subscribeEvent'](serviceObj);
            }
        }
    }
    async fireEvents(serviceName, eventName) {
        const eventObj = this.events[serviceName];
        if (!eventObj) {
            return;
        }
        for (const attr in eventObj) {
            await eventObj[attr][eventName]();
        }
    }
    addToGlobal(apis) {
        if (typeof globalThis !== 'undefined') {
            for (let api in apis) {
                globalThis[api] = apis[api];
            }
        }
        for (const api in apis) {
            this[api] = apis[api];
        }
    }
    init() {
        this.addService('suite', new SuiteService({id: 'default'}));
        this.addService('spec', new SpecService({id: 'default'}));
        this.addService('expect', new ExpectService({id: 'default'}));
        this.addService('report', new ReportService({id: 'default'}));
        this.addService('config', new ConfigService({id: 'default'}));
        this.registerEvent('task', new TaskEvent({id: 'default', coreContext: this}));
        this.registerEvent('suite', new SuiteEvent({id: 'default', coreContext: this}));
        this.registerEvent('spec', new SpecEvent({id: 'default', coreContext: this}));
        this.subscribeEvent('spec', this.getDefaultService('report'));
        this.subscribeEvent('suite', this.getDefaultService('report'));
        this.subscribeEvent('task', this.getDefaultService('report'));
        const context = this;
        for (const key in this.services) {
            const serviceObj = this.services[key];
            for (const serviceID in serviceObj) {
                const service = serviceObj[serviceID];
                service.init(context);
                if (typeof service.apis !== 'function') {
                    continue;
                }
                const apis = service.apis();
                if (apis) {
                    this.addToGlobal(apis);
                }
            }
        }
    }
    execute(abilityDelegator) {
        const suiteService = this.getDefaultService('suite');
        const configService = this.getDefaultService('config');
        if (configService['dryRun'] === 'true') {
            (async function () {
                await suiteService.dryRun(abilityDelegator);
            })();
            return;
        }
        setTimeout(() => {
            suiteService.execute();
        }, 10);
    }
}
export default Core;
{"compileConfig":{"deviceType":"default","buildMode":"debug","compilerType":"ark","note":"false","logLevel":"3","hapMode":"false","img2bin":"true","PATH":"/private/var/folders/4v/y5gy9_jx3s7dfg6vfpym2y4c0000gn/T/AppTranslocation/1E962AA2-BAD8-4014-AAB7-8E97A7504B43/d/DevEco-Studio.app/Contents/tools/node/bin/","projectProfilePath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/build-profile.json5","localPropertiesPath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/local.properties","appResource":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/res/default/ResourceTable.txt","cachePath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug","aceBuildJson":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/loader/default/loader.json","aceModuleJsonPath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/res/default/module.json","aceSoPath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/loader_out/default/nativeDependencies.txt","aceModuleRoot":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/src/main/ets","aceModuleBuild":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/loader_out/default/ets","aceProfilePath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/res/default/resources/base/profile","aceSuperVisualPath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/src/main/supervisual","watchMode":"false"},"patchConfig":{"changedFileList":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/patch/default/changedFileList.json"}}
import { harTasks } from '@ohos/hvigor-ohos-plugin';
export default {
    system: harTasks,  
    plugins:[]         
}
/**
 * Use these variables when you tailor your ArkTS code. They must be of the const type.
 */
export const HAR_VERSION = '1.0.0';
export const BUILD_MODE_NAME = 'debug';
export const DEBUG = true;
export const TARGET_NAME = 'default';
/**
 * BuildProfile Class is used only for compatibility purposes.
 */
export default class BuildProfile { 
	static readonly HAR_VERSION = HAR_VERSION;
	static readonly BUILD_MODE_NAME = BUILD_MODE_NAME;
	static readonly DEBUG = DEBUG;
	static readonly TARGET_NAME = TARGET_NAME;
}
{
	"app":	{
		"bundleName":	"com.example.tbschargeharmonyos",
		"vendor":	"example",
		"versionCode":	1000000,
		"versionName":	"1.0.0",
		"icon":	"$media:layered_image",
		"label":	"$string:app_name",
		"apiReleaseType":	"Release",
		"compileSdkVersion":	"5.0.4.150",
		"targetAPIVersion":	50004016,
		"minAPIVersion":	50004016,
		"compileSdkType":	"HarmonyOS",
		"appEnvironments":	[],
		"bundleType":	"app",
		"buildMode":	"debug",
		"debug":	true,
		"iconId":	33554435,
		"labelId":	33554432
	},
	"module":	{
		"name":	"entry",
		"type":	"entry",
		"description":	"$string:module_desc",
		"mainElement":	"EntryAbility",
		"deviceTypes":	["phone", "tablet", "2in1"],
		"deliveryWithInstall":	true,
		"installationFree":	false,
		"pages":	"$profile:main_pages",
		"querySchemes":	["amapuri", "baidumap", "maps"],
		"requestPermissions":	[{
				"name":	"ohos.permission.INTERNET"
			}, {
				"name":	"ohos.permission.APPROXIMATELY_LOCATION",
				"reason":	"$string:permission_approximately_location",
				"usedScene":	{
					"abilities":	["EntryAbility"],
					"when":	"always"
				},
				"reasonId":	50331677
			}, {
				"name":	"ohos.permission.LOCATION",
				"reason":	"$string:location_permission_reason",
				"usedScene":	{
					"abilities":	["EntryAbility"],
					"when":	"always"
				},
				"reasonId":	50331666
			}],
		"abilities":	[{
				"name":	"EntryAbility",
				"srcEntry":	"./ets/entryability/EntryAbility.ets",
				"description":	"$string:EntryAbility_desc",
				"icon":	"$media:layered_image",
				"label":	"$string:EntryAbility_label",
				"startWindowIcon":	"$media:startIcon",
				"startWindowBackground":	"$color:start_window_background",
				"exported":	true,
				"skills":	[{
						"entities":	["entity.system.home"],
						"actions":	["action.system.home"]
					}],
				"descriptionId":	33554436,
				"iconId":	33554435,
				"labelId":	33554437,
				"startWindowIconId":	33554441,
				"startWindowBackgroundId":	33554439
			}],
		"extensionAbilities":	[{
				"name":	"EntryBackupAbility",
				"srcEntry":	"./ets/entrybackupability/EntryBackupAbility.ets",
				"type":	"backup",
				"exported":	false,
				"metadata":	[{
						"name":	"ohos.extension.backup",
						"resource":	"$profile:backup_config",
						"resourceId":	33554442
					}]
			}],
		"packageName":	"entry",
		"virtualMachine":	"ark12.0.6.0",
		"compileMode":	"esmodule",
		"dependencies":	[],
		"descriptionId":	33554438
	}
}
{"configPath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/process_profile/default/module.json","packageName":"com.example.tbschargeharmonyos","output":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/res/default","moduleNames":"entry,common,charge,mine,scan","ResourceTable":["/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/generated/r/default/ResourceTable.h"],"applicationResource":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/AppScope/resources","moduleResources":["/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/src/main/resources"],"dependencies":["/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/common/src/main/resources","/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/feature/charge/src/main/resources","/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/feature/mine/src/main/resources","/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/feature/scan/src/main/resources"],"iconCheck":true,"compression":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/res/default/opt-compression.json","ids":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/res/default/ids_map","definedIds":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/intermediates/res/default/ids_map/id_defined.json","definedSysIds":"/private/var/folders/4v/y5gy9_jx3s7dfg6vfpym2y4c0000gn/T/AppTranslocation/1E962AA2-BAD8-4014-AAB7-8E97A7504B43/d/DevEco-Studio.app/Contents/sdk/default/hms/toolchains/id_defined.json"}
{"context":{"extensionPath":"/private/var/folders/4v/y5gy9_jx3s7dfg6vfpym2y4c0000gn/T/AppTranslocation/1E962AA2-BAD8-4014-AAB7-8E97A7504B43/d/DevEco-Studio.app/Contents/sdk/default/hms/toolchains/lib/libimage_transcoder_shared.dylib"},"compression":{"media":{"enable":false},"filters":[]}}
import {expect} from '../../interface';
class VerificationMode {
    constructor(times) {
        this.doTimes = times;
    }
    times(count) {
        expect(count).assertEqual(this.doTimes);
    }
    never() {
        console.info(this.doTimes);
        expect(0).assertEqual(this.doTimes);
    }
    once() {
        expect(1).assertEqual(this.doTimes);
    }
    atLeast(count) {
        if (count > this.doTimes) {
            throw Error('failed ' + count + ' greater than the actual execution times of method');
        }
    }
    atMost(count) {
        if (count < this.doTimes) {
            throw Error('failed ' + count + ' less than the actual execution times of method');
        }
    }
}
export default VerificationMode;
class ArgumentMatchers {
    ANY = '<any>';
    ANY_STRING = '<any String>';
    ANY_BOOLEAN = '<any Boolean>';
    ANY_NUMBER = '<any Number>';
    ANY_OBJECT = '<any Object>';
    ANY_FUNCTION = '<any Function>';
    MATCH_REGEXS = '<match regexs>';
    static any() {
    }
    static anyString() {
    }
    static anyBoolean() {
    }
    static anyNumber() {
    }
    static anyObj() {
    }
    static anyFunction() {
    }
    static matchRegexs() {
        let regex = arguments[0];
        if (ArgumentMatchers.isRegExp(regex)) {
            return regex;
        }
        throw Error('not a regex');
    }
    static isRegExp(value) {
        return Object.prototype.toString.call(value) === '[object RegExp]';
    }
    matcheReturnKey() {
        let arg = arguments[0];
        let regex = arguments[1];
        let stubSetKey = arguments[2];
        if (stubSetKey && stubSetKey == this.ANY) {
            return this.ANY;
        }
        if (typeof arg === 'string' && !regex) {
            return this.ANY_STRING;
        }
        if (typeof arg === 'boolean' && !regex) {
            return this.ANY_BOOLEAN;
        }
        if (typeof arg === 'number' && !regex) {
            return this.ANY_NUMBER;
        }
        if (typeof arg === 'object' && !regex) {
            return this.ANY_OBJECT;
        }
        if (typeof arg === 'function' && !regex) {
            return this.ANY_FUNCTION;
        }
        if (typeof arg === 'string' && regex) {
            return regex.test(arg);
        }
        return null;
    }
    matcheStubKey() {
        let key = arguments[0];
        if (key === ArgumentMatchers.any) {
            return this.ANY;
        }
        if (key === ArgumentMatchers.anyString) {
            return this.ANY_STRING;
        }
        if (key === ArgumentMatchers.anyBoolean) {
            return this.ANY_BOOLEAN;
        }
        if (key === ArgumentMatchers.anyNumber) {
            return this.ANY_NUMBER;
        }
        if (key === ArgumentMatchers.anyObj) {
            return this.ANY_OBJECT;
        }
        if (key === ArgumentMatchers.anyFunction) {
            return this.ANY_FUNCTION;
        }
        if (ArgumentMatchers.isRegExp(key)) {
            return key;
        }
        return null;
    }
}
export default ArgumentMatchers;
class ExtendInterface {
    constructor(mocker) {
        this.mocker = mocker;
    }
    stub() {
        this.params = arguments;
        return this;
    }
    stubMockedCall(returnInfo) {
        this.mocker.stubApply(this, this.params, returnInfo);
    }
    afterReturn(value) {
        this.stubMockedCall(function () {
            return value;
        });
    }
    afterReturnNothing() {
        this.stubMockedCall(function () {
            return undefined;
        });
    }
    afterAction(action) {
        this.stubMockedCall(action);
    }
    afterThrow(msg) {
        this.stubMockedCall(function () {
            throw msg;
        });
    }
    clear() {
        this.mocker.clear();
    }
}
export default ExtendInterface;
import ExtendInterface from './ExtendInterface';
import VerificationMode from './VerificationMode';
import ArgumentMatchers from './ArgumentMatchers';
class MockKit {
  constructor() {
    this.mFunctions = [];
    this.stubs = new Map();
    this.recordCalls = new Map();
    this.currentSetKey = new Map();
    this.mockObj = null;
    this.recordMockedMethod = new Map();
  }
  init() {
    this.reset();
  }
  reset() {
    this.mFunctions = [];
    this.stubs = {};
    this.recordCalls = {};
    this.currentSetKey = new Map();
    this.mockObj = null;
    this.recordMockedMethod = new Map();
  }
  clearAll() {
    this.reset();
    var props = Object.keys(this);
    for (var i = 0; i < props.length; i++) {
      delete this[props[i]];
    }
    var props = Object.getOwnPropertyNames(this);
    for (var i = 0; i < props.length; i++) {
      delete this[props[i]];
    }
    for (var key in this) {
      delete this[key];
    }
  }
  clear(obj) {
    if (!obj) {
      throw Error('Please enter an object to be cleaned');
    }
    if (typeof obj !== 'object' && typeof obj !== 'function') {
      throw new Error('Not a object or static class');
    }
    this.recordMockedMethod.forEach(function (value, key, map) {
      if (key) {
        obj[key] = value;
      }
    });
  }
  ignoreMock(obj, method) {
    if (typeof obj !== 'object' && typeof obj !== 'function') {
      throw new Error('Not a object or static class');
    }
    if (typeof method !== 'function') {
      throw new Error('Not a function');
    }
    let og = this.recordMockedMethod.get(method.propName);
    if (og) {
      obj[method.propName] = og;
      this.recordMockedMethod.set(method.propName, undefined);
    }
  }
  extend(dest, source) {
    dest['stub'] = source['stub'];
    dest['afterReturn'] = source['afterReturn'];
    dest['afterReturnNothing'] = source['afterReturnNothing'];
    dest['afterAction'] = source['afterAction'];
    dest['afterThrow'] = source['afterThrow'];
    dest['stubMockedCall'] = source['stubMockedCall'];
    dest['clear'] = source['clear'];
    return dest;
  }
  stubApply(f, params, returnInfo) {
    let values = this.stubs.get(f);
    if (!values) {
      values = new Map();
    }
    let key = params[0];
    if (typeof key === 'undefined') {
      key = 'anonymous-mock-' + f.propName;
    } else {
      key = [];
      const matcher = new ArgumentMatchers();
      for (let i = 0; i < params.length; i++) {
        const param = params[i];
        const matchKey = matcher.matcheStubKey(param);
        if (matchKey) {
          key.push(matchKey);
        } else {
          key.push(param);
        }
      }
    }
    values.set(key, returnInfo);
    this.stubs.set(f, values);
  }
  getReturnInfo(f, params) {
    let values = this.stubs.get(f);
    if (!values) {
      return undefined;
    }
    let returnKet = params[0];
    const anonymousName = 'anonymous-mock-' + f.propName;
    if (typeof returnKet === 'undefined') {
      returnKet = anonymousName;
    } else {
      returnKet = this.getReturnKet(values, params, returnKet, anonymousName);
    }
    return values.get(returnKet);
  }
  getReturnKet(values, params, defaultValue, anonymousName) {
    let flag = true;
    let returnKet = defaultValue;
    values.forEach((value, paramsKey, map) => {
      if (
        flag &&
        paramsKey !== anonymousName &&
        paramsKey.length === params.length &&
        this.checkIsRightValue(paramsKey, params)
      ) {
        returnKet = paramsKey;
        flag = false;
      }
    });
    return returnKet;
  }
  checkIsRightValue(paramsKey, params) {
    const matcher = new ArgumentMatchers();
    return paramsKey.every((key, j) => {
      if (ArgumentMatchers.isRegExp(key) && typeof params[j] === 'string') {
        return key.test(params[j]);
      }
      const matchKey = matcher.matcheReturnKey(params[j], undefined, key);
      if (matchKey && matchKey === key) {
        return true;
      } else if (this.checkIsEqual(params[j], key)) {
        return true;
      }
      return false;
    });
  }
  checkIsEqual(value1, value2) {
    if (value1 === value2) {
      return true;
    }
    if (typeof value1 !== typeof value2) {
      return false;
    }
    if (Array.isArray(value1) && Array.isArray(value2)) {
      if (value1.length !== value2.length) {
        return false;
      }
      for (let i = 0; i < value1.length; i++) {
        if (!this.checkIsEqual(value1[i], value2[i])) {
          return false;
        }
      }
      return true;
    }
    if (Object.prototype.toString.call(value1) === '[object Object]' &&
      Object.prototype.toString.call(value2) === '[object Object]') {
      const keys1 = Object.keys(value1);
      const keys2 = Object.keys(value2);
      if (keys1.length !== keys2.length) {
        return false;
      }
      for (let key of keys1) {
        if (!keys2.includes(key) || !this.checkIsEqual(value1[key], value2[key])) {
          return false;
        }
      }
      return true;
    }
    if (Object.prototype.toString.call(value1) === '[object Date]' &&
      Object.prototype.toString.call(value2) === '[object Date]' &&
      value1.getTime() === value2.getTime()) {
      return true;
    }
    if (Object.prototype.toString.call(value1) === '[object RegExp]' &&
      Object.prototype.toString.call(value2) === '[object RegExp]' &&
      value1.toString() === value2.toString()) {
      return true;
    }
    return false;
  }
  findName(obj, value) {
    let properties = this.findProperties(obj);
    let name = null;
    properties
      .filter((item) => item !== 'caller' && item !== 'arguments')
      .forEach(function (va1, idx, array) {
        if (obj[va1] === value) {
          name = va1;
        }
      });
    return name;
  }
  isFunctionFromPrototype(f, container, propName) {
    if (
      container.constructor !== Object &&
      container.constructor.prototype !== container
    ) {
      return container.constructor.prototype[propName] === f;
    }
    return false;
  }
  findProperties(obj, ...arg) {
    function getProperty(newObj) {
      if (newObj.__proto__ === null) {
        return [];
      }
      let properties = Object.getOwnPropertyNames(newObj);
      return [...properties, ...getProperty(newObj.__proto__)];
    }
    return getProperty(obj);
  }
  recordMethodCall(originalMethod, args) {
    Function.prototype.getName = function () {
      return this.name || this.toString().match(/function\s*([^(]*)\(/)[1];
    };
    let name = originalMethod.getName();
    let arglistString = name + '(' + Array.from(args).toString() + ')';
    let records = this.recordCalls.get(arglistString);
    if (!records) {
      records = 0;
    }
    records++;
    this.recordCalls.set(arglistString, records);
  }
  mockFunc(originalObject, originalMethod) {
    let tmp = this;
    this.originalMethod = originalMethod;
    let f = function () {
      let args = arguments;
      let action = tmp.getReturnInfo(f, args);
      if (originalMethod) {
        tmp.recordMethodCall(originalMethod, args);
      }
      if (action) {
        return action.apply(this, args);
      }
    };
    f.container = null || originalObject;
    f.original = originalMethod || null;
    if (originalObject && originalMethod) {
      if (typeof originalMethod !== 'function') {
        throw new Error('Not a function');
      }
      var name = this.findName(originalObject, originalMethod);
      originalObject[name] = f;
      this.recordMockedMethod.set(name, originalMethod);
      f.propName = name;
      f.originalFromPrototype = this.isFunctionFromPrototype(
        f.original,
        originalObject,
        f.propName
      );
    }
    f.mocker = this;
    this.mFunctions.push(f);
    this.extend(f, new ExtendInterface(this));
    return f;
  }
  verify(methodName, argsArray) {
    if (!methodName) {
      throw Error('not a function name');
    }
    let a = this.recordCalls.get(methodName + '(' + argsArray.toString() + ')');
    return new VerificationMode(a ? a : 0);
  }
  mockObject(object) {
    if (!object || typeof object === 'string') {
      throw Error(`this ${object} cannot be mocked`);
    }
    const _this = this;
    let mockedObject = {};
    let keys = Reflect.ownKeys(object);
    keys
      .filter((key) => typeof Reflect.get(object, key) === 'function')
      .forEach((key) => {
        mockedObject[key] = object[key];
        mockedObject[key] = _this.mockFunc(mockedObject, mockedObject[key]);
      });
    return mockedObject;
  }
}
function ifMockedFunction(f) {
  if (
    Object.prototype.toString.call(f) !== '[object Function]' &&
    Object.prototype.toString.call(f) !== '[object AsyncFunction]'
  ) {
    throw Error('not a function');
  }
  if (!f.stub) {
    throw Error('not a mock function');
  }
  return true;
}
function when(f) {
  if (!ifMockedFunction(f)) {
    throw Error('not a mock function');
  }
  return f.stub.bind(f);
}
export { MockKit, when };
{
  "module": {
    "name": "common_test",
    "type": "feature",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ],
    "deliveryWithInstall": true,
    "installationFree": false
  }
}
import SysTestKit from '../kit/SysTestKit';
import fs from '@ohos.file.fs';
import {TAG} from '../../Constant';
const jsCoverageFileName = 'js_coverage.json';
export async function collectCoverageData() {
    if (globalThis.__coverage__ === undefined) {
        console.info(`${TAG} globalThis not have coverage`);
        return;
    }
    const strJson = JSON.stringify(globalThis.__coverage__);
    let testMode = globalThis.__testMode__;
    console.info(`${TAG} coverage data testMode: ${testMode}`);
    let savePath = globalThis.__savePath__;
    console.info(`${TAG} write coverage data to: ${savePath}`);
    let readPath = globalThis.__readPath__;
    console.info(`${TAG} read coverage data in: ${readPath}`);
    if (!testMode || !isCoveragePathValid(savePath)) {
        console.info(`${TAG} run coverage data in call back mode`);
        const strLen = strJson.length;
        const maxLen = 500;
        const maxCount = Math.floor(strLen / maxLen);
        const OHOS_REPORT_COVERAGE_DATA = 'OHOS_REPORT_COVERAGE_DATA:';
        for (let count = 0; count <= maxCount; count++) {
            console.info(`${OHOS_REPORT_COVERAGE_DATA} ${strJson.substring(count * maxLen, (count + 1) * maxLen)}`);
            await SysTestKit.print(`${OHOS_REPORT_COVERAGE_DATA} ${strJson.substring(count * maxLen, (count + 1) * maxLen)}`);
        }
        return;
    }
    console.info(`${TAG} run coverage data in save file mode`);
    if (fs.accessSync(savePath)) {
        fs.unlinkSync(savePath);
    }
    let inputPathDir = savePath.substring(0, savePath.length - jsCoverageFileName.length);
    if (!fs.accessSync(inputPathDir)) {
        console.info(`${TAG} coverage data create dir: ${inputPathDir}`);
        fs.mkdirSync(inputPathDir);
    }
    let file = fs.openSync(savePath, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);
    let writeLen = fs.writeSync(file.fd, strJson, {encoding:'utf-8'});
    console.info(`${TAG} write coverage data success: ${writeLen}`);
    fs.closeSync(file);
    const OHOS_REPORT_COVERAGE_PATH = 'OHOS_REPORT_COVERAGE_PATH:';
    await SysTestKit.print(`${OHOS_REPORT_COVERAGE_PATH} ${readPath}`);
    console.info(`${OHOS_REPORT_COVERAGE_PATH} ${readPath}`);
}
function isCoveragePathValid(inputPath) {
    if (!inputPath) {
        return false;
    }
    if (inputPath.indexOf(jsCoverageFileName) === -1) {
        return false;
    }
    return true;
}
class LogExpectError {
    static getErrorMsg(matcherName, actualValue, expect, originMsg) {
        if (matcherName === 'assertNull') {
            return 'expect not null, actualValue is ' + (actualValue);
        }
        if (matcherName === 'assertTrue') {
            return 'expect not true, actualValue is ' + (actualValue);
        }
        if (matcherName === 'assertFalse') {
            return 'expect not false, actualValue is ' + (actualValue);
        }
        if (matcherName === 'assertEqual') {
            return 'expect not Equal, actualValue is ' + actualValue + ' equals ' + expect;
        }
        if (matcherName === 'assertContain') {
            return 'expect not have, ' + actualValue + ' have ' + expect;
        }
        if (matcherName === 'assertInstanceOf') {
            return 'expect not InstanceOf, ' + actualValue + ' is ' +
            Object.prototype.toString.call(actualValue) + expect;
        }
        if (matcherName === 'assertLarger') {
            return 'expect not Larger, ' +
                (actualValue) + ' is larger than ' + expect;
        }
        if (matcherName === 'assertLargerOrEqual') {
            return 'expect not LargerOrEqual, ' + (actualValue) + ' larger than ' + expect;
        }
        if (matcherName === 'assertLess') {
            return 'expect not Less, ' + (actualValue) + ' less than ' + expect;
        }
        if (matcherName === 'assertLessOrEqual') {
            return 'expect not LessOrEqual, ' + (actualValue) + ' is less than ' + expect;
        }
        if (matcherName === 'assertNaN') {
            return 'expect not NaN, actualValue is ' + (actualValue);
        }
        if (matcherName === 'assertNegUnlimited') {
            return 'expect not NegUnlimited, actualValue is ' + (actualValue);
        }
        if (matcherName === 'assertPosUnlimited') {
            return 'expect not PosUnlimited, actualValue is ' + (actualValue);
        }
        if (matcherName === 'assertUndefined') {
            return 'expect not Undefined, actualValue is ' + (actualValue);
        }
        return originMsg;
    }
}
export default LogExpectError;
class ReportExtend {
    constructor(fileModule) {
        this.id = 'extend';
        this.fileModule = fileModule;
    }
    init(coreContext) {
        this.coreContext = coreContext;
        this.suiteService = this.coreContext.getDefaultService('suite');
    }
    taskStart() {
    }
    handleSpecs(specs, report, suiteReport, testsuite) {
        for (let testcase of specs) {
            report.tests++;
            suiteReport.tests++;
            let caseReport = {
                tag: 'testcase',
                name: testcase.description,
                status: 'run',
                time: '0.0',
                classname: testsuite.description
            };
            if (testcase.error) {
                caseReport.result = false;
                caseReport.children = [{
                    tag: 'error',
                    type: '',
                    message: testcase.error.message
                }];
                report.errors++;
                suiteReport.errors++;
            } else if (testcase.result.failExpects.length > 0) {
                caseReport.result = false;
                let message = '';
                testcase.result.failExpects.forEach(failExpect => {
                    message += failExpect.message || ('expect ' + failExpect.actualValue + ' ' + failExpect.checkFunc + ' ' + (failExpect.expectValue || '')) + ';';
                });
                caseReport.children = [{
                    tag: 'failure',
                    type: '',
                    message: message
                }];
                report.failures++;
                suiteReport.failures++;
            } else {
                caseReport.result = true;
            }
            suiteReport.children.push(caseReport);
        }
    }
    taskDone() {
        const report = {
            tag: 'testsuites',
            name: 'summary_report',
            timestamp: new Date().toDateString(),
            time: '1',
            errors: 0,
            failures: 0,
            tests: 0,
            children: []
        };
        const rootSuite = this.suiteService.rootSuite;
        if (rootSuite && rootSuite.childSuites) {
            for (let testsuite of rootSuite.childSuites) {
                let suiteReport = {
                    tag: 'testsuite',
                    name: testsuite['description'],
                    errors: 0,
                    tests: 0,
                    failures: 0,
                    time: '0.1',
                    children: []
                };
                let specs = testsuite['specs'];
                this.handleSpecs(specs, report, suiteReport, testsuite);
                report.children.push(suiteReport);
            }
        }
        writeXmlReport(report);
    }
}
function writeXmlReport(report) {
    let reportXml = '<?xml version="1.0" encoding="UTF-8"?>\n' + json2xml(report);
    this.fileModule.writeText({
        uri: 'internal://app/report.xml',
        text: reportXml,
        success: function () {
            console.info('call success callback success');
        },
        fail: function (data, code) {
            console.info('call fail callback success:');
        },
        complete: function () {
            console.info('call complete callback success');
        }
    });
}
function handleChild(json, key, hasChildren, childrenStr) {
    if (json[key].length > 0) {
        hasChildren = true;
        for (let child of json[key]) {
            childrenStr += json2xml(child);
        }
    }
}
function json2xml(json) {
    let tagName;
    let hasChildren = false;
    let childrenStr = '';
    let attrStr = '';
    for (let key in json) {
        if (key === 'tag') {
            tagName = json[key];
        } else if (key === 'children') {
            handleChild(json, key, hasChildren, childrenStr);
        } else {
            attrStr += ` ${key}="${json[key]}"`;
        }
    }
    let xml = `<${tagName}${attrStr}`;
    xml += hasChildren ? `>${childrenStr}</${tagName}>` : '/>';
    return xml;
}
export default ReportExtend;
import SysTestKit from '../kit/SysTestKit';
import { collectCoverageData } from '../coverage/coverageCollect';
import { TAG, PrintTag } from '../../Constant';
class OhReport {
  constructor(attr) {
    this.delegator = attr.delegator;
    this.abilityDelegatorArguments = attr.abilityDelegatorArguments;
    this.id = 'report';
    this.index = 0;
    this.duration = 0;
    this.currentThreadName = 'mainThread';
  }
  init(coreContext) {
    this.coreContext = coreContext;
    this.suiteService = this.coreContext.getDefaultService('suite');
    this.specService = this.coreContext.getDefaultService('spec');
    if (SysTestKit.workerPort !== null) {
      this.currentThreadName = SysTestKit.workerPort.name;
    }
  }
  taskStart() {
  }
  async taskDone() {
    let summary = this.suiteService.getSummary();
    if (this.abilityDelegatorArguments !== null) {
      this.taskDoneTime = new Date().getTime();
      const configService = this.coreContext.getDefaultService('config');
      const suiteService = this.coreContext.getDefaultService('suite');
      const specService = this.coreContext.getDefaultService('spec');
      if (configService['coverage'] === 'true') {
        await collectCoverageData();
      }
      let message = '\n' + `${PrintTag.OHOS_REPORT_RESULT}: stream=Tests run: ` + summary.total + ', Failure: ' + summary.failure;
      message += ', Error: ' + summary.error;
      message += ', Pass: ' + summary.pass;
      message += ', Ignore: ' + summary.ignore;
      if (specService.skipSpecNum > 0) {
        message += ', SkipSpec: ' + specService.skipSpecNum;
      }
      message += '\n' + `${PrintTag.OHOS_REPORT_CODE}: ` + (summary.failure > 0 ? -1 : 0) + '\n';
      let isHasError = summary.failure > 0 || summary.error > 0;
      let config = this.coreContext.getDefaultService('config');
      if (config.isBreakOnError() && isHasError) {
        message += '\n' + `${PrintTag.OHOS_REPORT_RESULT}: breakOnError model, Stopping whole test suite if one specific test case failed or error` + '\n';
      }
      message += `${PrintTag.OHOS_REPORT_STATUS}: taskconsuming=` + summary.duration + '\n';
      console.info(`${message}`);
      await SysTestKit.print(message);
    }
    if (SysTestKit.workerPort === null || SysTestKit.workerPort === undefined) {
      console.info(`${TAG}report print success`);
      this.delegator.finishTest('your test finished!!!', 0, () => { });
    } else {
      let sendData = {
        currentThreadName: this.currentThreadName,
        summary: summary
      };
      console.info(`${TAG}, send data to mainThread, ${this.currentThreadName}, ${JSON.stringify(sendData)}`);
      SysTestKit.workerPort.postMessage(sendData);
    }
  }
  incorrectFormat() {
    if (this.coreContext.getDefaultService('config').filterValid.length !== 0) {
      var value = this.coreContext.getDefaultService('config').filterValid;
      var message = 'this param ' + value.join(',') + ' is invalid' + '\n';
      this.delegator.finishTest(message, 0, () => {
      });
    }
  }
  incorrectTestSuiteFormat() {
    if (this.coreContext.getDefaultService('config').filterXdescribe.length !== 0) {
      let value = this.coreContext.getDefaultService('config').filterXdescribe;
      let message = 'xdescribe ' + value.join(',') + ' should not contain it' + '\n';
      this.delegator.finishTest(message, 0, () => {
      });
    }
  }
  async suiteStart() {
    if (this.abilityDelegatorArguments !== null) {
      let specArr = [];
      this.suiteService.getAllChildSuiteNum(this.suiteService.getCurrentRunningSuite(), specArr);
      let message = '\n' + `${PrintTag.OHOS_REPORT_SUM}: ` + specArr.length;
      this.suiteService.setCurrentRunningSuiteDesc(this.suiteService.getRootSuite(), this.suiteService.getCurrentRunningSuite(), '');
      message += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: class=` + this.suiteService.getCurrentRunningSuiteDesc() + '\n';
      if (this.suiteService.currentRunningSuite.isSkip) {
        message += `${PrintTag.OHOS_REPORT_STATUS}: skipReason=` + this.suiteService.currentRunningSuite.skipReason + '\n';
      }
      if (SysTestKit.workerPort !== null) {
        message += `${PrintTag.OHOS_REPORT_STATUS}: currentWorkerName=` + this.currentThreadName;
      }
      console.info(`${message}`);
      await SysTestKit.print(message);
      console.info(`${TAG}${this.suiteService.getCurrentRunningSuite().description} suiteStart print success`);
    }
  }
  async suiteDone() {
    if (this.abilityDelegatorArguments !== null) {
      const currentRunningSuite = this.suiteService.getCurrentRunningSuite();
      this.suiteService.setCurrentRunningSuiteDesc(this.suiteService.getRootSuite(), currentRunningSuite, '');
      let message = '\n' + `${PrintTag.OHOS_REPORT_STATUS}: class=` + this.suiteService.getCurrentRunningSuiteDesc();
      if (this.suiteService.currentRunningSuite.isSkip && this.suiteService.currentRunningSuite.skipReason !== '') {
        message += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: skipReason=` + this.suiteService.currentRunningSuite.skipReason;
      }
      const isPromiseError = currentRunningSuite.isPromiseError;
      if (isPromiseError) {
        message += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: shortMsg=Promise(async, await) in describe is not allowed!`;
      }
      message += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: suiteconsuming=` + currentRunningSuite.duration;
      if (currentRunningSuite.hookError) {
        message += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: ${currentRunningSuite.hookError.message}`;
      }
      message += '\n';
      if (SysTestKit.workerPort !== null) {
        message += `${PrintTag.OHOS_REPORT_STATUS}: currentWorkerName=` + this.currentThreadName;
      }
      console.info(`${message}`);
      await SysTestKit.print(message);
      console.info(`${TAG}${currentRunningSuite.description} suiteDone print success`);
    }
  }
  async specStart() {
    if (this.abilityDelegatorArguments !== null) {
      let message = '\n' + `${PrintTag.OHOS_REPORT_STATUS}: class=` + this.suiteService.getCurrentRunningSuiteDesc();
      message += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: current=` + (++this.index);
      message += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: id=JS`;
      message += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: numtests=` + this.specService.getTestTotal();
      message += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: stream=`;
      message += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: test=` + this.specService.currentRunningSpec.description;
      message += '\n' + `${PrintTag.OHOS_REPORT_STATUS_CODE}: 1` + '\n';
      if (this.specService.currentRunningSpec.isSkip) {
        message += `${PrintTag.OHOS_REPORT_STATUS}: skipReason=` + this.specService.currentRunningSpec.skipReason + '\n';
      }
      if (SysTestKit.workerPort !== null) {
        message += `${PrintTag.OHOS_REPORT_STATUS}: currentWorkerName=` + this.currentThreadName;
      }
      console.info(`${message}`);
      await SysTestKit.print(message);
      console.info(`${TAG}${this.specService.currentRunningSpec.description} specStart start print success`);
    }
  }
  async specDone() {
    if (this.abilityDelegatorArguments !== null) {
      let message = '\n' + `${PrintTag.OHOS_REPORT_STATUS}: class=` + this.suiteService.getCurrentRunningSuiteDesc();
      message += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: current=` + (this.index);
      message += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: id=JS`;
      message += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: numtests=` + this.specService.getTestTotal();
      let messageStack = '';
      let messageCode = '';
      if (this.specService.currentRunningSpec.error) {
        messageStack = `${PrintTag.OHOS_REPORT_STATUS}: stack=` + this.specService.currentRunningSpec.error?.stack?.slice(0, -1);
        messageCode += `${PrintTag.OHOS_REPORT_STATUS}: stream=`;
        messageCode += this.specService.currentRunningSpec.expectMsg !== '' ?
          `message: ${this.specService.currentRunningSpec.expectMsg}, Error in ${this.specService.currentRunningSpec.description}, ${this.specService.currentRunningSpec.error?.message}` :
          `Error in ${this.specService.currentRunningSpec.description}, ${this.specService.currentRunningSpec.error?.message}`;
        messageCode += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: test=` + this.specService.currentRunningSpec.description;
        messageCode += '\n' + `${PrintTag.OHOS_REPORT_STATUS_CODE}: -1` + '\n';
      } else if (this.specService.currentRunningSpec) {
        if (this.specService.currentRunningSpec.fail) {
          messageStack += `${PrintTag.OHOS_REPORT_STATUS}: stack=` + this.specService.currentRunningSpec.fail?.stack?.slice(0, -1);
          messageCode += `${PrintTag.OHOS_REPORT_STATUS}: stream=`;
          messageCode += this.specService.currentRunningSpec.expectMsg !== '' ?
            `message: ${this.specService.currentRunningSpec.expectMsg}, Error in ${this.specService.currentRunningSpec.description}, ${this.specService.currentRunningSpec.fail?.message}` :
            `Error in ${this.specService.currentRunningSpec.description}, ${this.specService.currentRunningSpec.fail?.message}`;
          messageCode += '\n' + `${PrintTag.OHOS_REPORT_STATUS}: test=` + this.specService.currentRunningSpec.description;
          messageCode += '\n' + `${PrintTag.OHOS_REPORT_STATUS_CODE}: -2` + '\n';
        } else {
          messageStack += `${PrintTag.OHOS_REPORT_STATUS}: stream=`;
          messageCode += `${PrintTag.OHOS_REPORT_STATUS}: test=` + this.specService.currentRunningSpec.description;
          messageCode += '\n' + `${PrintTag.OHOS_REPORT_STATUS_CODE}: 0` + '\n';
          messageCode += this.specService.currentRunningSpec.isSkip ? (`${PrintTag.OHOS_REPORT_STATUS}: skipReason=` + this.specService.currentRunningSpec.skipReason + '\n') : '';
        }
      } else {
        messageCode += '\n';
      }
      messageCode += `${PrintTag.OHOS_REPORT_STATUS}: consuming=` + this.specService.currentRunningSpec.duration + '\n';
      if (SysTestKit.workerPort !== null) {
        messageCode += `${PrintTag.OHOS_REPORT_STATUS}: currentWorkerName=` + this.currentThreadName;
      }
      console.info(`${message}`);
      console.info(`\n${messageStack}`);
      console.info(`\n${messageCode}`);
      await SysTestKit.print(message);
      await SysTestKit.print(messageStack);
      await SysTestKit.print(messageCode);
      console.info(`${TAG}${this.specService.currentRunningSpec.description} specDone end print success`);
    }
  }
}
export default OhReport;
export * from './ShowToast'
export * from './BottomPop'
import { StyleConst } from "../common";
import { ScreenUtils, WindowModel,ComponentUtils } from "../utils";
@CustomDialog
@Component
export struct BottomPop {
  controller: CustomDialogController;
  title: ResourceStr = '';
  titlePadding: Padding = { top: $r('app.float.size_16'), bottom: $r('app.float.size_16') }
  titleFontSize: ResourceStr = $r('app.float.size_text_16')
  titleTextColor: ResourceColor = Color.Black
  titleBgColor: ResourceColor = Color.Transparent
  contentBgColor: ResourceColor = Color.Transparent
  bgColor?: ResourceColor = Color.White
  // 软键盘是否显示
  @State keyBoardVisible: boolean = false
  keyboardAvoidMode: KeyboardAvoidMode = KeyboardAvoidMode.DEFAULT
  minHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.3 // 弹窗最低高度
  maxHeight: Length = ScreenUtils.getInstance().getScreenHeightVp() * 0.8 // 弹窗最大高度
  @State dialogMaxHeight: number = 0 // 通过 maxHeight 计算出来的内容的高度
  @Builder
  child() {
  };
  @BuilderParam childBuilderParam: () => void = this.child;
  aboutToAppear(): void {
    if (this.isKeyboardAvoidNone()) {
      this.getKeyBoardVisible()
    }
    this.getTitleHeight()
  }
  // 软键盘是否拉起
  getKeyBoardVisible() {
    WindowModel.getInstance().getKeyBoardVisible((visible) => {
      this.keyBoardVisible = visible
    })
  }
  // 弹窗是否在拉起软键盘时进行自动避让
  isKeyboardAvoidNone() {
    return this.keyboardAvoidMode === KeyboardAvoidMode.NONE // 弹窗不避让软键盘
  }
  getTitleHeight() {
    ComponentUtils.getComponentHeightSync('BottomPop_title', (componentHeight) => {
      const safeBottomHeight = ScreenUtils.getInstance().getSafeBottomHeight() // 底部安全区高度
      // 内容最大高度 = 屏幕80%高度 - title高度 - 底部安全区高度
      this.dialogMaxHeight = Number(this.maxHeight) - componentHeight - safeBottomHeight
    })
  }
  build() {
    Stack({ alignContent: Alignment.TopEnd }) {
      Column() {
        Text(this.title)
          .padding(this.titlePadding)
          .fontColor(this.titleTextColor)
          .fontSize(this.titleFontSize)
          .fontWeight(FontWeight.Medium)
          .textAlign(TextAlign.Center)
          .width(StyleConst.FULL_WIDTH)
          .height($r('app.float.size_50'))
          .backgroundColor(this.titleBgColor)
          .id('BottomPop_title')
          .borderRadius({
            topLeft: $r('app.float.size_16'),
            topRight: $r('app.float.size_16')
          })
        Column() {
          this.childBuilderParam()
        }
        .backgroundColor(this.contentBgColor)
        .constraintSize({
          maxHeight: this.dialogMaxHeight,
        })
      }
      .padding({
        bottom: ScreenUtils.getInstance().getSafeBottomHeight(), // 设置padding避开底部安全区
      })
      .width(StyleConst.FULL_WIDTH)
      .backgroundColor(this.bgColor)
      .borderRadius({
        topLeft: $r('app.float.size_16'),
        topRight: $r('app.float.size_16')
      })
      .constraintSize({
        maxHeight: this.maxHeight,
        minHeight: this.minHeight
      })
      Image($r("app.media.common_bottom_sheet_close"))
        .size({ width: $r('app.float.size_20'), height: $r('app.float.size_20') })
        .margin({ top: $r('app.float.size_16'), right: $r('app.float.size_16') })
        .responseRegion({
          x: '-25%',
          y: '-25%',
          width: '150%',
          height: '150%'
        })
        .onClick(() => {
          this.controller.close();
        })
    }
  }
}
import { promptAction } from '@kit.ArkUI'
//轻提示工具类
export const toast = (hintContent: string | ResourceStr, alignment: Alignment = Alignment.Center): void => {
  promptAction.showToast({ message: hintContent, alignment: alignment })
}
import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    })
  })
}
import abilityTest from './Ability.test';
export default function testsuite() {
  abilityTest();
}
export class UserInfoData {
  id?: number
  username?: string
  nickname?: string
  balance?: number
  avatarUrl?: string
}
export class RoutePageConst {
  static readonly AppHomePage = "home/HomePage" //App-充电页面
  static readonly LoginPage = "login/LoginPage" //App-登录页面
}
import http from '@ohos.net.http';
import { commonStorage } from '../../../../Index';
import { StorageConst } from '../manager';
import { ResponseResult } from './response';
export function requestApiCall(url: string,
  method: http.RequestMethod,
  data?: Record<string, number | boolean | string | Object | undefined>,
  headers?: Record<string, string>,
): Promise<ResponseResult> {
  const BASE_URL = 'https://charging.lusson.xyz'
  const httpRequest = http.createHttp();
  const defaultHeaders: Record<string, string> = {
    'Content-Type': 'application/json',
  }
  const token = commonStorage.getStringValueSync(StorageConst.TOKEN, "")
  if (token) {
    defaultHeaders['Authorization'] = `Bearer ${token}`
  }
  const finalHeaders: Record<string, string> = {};
  Object.keys(defaultHeaders).forEach(key => {
    finalHeaders[key] = defaultHeaders[key];
  });
  if (headers) {
    Object.keys(headers).forEach(key => {
      finalHeaders[key] = String(headers[key]);
    });
  }
  let responseResult = httpRequest.request(BASE_URL + url, {
    method: method,
    extraData: data ? JSON.stringify(data) : undefined,
    header: finalHeaders
  });
  let response: ResponseResult = new ResponseResult();
  return responseResult.then((value: http.HttpResponse) => {
    if (value.responseCode === 200) {
      let res: ResponseResult = JSON.parse(`${value.result}`);
      response.data = res.data;
      response.code = res.code;
      response.message = res.message;
    } else {
      response.message = '请求错误';
      response.code = 400;
    }
    return response;
  }).catch((error: Error) => {
    console.log('lucy++ error', JSON.stringify(error))
    response.message = '请求错误';
    response.code = 400;
    return response;
  })
}
export class StyleConst {
  // 宽高
  static readonly FULL_WIDTH: string = '100%';
  static readonly FULL_HEIGHT: string = '100%';
  static readonly PERCENT_10 = '10%'
  static readonly PERCENT_15 = '15%'
  static readonly PERCENT_17 = '17%'
  static readonly PERCENT_20 = '20%'
  static readonly PERCENT_25 = '25%'
  static readonly PERCENT_30 = '30%'
  static readonly PERCENT_35 = '35%'
  static readonly PERCENT_40 = '40%'
  static readonly PERCENT_45 = '45%'
  static readonly PERCENT_50 = '50%'
  static readonly PERCENT_60 = '60%'
  static readonly PERCENT_65 = '65%'
  static readonly PERCENT_70 = '70%'
  static readonly PERCENT_72 = '72%'
  static readonly PERCENT_75 = '75%'
  static readonly PERCENT_80 = '80%'
  static readonly PERCENT_85 = '85%'
  static readonly PERCENT_90 = '90%'
  static readonly PERCENT_95 = '95%'
  static readonly PERCENT_100 = '100%'
}
import { StyleConst } from "../../../../Index"
@Component
export struct BottomLoadingBuilder {
  @Prop haveNextPage: boolean
  @Prop loading: boolean
  @Prop dataLength: number
  build() {
    if (this.haveNextPage && this.loading) {
      Row() {
        LoadingProgress()
          .width($r('app.float.size_30'))
          .height($r('app.float.size_30'))
          .margin({ right: $r('app.float.size_10') })
        Text($r('app.string.loading'))
          .fontSize($r('app.float.size_text_14'))
          .fontColor($r('app.color.color_666'))
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_60'))
      .justifyContent(FlexAlign.Center)
    } else if (!this.haveNextPage && this.dataLength > 0) {
      Text($r('app.string.there_is_no_more_data'))
        .fontSize($r('app.float.size_text_14'))
        .fontColor($r('app.color.color_999'))
        .textAlign(TextAlign.Center)
        .width(StyleConst.FULL_WIDTH)
        .margin({ top: $r('app.float.size_10'), bottom: $r('app.float.size_20') })
    }
  }
}
export class CommonDataSource<T> implements IDataSource {
  private listeners: DataChangeListener[] = [];
  protected items: T[] = []
  public totalCount(): number {
    return this.items.length
  }
  public getData(index: number): T | void {
    return this.items[index]
  };
  public getList(): T[] {
    return this.items
  }
  public clearData() {
    this.items = [];
    this.notifyDataReload()
  }
  public resetData(data: T | T[]) {
    this.items = [];
    if (Array.isArray(data)) {
      this.items.push(...data);
    } else {
      this.items.push(data);
    }
    this.notifyDataReload()
  }
  public setDataArray(data: T[]) {
    this.items = data
    this.notifyDataReload()
  }
  // 向列表追加数据
  public pushData(data: T | T[]): void {
    let fromIndex = this.items.length
    if (Array.isArray(data)) {
      this.items.push(...data)
    } else {
      this.items.push(data)
    }
    this.notifyDatasetAdd(fromIndex, this.items.length - fromIndex)
  }
  public changeItem(index: number) {
    this.notifyDataChange(index)
  }
  public deleteData(index: number): void {
    this.items.splice(index, 1);
    this.notifyDataDelete(index);
  }
  registerDataChangeListener(listener: DataChangeListener): void {
    if (this.listeners.indexOf(listener) < 0) {
      this.listeners.push(listener);
    }
  }
  unregisterDataChangeListener(listener: DataChangeListener): void {
    const pos = this.listeners.indexOf(listener);
    if (pos >= 0) {
      this.listeners.splice(pos, 1);
    }
  }
  notifyDataReload(): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.RELOAD }]);
    });
  }
  notifyDatasetAdd(insertIndex: number, addCount: number): void {
    this.listeners.forEach(listener => {
      listener.onDatasetChange([{ type: DataOperationType.ADD, index: insertIndex, count: addCount }]);
    })
  }
  notifyDataChange(changeIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.CHANGE, index: changeIndex }]);
    });
  }
  notifyDataDelete(deleteIndex: number): void {
    this.listeners.forEach((listener: DataChangeListener) => {
      listener.onDatasetChange([{ type: DataOperationType.DELETE, index: deleteIndex }]);
    });
  }
}
export * from './StorageConst'
export * from './RoutePageConst'
export * from './UserCenterConst'
export { requestApiCall } from './httpUtils'
export * from './Apis'
export class StorageConst {
  static readonly TOKEN = 'token'
  static readonly USER_INFO = 'userInfo'
  // 屏幕宽高
  static readonly SCREEN_WIDTH_VP = 'screenWidthVp'
  static readonly SCREEN_HEIGHT_VP = 'screenHeightVp'
  // 折叠屏显示模式
  static readonly FOLD_DISPLAY_MODE = 'foldDisplayMode'
  static readonly SEARCH_HISTORY = "search_history"
}
export class Apis {
  //注册
  static readonly USER_REGISTER = "/saas-api/tenant/register"
  //获取token-登录
  static readonly USER_LOGIN = "/saas-api/user/login"
  //获取租户ID
  static readonly USER_TENANT = "/saas-api/tenant/selects"
  //获取用户信息
  static readonly USER_INFO = "/wx-api/me/info"
  //获取充电站
  static readonly CHARGE_STATION_LIST = "/wx-api/station/list"
  //获取充电桩
  static readonly CHARGE_PILE_LIST = "/wx-api/pile/list"
  //获取充电价格
  static readonly CHARGE_PRICE = "/wx-api/price/list"
  //开始充电
  static readonly CHARGE_START = "/wx-api/charge/start"
  //结束充电
  static readonly CHARGE_STOP = "/wx-api/charge/stop"
  //获取充电订单列表
  static readonly CHARGE_ORDER_LIST = "/wx-api/charge/list"
}
import { ScreenUtils, StyleConst } from "../../../../Index"
import { router } from "@kit.ArkUI"
@Component
export struct TbsTitleBar {
  @Prop title: ResourceStr = ''
  @Prop showBackIcon: boolean = false
  build() {
    Column() {
      Blank().height(ScreenUtils.getInstance().getStatusBarHeight())
      RelativeContainer() {
        Text(this.title)
          .fontColor(Color.White)
          .fontSize($r('app.float.size_text_20'))
          .textAlign(TextAlign.Center)
          .maxLines(1)
          .id('text')
          .alignRules({
            center: { anchor: "__container__", align: VerticalAlign.Center },
            middle: { anchor: "__container__", align: HorizontalAlign.Center }
          })
        if (this.showBackIcon) {
          Image($r('app.media.back'))
            .width($r('app.float.size_45'))
            .id('image')
            .alignRules({
              left: { anchor: "__container__", align: HorizontalAlign.Start }
            })
            .onClick(() => {
              router.back()
            })
        }
      }
      .width(StyleConst.FULL_WIDTH)
      .height($r('app.float.size_45'))
    }
    .width(StyleConst.FULL_WIDTH)
    .backgroundColor($r('app.color.color_0aa671'))
  }
}
export class ResponseResult {
  code?: number
  message?: string
  data?: object
}
import { StorageConst } from "./StorageConst"
import { UserInfoData } from "../model/UserInfoModel"
import { commonStorage } from "../utils"
class UserCenterConst {
  userInfo: UserInfoData | null = null
  getUserInfoData(): UserInfoData | null {
    if (this.userInfo) {
      return this.userInfo;
    }
    const value = commonStorage.getStringValueSync(StorageConst.USER_INFO, '');
    // 如果已经是对象，直接使用
    if (value && typeof value === 'object') {
      this.userInfo = value as UserInfoData;
      return this.userInfo;
    }
    // 如果是字符串，尝试解析
    if (typeof value === 'string' && value) {
      const p = JsonParse<UserInfoData>(value);
      if (p) {
        this.userInfo = p;
        return this.userInfo;
      }
    }
    return null;
  }
}
function JsonParse<T>(text: string): T | undefined {
  try {
    return JSON.parse(text);
  } catch (e) {
    console.error(`JSON解析错误: ${text}, 错误信息: ${e}`);
    return undefined;
  }
}
export default new UserCenterConst()
export * from './StyleConst'
export * from './TbsTitleBar'
export * from './BottomLoadingBuilder'
{
  "module": {
    "name": "common",
    "type": "har",
    "deviceTypes": [
      "default",
      "tablet",
      "2in1"
    ]
  }
}
import display from '@ohos.display';
import { GlobalContext } from '.';
import window from '@ohos.window';
import common from '@ohos.app.ability.common';
import { StorageConst } from '../manager';
export class ScreenUtils {
  private static instance: ScreenUtils;
  setWindow(windowInfo: window.Window) {
    // 获取窗口属性
    const properties = windowInfo.getWindowProperties();
    this.setScreen(properties.windowRect.width, properties.windowRect.height)
    windowInfo.on("windowSizeChange", (size: Size) => {
      this.setScreen(size.width, size.height)
    })
  }
  private constructor() {
    this.defaultDisplay = display.getDefaultDisplaySync()
    this.defaultDisplay.getCutoutInfo((e, data) => {
      this.cutoutInfo = data
    })
    let callback: Callback<display.FoldDisplayMode> = (data: display.FoldDisplayMode) => {
      this.setFoldDisplayMode(data)
    };
    display.on("foldDisplayModeChange", callback)
  }
  private setScreen(width: number, height: number) {
    AppStorage.setOrCreate(StorageConst.SCREEN_WIDTH_VP, px2vp(width));
    AppStorage.setOrCreate(StorageConst.SCREEN_HEIGHT_VP, px2vp(height));
  }
  private setFoldDisplayMode(data: display.FoldDisplayMode) {
    AppStorage.setOrCreate(StorageConst.FOLD_DISPLAY_MODE, data);
  }
  public static getInstance(): ScreenUtils {
    if (!ScreenUtils.instance) {
      ScreenUtils.instance = new ScreenUtils();
    }
    return ScreenUtils.instance;
  }
  //屏幕数据
  private defaultDisplay: display.Display | null = null
  //挖孔屏状态栏区域
  private cutoutInfo: display.CutoutInfo | null = null
  getDisplay(): display.Display | null {
    return this.defaultDisplay
  }
  getScreenWidthPx(): number {
    return this.defaultDisplay?.width ?? -1
  }
  getScreenHeightPx(): number {
    return this.defaultDisplay?.height ?? -1
  }
  getScreenContentHeightPX(): number {
    return vp2px(this.getScreenHeightVp() - this.getStatusBarHeight())
  }
  getScreenContentHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenHeightVp(): number {
    return px2vp(this.getScreenHeightPx())
  }
  getScreenWidthVp(): number {
    return px2vp(this.getScreenWidthPx())
  }
  /**
   * 获取刘海屏状态栏最大的区域
   * @returns
   */
  getStatusBarHeight(): number {
    const statusBar = GlobalContext.getContext().getObject(GlobalContext.STATUS_BAR_HEIGHT) as number;
    return px2vp(statusBar)
  }
  // 底部安全距离
  getSafeBottomHeight() {
    const navigation = GlobalContext.getContext().getObject(GlobalContext.NAVIGATION_HEIGHT) as number;
    return px2vp(navigation)
  }
  /**
   * 获取底部导航栏的高度
   * @returns
   */
  async getBottomNavBarHeight(context: common.BaseContext): Promise<number> {
    const win = await window.getLastWindow(context)
    return px2vp(win.getWindowAvoidArea(window.AvoidAreaType.TYPE_NAVIGATION_INDICATOR).bottomRect.height)
  }
  async getStatusBarColor(): Promise<string> {
    const currentWindow = await window.getLastWindow(getContext(this))
    return currentWindow.getWindowSystemBarProperties().statusBarColor ?? '#000000'
  }
  // 改变状态栏文字颜色
  updateStatusBarColor(isBlack: boolean) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      currentWindow.setWindowSystemBarProperties({ statusBarContentColor: isBlack ? '#000000' : '#ffffff' })
    })
  }
  // 检查设备是否可折叠
  isFoldable() {
    return display.isFoldable()
  }
  // 设备当前折叠状态是否为为完全展开
  isFoldExpanded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_EXPANDED
  }
  // 设备当前折叠状态是否为为半折叠
  isFoldHalfFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_HALF_FOLDED
  }
  // 设备当前折叠状态为是否为折叠
  isFoldFolded() {
    return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_FOLDED
  }
}
// 与EntryAbility交互，获取ability当前的数据
export class GlobalContext {
  static readonly CONTEXT = 'context';
  static readonly WANT = 'want';
  //状态栏高度
  static readonly STATUS_BAR_HEIGHT = 'statusBarHeight';
  //导航栏高度
  static readonly NAVIGATION_HEIGHT = 'navigationHeight';
  private constructor() { }
  private static instance: GlobalContext;
  private _objects = new Map<string, Object>();
  public static getContext(): GlobalContext {
    if (!GlobalContext.instance) {
      GlobalContext.instance = new GlobalContext();
    }
    return GlobalContext.instance;
  }
  getObject(value: string): Object | undefined {
    return this._objects.get(value);
  }
  setObject(key: string, objectClass: Object): void {
    this._objects.set(key, objectClass);
  }
}
import isPromiseLike from './isPromiseLike';
function assertPromiseIsResolvedWith(actualPromise, expectedValue) {
    if (!isPromiseLike(actualPromise)) {
        return Promise.reject().then(function () {
        }, function () {
            return {pass: false, message: 'Expected not be called on a promise.'};
        });
    }
    function tips(passed) {
        return (
            'Expected a promise ' + (passed ? 'not ' : '') +
            'to be resolved with ' + JSON.stringify(expectedValue[0]));
    }
    return actualPromise.then(
        function (got) {
            if (JSON.stringify(got) == JSON.stringify(expectedValue[0])) {
                return {
                    pass: true,
                    message: 'actualValue was resolved with ' + JSON.stringify(got) + '.'
                };
            }
            return {
                pass: false,
                message: tips(false) + ' but it was resolved with ' +
                    JSON.stringify(got) + '.'
            };
        },
        function (rej) {
            return {
                pass: false,
                message: tips(false) + ' but it was rejected with ' + JSON.stringify(rej) + '.'
            };
        }
    );
}
export default assertPromiseIsResolvedWith;
import isPromiseLike from './isPromiseLike';
function assertPromiseIsPending(actualPromise) {
    if (!isPromiseLike(actualPromise)) {
        return Promise.reject().then(function () {
        }, function () {
            return {pass: false, message: 'Expected not be called on a promise.'};
        });
    }
    const helper = {};
    return Promise.race([actualPromise, Promise.resolve(helper)]).then(
        function (got) {
            return helper === got ? {pass: true, message: 'actualValue is isPending'}
                : {
                    pass: false,
                    message: 'expect isPending, actualValue is resolve'
                };
        },
        function () {
            return {
                pass: false
                , message: 'expect isPending, actualValue is reject'
            };
        });
}
export default assertPromiseIsPending;
//封装一个函数：简化时间格式
export const formatDate = (dateStr:string)=>{
  const date = new Date(dateStr)
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}
import isPromiseLike from './isPromiseLike';
function assertPromiseIsRejectedWith(actualPromise, expectedValue) {
    if (!isPromiseLike(actualPromise)) {
        return Promise.reject().then(function () {
        }, function () {
            return {pass: false, message: 'Expected not be called on a promise.'};
        });
    }
    function tips(passed) {
        return ('Expected a promise ' + (passed ? 'not ' : '') +
            'to be rejected with ' + JSON.stringify(expectedValue[0]));
    }
    return actualPromise.then(
        function (got) {
            return {
                pass: false,
                message: tips(false) + ' but actualValue is resolve'
            };
        },
        function (actualValue) {
            if (JSON.stringify(actualValue) == JSON.stringify(expectedValue[0])) {
                return {
                    pass: true,
                    message: 'actualValue was rejected with ' + JSON.stringify(actualValue) + '.'
                };
            } else {
                return {
                    pass: false,
                    message: tips(false) + ' but it was rejected with ' + JSON.stringify(actualValue) + '.'
                };
            }
        }
    );
}
export default assertPromiseIsRejectedWith;
function assertUndefined(actualValue) {
    return {
        pass: undefined === (actualValue),
        message: 'expect Undefined, actualValue is ' + (actualValue)
    };
}
export default assertUndefined;
import measure from '@ohos.measure'
export class TextUtil{
  static getTextWidth(textContent: string,
    fontSize: number | string | Resource = $r('app.float.size_text_14'), maxLines: number = 1,
    weight: FontWeight | number = FontWeight.Regular): number {
    if (!textContent || textContent.length === 0) {
      return 0
    }
    const width: number = measure.measureText({
      textContent: textContent,
      fontSize: fontSize,
      fontWeight: weight,
      maxLines: maxLines
    })
    return px2vp(width)
  }
}
{"hspPkgNames":[],"compileEntries":["&entry/src/main/ets/entryability/EntryAbility&","&entry/src/main/ets/entrybackupability/EntryBackupAbility&","&entry/src/main/ets/home/HomePage&","&entry/src/main/ets/login/LoginPage&","&entry/src/main/ets/register/RegisterPage&"],"updateVersionInfo":{}}
export * from './WindowModel'
export * from './GlobalContext'
export * from './TextUtil'
export { ScreenUtils } from './ScreenUtil';
export { initDataPreference, commonStorage } from './StorageUtils'
export * from './ComponentUtils'
export { formatDate } from './formatDate'
import { geoLocationManager } from "@kit.LocationKit";
import { PermissionConst } from "./PermissionConst";
import { permissionManager } from "./PermissionManager";
class LocationManager {
  async requestPermissionAgain() {
    return await permissionManager.requestPermissionAgain(PermissionConst.locationPermissions, getContext(this))
  }
  // 检查是否有定位权限，外部可直接调用，异常时返回false
  async checkLocationPermissions(): Promise<boolean> {
    try {
      return await permissionManager.checkPermissions(PermissionConst.locationPermissions) &&
      geoLocationManager.isLocationEnabled();
    } catch (e) {
      console.log(`lucy== hasLocationPermissions, ${JSON.stringify(e)}`)
      return false;
    }
  }
  // 校验并申请权限，如果申请权限返回false，则抛出异常，使用者需要使用catch接收。
  async checkAndApplyPermissions(context: Context): Promise<boolean> {
    let isGranted = await this.checkLocationPermissions();
    if (isGranted) {
      return true;
    }
    try {
      let userGranted = await permissionManager.reqPermissionsFromUser(PermissionConst.locationPermissions, context);
      if (userGranted) {
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }
}
export const locationManager = new LocationManager()
import { Permissions } from '@kit.AbilityKit';
export class PermissionConst {
  static readonly locationPermissions: Array<Permissions> = [
    'ohos.permission.APPROXIMATELY_LOCATION',
    'ohos.permission.LOCATION',
  ];
  static readonly mediaRWPermissions: Array<Permissions> = [
    'ohos.permission.READ_MEDIA',
    'ohos.permission.WRITE_MEDIA'
  ];
  static readonly imageVideoReadPermission: Permissions = 'ohos.permission.READ_IMAGEVIDEO';
  static readonly imageVideoWritePermission: Permissions = 'ohos.permission.WRITE_IMAGEVIDEO';
  static readonly cameraPermission: Permissions = 'ohos.permission.CAMERA';
  // 获取OAID
  static readonly oaIdPermission: Permissions = 'ohos.permission.APP_TRACKING_CONSENT';
}
export * from './LocationManager';
export * from './ThirdAppManager'
import { abilityAccessCtrl, PermissionRequestResult, Permissions } from "@kit.AbilityKit";
import { BusinessError } from "@kit.BasicServicesKit";
import { appBundleManager } from "./AppBundleManager";
class PermissionManager{
  atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
  // 每次访问受目标权限保护的接口之前，都需要使用requestPermissionsFromUser()接口请求相应的权限。
  // 权限组：当应用请求权限时，同一个权限组的权限将会在一个弹窗内一起请求用户授权。用户点击同意，即同意了整个权限组。
  // 如定位权限组：['ohos.permission.APPROXIMATELY_LOCATION', 'ohos.permission.LOCATION']
  async checkPermissions(permissions: Array<Permissions>): Promise<boolean> {
    console.log(`check permission ${permissions}`);
    try {
      let grantStatusArray: abilityAccessCtrl.GrantStatus[] = [];
      for (let i = 0; i < permissions.length; i++) {
        grantStatusArray[i] = await this.checkPermissionInner(permissions[i]);
      }
      console.log(`checkPermissions: ${permissions}, grantStatus ${grantStatusArray} `);
      // todo 暂定全同意才算同意
      const denied = grantStatusArray.indexOf(abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) > -1;
      return !denied;
    } catch (e) {
      return Promise.reject(e);
    }
  }
  private async checkPermissionInner(permission: Permissions): Promise<abilityAccessCtrl.GrantStatus> {
    let grantStatus: abilityAccessCtrl.GrantStatus = abilityAccessCtrl.GrantStatus.PERMISSION_DENIED;
    // 校验应用是否被授予权限
    try {
      grantStatus = await this.atManager.checkAccessToken(appBundleManager.getTokenId(), permission);
    } catch (error) {
      const err: BusinessError = error as BusinessError;
      console.log(`Failed to check access token. Code is ${err.code}, message is ${err.message}`);
      return Promise.reject(`checkPermissionInner: checkAccessToken error: ${JSON.stringify(error)}`,);
    }
    return grantStatus;
  }
  async reqPermissionsFromUser(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
    // requestPermissionsFromUser会判断权限的授权状态来决定是否唤起弹窗
    try {
      let result: PermissionRequestResult = await atManager.requestPermissionsFromUser(context, permissions);
      let grantStatus: Array<number> = result.authResults;
      for (let i = 0; i < grantStatus.length; i++) {
        if (grantStatus[i] === 0) {
          // 用户授权，可以继续访问目标操作
          console.log(`reqPermissionsFromUser: ${permissions[i]} is granted`);
        } else {
          console.log(`reqPermissionsFromUser: ${permissions[i]} is denied`);
          return false;
        }
      }
      return true;
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
  //被拒绝后，再次点击全权限申请使用该方法
  async requestPermissionAgain(permissions: Array<Permissions>, context: Context): Promise<boolean> {
    try {
      const result = await this.atManager.requestPermissionOnSetting(context, permissions)
      return result.every((status) => {
        return status === abilityAccessCtrl.GrantStatus.PERMISSION_GRANTED
      })
    } catch (e) {
      console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
      return Promise.reject(e);
    }
  }
}
let permissionManager = new PermissionManager();
export { permissionManager };
{"resolveConflictMode":false,"depName2DepInfo":{"@tbs/common":{"pkgRootPath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/common","pkgName":"@tbs/common","pkgVersion":"1.0.0"},"@tbs/charge":{"pkgRootPath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/feature/charge","pkgName":"@tbs/charge","pkgVersion":"1.0.0"},"@tbs/mine":{"pkgRootPath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/feature/mine","pkgName":"@tbs/mine","pkgVersion":"1.0.0"},"@tbs/scan":{"pkgRootPath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/feature/scan","pkgName":"@tbs/scan","pkgVersion":"1.0.0"},"@ohos/hypium":{"pkgRootPath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/oh_modules/.ohpm/@ohos+hypium@1.0.21/oh_modules/@ohos/hypium","pkgName":"@ohos/hypium","pkgVersion":"1.0.21"},"@ohos/hamock":{"pkgRootPath":"/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/oh_modules/.ohpm/@ohos+hamock@1.0.0/oh_modules/@ohos/hamock","pkgName":"@ohos/hamock","pkgVersion":"1.0.0"}}}
import { window } from "@kit.ArkUI";
import { BusinessError } from "@kit.BasicServicesKit";
export class WindowModel {
  private constructor() {
  }
  /**
   * 默认样式
   */
  private readonly DEFAULT: window.SystemBarProperties = {
    statusBarColor: '#00000000',
    navigationBarColor: '#00000000',
    // 以下两个属性从API Version 8开始支持
    statusBarContentColor: '#000000',
    navigationBarContentColor: '#00000000'
  };
  /**
   * WindowModel 单例
   */
  private static instance?: WindowModel;
  /**
   * 获取WindowModel单例实例
   * @returns {WindowModel} WindowModel
   */
  static getInstance(): WindowModel {
    if (!WindowModel.instance) {
      WindowModel.instance = new WindowModel();
    }
    return WindowModel.instance;
  }
  /**
   * 缓存的当前WindowStage实例
   */
  private windowStage?: window.WindowStage;
  /**
   * 缓存windowStage
   * @param windowStage 当前WindowStage实例
   * @returns {void}
   */
  setWindowStage(windowStage: window.WindowStage): void {
    this.windowStage = windowStage;
  }
  getWindowStage(): window.WindowStage | undefined {
    return this.windowStage
  }
  /**
   * 当前主窗口是否开启沉浸模式
   * @param enable 是否开启
   * @returns {void}
   */
  setMainWindowImmersive(enable: boolean, properties?: window.SystemBarProperties): void {
    if (this.windowStage === undefined) {
      console.error('windowStage is undefined.');
      return;
    }
    // 1.获取应用主窗口。
    let windowClass: window.Window | null = null;
    this.windowStage.getMainWindow((err: BusinessError, data) => {
      let errCode: number = err.code;
      if (errCode) {
        console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));
        return;
      }
      windowClass = data;
      console.info('Succeeded in obtaining the main window data.');
      // 2.实现沉浸式效果。方式二：设置窗口为全屏布局，配合设置导航栏、状态栏的透明度、背景/文字颜色及高亮图标等属性，与主窗口显示保持协调一致。
      windowClass.setWindowLayoutFullScreen(enable, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the window layout to full-screen mode.');
      });
      const p = properties ? properties : this.DEFAULT
      windowClass.setWindowSystemBarProperties(p, (err: BusinessError) => {
        let errCode: number = err.code;
        if (errCode) {
          console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));
          return;
        }
        console.info('Succeeded in setting the system bar properties.');
      });
    })
  }
  /**
   * 软键盘是否显示/隐藏
   * @param callback
   */
  getKeyBoardVisible(callback: (visible: boolean) => void) {
    window.getLastWindow(getContext(this)).then(currentWindow => {
      // 监听软键盘的隐藏和显示
      currentWindow.on('avoidAreaChange', data => {
        if (data.type == window.AvoidAreaType.TYPE_KEYBOARD) {
          const keyBoardHeight = px2vp(data.area.bottomRect.height);
          if (keyBoardHeight > 0) {
            callback(true)
          } else {
            callback(false)
          }
        }
      })
    })
  }
}
export { ScanPage } from "@normalized:N&&&@tbs/scan/src/main/ets/page/ScanPage&1.0.0";
import assertNull from './assertNull';
import assertClose from './assertClose';
import assertContain from './assertContain';
import assertLess from './assertLess';
import assertLarger from './assertLarger';
import assertFail from './assertFail';
import assertUndefined from './assertUndefined';
import assertFalse from './assertFalse';
import assertInstanceOf from './assertInstanceOf';
import assertThrowError from './assertThrowError';
import assertLargerOrEqual from './assertLargerOrEqual';
import assertLessOrEqual from './assertLessOrEqual';
import assertNaN from './assertNaN';
import assertNegUnlimited from './assertNegUnlimited';
import assertPosUnlimited from './assertPosUnlimited';
import assertDeepEquals from './deepEquals/assertDeepEquals';
import assertPromiseIsPending from './assertPromiseIsPending';
import assertPromiseIsRejected from './assertPromiseIsRejected';
import assertPromiseIsRejectedWith from './assertPromiseIsRejectedWith';
import assertPromiseIsRejectedWithError from './assertPromiseIsRejectedWithError';
import assertPromiseIsResolved from './assertPromiseIsResolved';
import assertPromiseIsResolvedWith from './assertPromiseIsResolvedWith';
class ExpectExtend {
    constructor(attr) {
        this.id = attr.id;
        this.matchers = {};
    }
    extendsMatchers() {
        this.matchers.assertNull = assertNull;
        this.matchers.assertClose = assertClose;
        this.matchers.assertContain = assertContain;
        this.matchers.assertLess = assertLess;
        this.matchers.assertLarger = assertLarger;
        this.matchers.assertFail = assertFail;
        this.matchers.assertUndefined = assertUndefined;
        this.matchers.assertFalse = assertFalse;
        this.matchers.assertInstanceOf = assertInstanceOf;
        this.matchers.assertThrowError = assertThrowError;
        this.matchers.assertLargerOrEqual = assertLargerOrEqual;
        this.matchers.assertLessOrEqual = assertLessOrEqual;
        this.matchers.assertNaN = assertNaN;
        this.matchers.assertNegUnlimited = assertNegUnlimited;
        this.matchers.assertPosUnlimited = assertPosUnlimited;
        this.matchers.assertDeepEquals = assertDeepEquals;
        this.matchers.assertPromiseIsPending = assertPromiseIsPending;
        this.matchers.assertPromiseIsRejected = assertPromiseIsRejected;
        this.matchers.assertPromiseIsRejectedWith = assertPromiseIsRejectedWith;
        this.matchers.assertPromiseIsRejectedWithError = assertPromiseIsRejectedWithError;
        this.matchers.assertPromiseIsResolved = assertPromiseIsResolved;
        this.matchers.assertPromiseIsResolvedWith = assertPromiseIsResolvedWith;
    }
    init(coreContext) {
        this.coreContext = coreContext;
        this.extendsMatchers();
        const expectService = this.coreContext.getDefaultService('expect');
        expectService.addMatchers(this.matchers);
    }
    apis() {
        return {
            'expect': function (actualValue) {
                return this.coreContext.getDefaultService('expect').expect(actualValue);
            }
        };
    }
}
export default ExpectExtend;
function assertNull(actualValue) {
    return {
        pass: (actualValue) === null,
        message: 'expect null, actualValue is ' + (actualValue)
    };
}
export default assertNull;
function assertFalse(actualValue) {
    return {
        pass: (actualValue) === false,
        message: 'expect false, actualValue is ' + actualValue
    };
}
export default assertFalse;
function assertLarger(actualValue, expected) {
    return {
        pass: (actualValue) > expected[0],
        message: (actualValue) + ' is not larger than ' + expected[0]
    };
}
export default assertLarger;
import isPromiseLike from './isPromiseLike';
function assertPromiseIsRejected(actualPromise) {
    if (!isPromiseLike(actualPromise)) {
        return Promise.reject().then(function () {
        }, function () {
            return {pass: false, message: 'Expected not be called on a promise.'};
        });
    }
    return actualPromise.then(
        function (got) {
            return {
                pass: false,
                message: 'expect isRejected, but actualValue is resolve'
            };
        },
        function () {
            return {pass: true, message: 'actualValue is isRejected'};
        }
    );
}
export default assertPromiseIsRejected;
function assertContain(actualValue, expect) {
    let result = false;
    if (Object.prototype.toString.call(actualValue).indexOf('Array')) {
        for (let i in actualValue) {
            if (actualValue[i] == expect[0]) {
                result = true;
            }
        }
    }
    let type = Object.prototype.toString.call(actualValue);
    if (type === '[object String]') {
        result = actualValue.indexOf(expect[0]) >= 0;
    }
    return {
        pass: result,
        message: 'expect false, ' + actualValue + ' do not have  ' + expect[0]
    };
}
export default assertContain;
import isPromiseLike from './isPromiseLike';
function assertPromiseIsRejectedWithError(actualPromise, expectedValue) {
    if (!isPromiseLike(actualPromise)) {
        return Promise.reject().then(function () {
        }, function () {
            return {pass: false, message: 'Expected not be called on a promise.'};
        });
    }
    return actualPromise.then(
        function (got) {
            return {
                pass: false,
                message: 'Expected a promise to be rejected but actualValue is resolve'
            };
        },
        function (actualValue) {
            return matchError(actualValue, expectedValue);
        }
    );
}
function matchError(actualValue, expectedValue) {
    if (expectedValue.length == 1 && typeof expectedValue[0] === 'function') {
        if (expectedValue[0].name === actualValue.__proto__.name) {
            return {pass: true, message: 'actual error type is ' + actualValue.name + '.'};
        }
        return {pass: false, message: `except error type is ${expectedValue[0].name},but actual is ${actualValue.name}.`};
    }
    if (expectedValue.length == 1 && typeof expectedValue[0] === 'string') {
        if (expectedValue[0] === actualValue.message) {
            return {pass: true, message: `actual error message is ${actualValue.message}.`};
        }
        return {pass: false, message: `except error message ${expectedValue[0]},but actual is ${actualValue.message}.`};
    }
    if (expectedValue.length == 1) {
        return {pass: false, message: 'When only one parameter, it should be error type or error message.'};
    }
    if (expectedValue.length == 2 && typeof expectedValue[0] === 'function' && expectedValue[0].name === actualValue.name) {
        if (typeof expectedValue[1] === 'string' && actualValue.message === expectedValue[1]) {
            return {pass: true, message: 'actual error message is ' + actualValue.message + '.'};
        }
        return {pass: false, message: `except error message is ${expectedValue[1]},but actual is ${actualValue.message}.`};
    }
    if (expectedValue.length == 2 && typeof expectedValue[0] === 'function' && expectedValue[0].name !== actualValue.name) {
        if (typeof expectedValue[1] === 'string' && actualValue.message === expectedValue[1]) {
            return {pass: false, message: `except error type is ${expectedValue[0].name},but actual is ${actualValue.name}.`};
        }
        return {pass: false, message: 'except error type and message are incorrect.'};
    }
    if (expectedValue.length > 2) {
        return {pass: false, message: 'Up to two parameters are supported.'};
    }
    return {pass: true, message: 'not equal type'};
}
export default assertPromiseIsRejectedWithError;
function assertThrowError(actualValue, expected) {
    let result = false;
    let message = '';
    let err;
    if (typeof actualValue !== 'function') {
        throw new Error('actualValue is not a function');
    }
    try {
        actualValue();
        return {
            pass: result,
            message: ' An error is not thrown while it is expected!'
        };
    } catch (e) {
        err = e;
    }
    if (err instanceof Error) {
        let type = typeof expected[0];
        if (type === 'function') {
            result = err.constructor.name === expected[0].name;
            message = 'expected throw failed , ' + err.constructor.name + ' is not ' + expected[0].name;
        } else if (type === 'string') {
            result = err.message.includes(expected[0]);
            message = 'expected throw failed , ' + err.message + ' is not ' + expected[0];
        }
    }
    return {
        pass: result,
        message: message
    };
}
export default assertThrowError;
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface ScanPage_Params {
}
export class ScanPage extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: ScanPage_Params) {
    }
    updateStateVars(params: ScanPage_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
    }
    aboutToBeDeleted() {
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('ScanPage');
        }, Text);
        Text.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
}
function isPromiseLike(obj) {
    return !!obj && isFunction(obj.then);
}
function isFunction(value) {
    return isA('Function', value);
}
function isA(typeName, value) {
    return getType(value) === '[object ' + typeName + ']';
}
function getType(value) {
    return Object.prototype.toString.apply(value);
}
export default isPromiseLike;
function assertClose(actualValue, expected) {
    if (actualValue === null && expected[0] === null) {
        throw new Error('actualValue and expected can not be both null!!!');
    }
    let result;
    let diff = Math.abs(expected[0] - actualValue);
    let actualAbs = Math.abs(actualValue);
    if ((actualAbs - 0) === 0) {
        if ((diff - 0) === 0) {
            result = true;
        } else {
            result = false;
        }
    } else if (diff / actualAbs < expected[1]) {
        result = true;
    } else {
        result = false;
    }
    return {
        pass: result,
        message: '|' + actualValue + ' - ' + expected[0] + '|/' + actualValue + ' is not less than ' + expected[1]
    };
}
export default assertClose;
class DeepTypeUtils {
    static getType(value) {
       return Object.prototype.toString.apply(value);
   }
    static isA(typeName, value) {
        return this.getType(value) === '[object ' + typeName + ']';
    }
    static isAsymmetricEqualityTester(obj) {
        return obj ? this.isA('Function', obj.asymmetricMatch) : false;
    }
    static isFunction(value) {
        return this.isA('Function', value);
    }
    static isUndefined(obj) {
        return obj === void 0;
    }
    static isDomNode(obj) {
        return obj !== null &&
              typeof obj === 'object' &&
              typeof obj.nodeType === 'number' &&
              typeof obj.nodeName === 'string';
    }
    static isPromise(obj) {
        return !!obj && obj.constructor === Promise;
  };
    static isMap(obj) {
        return (
            obj !== null &&
            typeof obj !== 'undefined' &&
            obj.constructor === Map
        );
    }
    static isSet(obj) {
        return (
            obj !== null &&
            typeof obj !== 'undefined' &&
            obj.constructor === Set
        );
    }
    static has(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    }
    static keys(obj, isArray) {
     const extraKeys = [];
     const allKeys = this.getAllKeys(obj);
        if (!isArray) {
            return allKeys;
        }
        if (allKeys.length === 0) {
            return allKeys;
        }
        for (const k of allKeys) {
            if (typeof k === 'symbol' || !/^[0-9]+$/.test(k)) {
                extraKeys.push(k);
            }
        }
        return extraKeys;
    }
    static getAllKeys(obj) {
        const keys = [];
        for (let key in obj) {
            if (this.has(obj, key)) {
                keys.push(key);
            }
        }
        const symbols = Object.getOwnPropertySymbols(obj);
        for (const sym of symbols) {
            if (Object.prototype.propertyIsEnumerable.call(obj, sym)) {
                keys.push(sym);
            }
        }
        return keys;
    }
}
export default DeepTypeUtils;
function assertNegUnlimited(actualValue) {
    return {
        pass: actualValue === Number.NEGATIVE_INFINITY,
        message: 'Expected actualValue not to be -Infinity.  actualValue is,' + actualValue
    };
}
export default assertNegUnlimited;
function assertInstanceOf(actualValue, expected) {
    if (Object.prototype.toString.call(actualValue) == '[object ' + expected[0] + ']') {
        return {
            pass: true
        };
    } else {
        return {
            pass: false,
            message: actualValue + ' is ' + Object.prototype.toString.call(actualValue) + 'not  ' + expected[0]
        };
    }
}
export default assertInstanceOf;
import DeepTypeUtils from './DeepTypeUtils';
function assertDeepEquals(actualValue, expected) {
    let result = eq(actualValue, expected[0]);
    let msg = logMsg(actualValue, expected[0]);
    return {
        pass: result,
        message: msg
    };
}
function logMsg(actualValue, expected) {
    const aClassName = Object.prototype.toString.call(actualValue);
    const bClassName = Object.prototype.toString.call(expected);
    let actualMsg;
    let expectMsg;
    if (aClassName == '[object Function]') {
        actualMsg = 'actualValue Function';
    } else if (aClassName == '[object Promise]') {
        actualMsg = 'actualValue Promise';
    } else if (aClassName == '[object Set]' || aClassName == '[object Map]') {
        actualMsg = JSON.stringify(Array.from(actualValue));
    } else if (aClassName == '[object RegExp]') {
        actualMsg = JSON.stringify(actualValue.source.replace('\\', ''));
    } else if (aClassName == '[object BigInt]') {
        actualMsg = actualValue;
    } else if (aClassName == '[object Error]') {
        actualMsg = actualValue.message;
    } else if (aClassName == '[object ArrayBuffer]') {
        actualMsg = actualValue.byteLength;
    }
    else {
        actualMsg = JSON.stringify(actualValue);
    }
    if (bClassName == '[object Function]') {
        expectMsg = 'expected Function';
    } else if (bClassName == '[object Promise]') {
        expectMsg = 'expected Promise';
    } else if (bClassName == '[object Set]' || bClassName == '[object Map]') {
        expectMsg = JSON.stringify(Array.from(expected));
    } else if (bClassName == '[object RegExp]') {
        expectMsg = JSON.stringify(expected.source.replace('\\', ''));
    } else if (bClassName == '[object BigInt]') {
        expectMsg = expected;
    } else if (bClassName == '[object Error]') {
        expectMsg = expected.message;
    } else if (bClassName == '[object ArrayBuffer]') {
        expectMsg = expected.byteLength;
    }
    else {
        expectMsg = JSON.stringify(expected);
    }
    return actualMsg + ' is not deep equal ' + expectMsg;
}
function eq(a, b) {
    let result = true;
    if (a === b) {
        result = a !== 0 || 1 / a === 1 / b;
        return result;
    }
    if (a === null || b === null) {
        result = a === b;
        return result;
    }
    const aClassName = Object.prototype.toString.call(a);
    const bClassName = Object.prototype.toString.call(b);
    if (aClassName !== bClassName) {
        return false;
    }
    if (aClassName === '[object String]' || aClassName === '[object Number]' || aClassName === '[object Date]' ||
        aClassName === '[object Boolean]' || aClassName === '[object ArrayBuffer]' ||
        aClassName === '[object RegExp]' || aClassName === '[object Error]') {
        result = isEqualSampleObj(a, b);
        return result;
    }
    if (typeof a !== 'object' || typeof b !== 'object') {
        return false;
    }
    if (DeepTypeUtils.isDomNode(a) || DeepTypeUtils.isPromise(a) || DeepTypeUtils.isFunction(a)) {
        result = isEqualNodeOrPromiseOrFunction(a, b);
        return result;
    }
    if (aClassName === '[object Array]' || aClassName === '[object Map]' || aClassName === '[object Set]') {
        result = isEqualCollection(a, b);
        return result;
    }
    result = isEqualObj(a, b);
    return result;
}
function isEqualNodeOrPromiseOrFunction(a, b) {
    let equalNodeOrPromiseOrFunction = true;
    if (DeepTypeUtils.isDomNode(a) && DeepTypeUtils.isDomNode(b)) {
        const aIsDomNode = DeepTypeUtils.isDomNode(a);
        const bIsDomNode = DeepTypeUtils.isDomNode(b);
        if (aIsDomNode && bIsDomNode) {
            equalNodeOrPromiseOrFunction = a.isEqualNode(b);
            return equalNodeOrPromiseOrFunction;
        }
        if (aIsDomNode || bIsDomNode) {
            equalNodeOrPromiseOrFunction = false;
            return false;
        }
    }
    if (DeepTypeUtils.isPromise(a) && DeepTypeUtils.isPromise(b)) {
        const aIsPromise = DeepTypeUtils.isPromise(a);
        const bIsPromise = DeepTypeUtils.isPromise(b);
        if (aIsPromise && bIsPromise) {
            equalNodeOrPromiseOrFunction = a === b;
            return a === b;
        }
    }
    if (DeepTypeUtils.isFunction(a) && DeepTypeUtils.isFunction(b)) {
        const aCtor = a.constructor,
            bCtor = b.constructor;
        if (
            aCtor !== bCtor &&
            DeepTypeUtils.isFunction(aCtor) &&
            DeepTypeUtils.isFunction(bCtor) &&
                a instanceof aCtor &&
                b instanceof bCtor &&
                !(aCtor instanceof aCtor && bCtor instanceof bCtor)
        ) {
            equalNodeOrPromiseOrFunction = false;
            return false;
        }
    }
    return equalNodeOrPromiseOrFunction;
}
function isEqualCollection(a, b) {
    let equalCollection = true;
    const aClassName = Object.prototype.toString.call(a);
    const bClassName = Object.prototype.toString.call(b);
    if (aClassName === '[object Array]') {
        equalCollection = isEqualArray(a, b);
        return equalCollection;
    }
    if (DeepTypeUtils.isMap(a) && DeepTypeUtils.isMap(b)) {
        equalCollection = isEqualMap(a, b);
        return equalCollection;
    }
    if (DeepTypeUtils.isSet(a) && DeepTypeUtils.isSet(b)) {
        equalCollection = isEqualSet(a, b);
        return equalCollection;
    }
    return true;
}
function isEqualSampleObj(a, b) {
    let equalSampleObj = true;
    const aClassName = Object.prototype.toString.call(a);
    const bClassName = Object.prototype.toString.call(b);
    if (aClassName === '[object String]') {
        equalSampleObj = a === String(b);
        return equalSampleObj;
    }
    if (aClassName === '[object Number]') {
        equalSampleObj = a !== +a ? b !== +b : a === 0 && b === 0 ? 1 / a === 1 / b : a === +b;
        return equalSampleObj;
    }
    if (aClassName === '[object Date]' || aClassName === '[object Boolean]') {
        equalSampleObj = +a === +b;
        return equalSampleObj;
    }
    if (aClassName === '[object ArrayBuffer]') {
        equalSampleObj = eq(new Uint8Array(a), new Uint8Array(b));
        return equalSampleObj;
    }
    if (aClassName === '[object RegExp]') {
        return (
            a.source === b.source &&
                a.global === b.global &&
                a.multiline === b.multiline &&
                a.ignoreCase === b.ignoreCase
        );
    }
    if (a instanceof Error && b instanceof Error) {
        equalSampleObj = a.message === b.message;
        return equalSampleObj;
    }
    return equalSampleObj;
}
function isEqualObj(a, b) {
    let equalObj = true;
    const aClassName = Object.prototype.toString.call(a);
    const bClassName = Object.prototype.toString.call(b);
    const aKeys = DeepTypeUtils.keys(a, aClassName === '[object Array]');
    let size = aKeys.length;
    if (DeepTypeUtils.keys(b, bClassName === '[object Array]').length !== size) {
        return false;
    }
    for (const key of aKeys) {
        if (!DeepTypeUtils.has(b, key)) {
            equalObj = false;
            continue;
        }
        if (!eq(a[key], b[key])) {
            equalObj = false;
        }
    }
    return equalObj;
}
function isEqualArray(a, b) {
    let equalArray = true;
    const aLength = a.length;
    const bLength = b.length;
    if (aLength !== bLength) {
        return false;
    }
    for (let i = 0; i < aLength || i < bLength; i++) {
        equalArray = eq(i < aLength ? a[i] : void 0, i < bLength ? b[i] : void 0) && equalArray;
    }
    return equalArray;
}
function isEqualMap(a, b) {
    let equalMap = true;
    if (a.size !== b.size) {
        return false;
    }
    const keysA = [];
    const keysB = [];
    a.forEach(function(valueA, keyA) {
        keysA.push(keyA);
    });
    b.forEach(function(valueB, keyB) {
        keysB.push(keyB);
    });
    const mapKeys = [keysA, keysB];
    const cmpKeys = [keysB, keysA];
    for (let i = 0; equalMap && i < mapKeys.length; i++) {
        const mapIter = mapKeys[i];
        const cmpIter = cmpKeys[i];
        for (let j = 0; equalMap && j < mapIter.length; j++) {
            const mapKey = mapIter[j];
            const cmpKey = cmpIter[j];
            const mapValueA = a.get(mapKey);
            let mapValueB;
            if (eq(mapKey, cmpKey)) {
                mapValueB = b.get(cmpKey);
            } else {
                mapValueB = b.get(mapKey);
            }
            equalMap = eq(mapValueA, mapValueB);
        }
    }
    return equalMap;
}
function isEqualSet(a, b) {
    let equalSet = true;
    if (a.size !== b.size) {
        return false;
    }
    const valuesA = [];
    a.forEach(function(valueA) {
        valuesA.push(valueA);
    });
    const valuesB = [];
    b.forEach(function(valueB) {
        valuesB.push(valueB);
    });
    const setPairs = [[valuesA, valuesB], [valuesB, valuesA]];
    for (let i = 0; equalSet && i < setPairs.length; i++) {
        const baseValues = setPairs[i][0];
        const otherValues = setPairs[i][1];
        for (const baseValue of baseValues) {
            let found = false;
            for (let j = 0; !found && j < otherValues.length; j++) {
                const otherValue = otherValues[j];
                found = eq(baseValue, otherValue);
            }
            equalSet = equalSet && found;
        }
    }
    return equalSet;
}
export default assertDeepEquals;
function assertLargerOrEqual(actualValue, expected) {
    return {
        pass: (actualValue) >= expected[0],
        message: (actualValue) + ' is not larger than ' + expected[0]
    };
}
export default assertLargerOrEqual;
export * from "@normalized:N&&&@tbs/common/src/main/ets/common/index&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/http/index&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/widgets/index&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/manager/index&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/utils/index&1.0.0";
export { CommonDataSource } from "@normalized:N&&&@tbs/common/src/main/ets/model/CommonDataSource&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/location/index&1.0.0";
function assertLess(actualValue, expected) {
    return {
        pass: (actualValue) < expected[0],
        message: (actualValue) + ' is not less than ' + expected[0]
    };
}
export default assertLess;
function assertPosUnlimited(actualValue) {
    return {
        pass: actualValue === Number.POSITIVE_INFINITY,
        message: 'Expected actualValue is POSITIVE_INFINITY.  actualValue is,' + actualValue
    };
}
export default assertPosUnlimited;
function assertNaN(actualValue) {
    return {
        pass: actualValue !== actualValue,
        message: 'expect NaN, actualValue  is ' + actualValue
    };
}
export default assertNaN;
import isPromiseLike from './isPromiseLike';
function assertPromiseIsResolved(actualPromise) {
    if (!isPromiseLike(actualPromise)) {
        return Promise.reject().then(function () {
        }, function () {
            return {pass: false, message: 'Expected not be called on a promise.'};
        });
    }
    return actualPromise.then(
        function (got) {
            return {pass: true, message: 'actualValue is isResolved'};
        },
        function (rej) {
            return {
                pass: false,
                message: 'Expected a promise to be resolved but it was ' +
                    'rejected with ' + JSON.stringify(rej) + '.'
            };
        }
    );
}
export default assertPromiseIsResolved;
function assertFail() {
    return {
        pass: false,
        message: 'fail '
    };
}
export default assertFail;
function assertLessOrEqual(actualValue, expected) {
    return {
        pass: (actualValue) <= expected[0],
        message: (actualValue) + ' is not less than ' + expected[0]
    };
}
export default assertLessOrEqual;
export { MinePage } from "@normalized:N&&&@tbs/mine/src/main/ets/page/MinePage&1.0.0";
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/entry/src/main/ets/entrybackupability/EntryBackupAbility.ts;&entry/src/main/ets/entrybackupability/EntryBackupAbility&;esm;entry|entry|1.0.0|src/main/ets/entrybackupability/EntryBackupAbility.ts;entry;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/entry/src/main/ets/entryability/EntryAbility.ts;&entry/src/main/ets/entryability/EntryAbility&;esm;entry|entry|1.0.0|src/main/ets/entryability/EntryAbility.ts;entry;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/entry/src/main/ets/login/LoginPage.ts;&entry/src/main/ets/login/LoginPage&;esm;entry|entry|1.0.0|src/main/ets/login/LoginPage.ts;entry;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/entry/src/main/ets/register/RegisterPage.ts;&entry/src/main/ets/register/RegisterPage&;esm;entry|entry|1.0.0|src/main/ets/register/RegisterPage.ts;entry;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/entry/src/main/ets/home/HomePage.ts;&entry/src/main/ets/home/HomePage&;esm;entry|entry|1.0.0|src/main/ets/home/HomePage.ts;entry;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/Index.ts;&@tbs/common/Index&1.0.0;esm;entry|@tbs/common|1.0.0|Index.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/entry/src/main/ets/login/viewModel/LoginViewModel.ts;&entry/src/main/ets/login/viewModel/LoginViewModel&;esm;entry|entry|1.0.0|src/main/ets/login/viewModel/LoginViewModel.ts;entry;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/entry/src/main/ets/register/viewModel/RegisterViewModel.ts;&entry/src/main/ets/register/viewModel/RegisterViewModel&;esm;entry|entry|1.0.0|src/main/ets/register/viewModel/RegisterViewModel.ts;entry;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/charge/Index.ts;&@tbs/charge/Index&1.0.0;esm;entry|@tbs/charge|1.0.0|Index.ts;@tbs/charge;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/mine/Index.ts;&@tbs/mine/Index&1.0.0;esm;entry|@tbs/mine|1.0.0|Index.ts;@tbs/mine;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/scan/Index.ts;&@tbs/scan/Index&1.0.0;esm;entry|@tbs/scan|1.0.0|Index.ts;@tbs/scan;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/entry/src/main/ets/home/viewModel/homeData.ts;&entry/src/main/ets/home/viewModel/homeData&;esm;entry|entry|1.0.0|src/main/ets/home/viewModel/homeData.ts;entry;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/common/index.ts;&@tbs/common/src/main/ets/common/index&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/common/index.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/http/index.ts;&@tbs/common/src/main/ets/http/index&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/http/index.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/widgets/index.ts;&@tbs/common/src/main/ets/widgets/index&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/widgets/index.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/manager/index.ts;&@tbs/common/src/main/ets/manager/index&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/manager/index.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/utils/index.ts;&@tbs/common/src/main/ets/utils/index&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/utils/index.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/location/index.ts;&@tbs/common/src/main/ets/location/index&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/location/index.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/model/CommonDataSource.ts;&@tbs/common/src/main/ets/model/CommonDataSource&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/model/CommonDataSource.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/charge/src/main/ets/page/ChargePage.ts;&@tbs/charge/src/main/ets/page/ChargePage&1.0.0;esm;entry|@tbs/charge|1.0.0|src/main/ets/page/ChargePage.ts;@tbs/charge;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/scan/src/main/ets/page/ScanPage.ts;&@tbs/scan/src/main/ets/page/ScanPage&1.0.0;esm;entry|@tbs/scan|1.0.0|src/main/ets/page/ScanPage.ts;@tbs/scan;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/mine/src/main/ets/page/MinePage.ts;&@tbs/mine/src/main/ets/page/MinePage&1.0.0;esm;entry|@tbs/mine|1.0.0|src/main/ets/page/MinePage.ts;@tbs/mine;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/common/StyleConst.ts;&@tbs/common/src/main/ets/common/StyleConst&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/common/StyleConst.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/common/TbsTitleBar.ts;&@tbs/common/src/main/ets/common/TbsTitleBar&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/common/TbsTitleBar.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/common/BottomLoadingBuilder.ts;&@tbs/common/src/main/ets/common/BottomLoadingBuilder&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/common/BottomLoadingBuilder.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/http/Apis.ts;&@tbs/common/src/main/ets/http/Apis&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/http/Apis.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/http/httpUtils.ts;&@tbs/common/src/main/ets/http/httpUtils&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/http/httpUtils.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/manager/StorageConst.ts;&@tbs/common/src/main/ets/manager/StorageConst&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/manager/StorageConst.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/manager/RoutePageConst.ts;&@tbs/common/src/main/ets/manager/RoutePageConst&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/manager/RoutePageConst.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/manager/UserCenterConst.ts;&@tbs/common/src/main/ets/manager/UserCenterConst&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/manager/UserCenterConst.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/utils/WindowModel.ts;&@tbs/common/src/main/ets/utils/WindowModel&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/utils/WindowModel.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/utils/GlobalContext.ts;&@tbs/common/src/main/ets/utils/GlobalContext&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/utils/GlobalContext.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/utils/TextUtil.ts;&@tbs/common/src/main/ets/utils/TextUtil&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/utils/TextUtil.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/utils/ComponentUtils.ts;&@tbs/common/src/main/ets/utils/ComponentUtils&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/utils/ComponentUtils.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/utils/ScreenUtil.ts;&@tbs/common/src/main/ets/utils/ScreenUtil&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/utils/ScreenUtil.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/utils/StorageUtils.ts;&@tbs/common/src/main/ets/utils/StorageUtils&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/utils/StorageUtils.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/utils/formatDate.ts;&@tbs/common/src/main/ets/utils/formatDate&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/utils/formatDate.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/location/LocationManager.ts;&@tbs/common/src/main/ets/location/LocationManager&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/location/LocationManager.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/location/ThirdAppManager.ts;&@tbs/common/src/main/ets/location/ThirdAppManager&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/location/ThirdAppManager.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/widgets/ShowToast.ts;&@tbs/common/src/main/ets/widgets/ShowToast&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/widgets/ShowToast.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/widgets/BottomPop.ts;&@tbs/common/src/main/ets/widgets/BottomPop&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/widgets/BottomPop.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/mine/src/main/ets/view/MineContentView.ts;&@tbs/mine/src/main/ets/view/MineContentView&1.0.0;esm;entry|@tbs/mine|1.0.0|src/main/ets/view/MineContentView.ts;@tbs/mine;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/mine/src/main/ets/view/MineHeaderView.ts;&@tbs/mine/src/main/ets/view/MineHeaderView&1.0.0;esm;entry|@tbs/mine|1.0.0|src/main/ets/view/MineHeaderView.ts;@tbs/mine;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/charge/src/main/ets/view/ChargeListView.ts;&@tbs/charge/src/main/ets/view/ChargeListView&1.0.0;esm;entry|@tbs/charge|1.0.0|src/main/ets/view/ChargeListView.ts;@tbs/charge;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/charge/src/main/ets/viewModel/ChargeViewModel.ts;&@tbs/charge/src/main/ets/viewModel/ChargeViewModel&1.0.0;esm;entry|@tbs/charge|1.0.0|src/main/ets/viewModel/ChargeViewModel.ts;@tbs/charge;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/charge/src/main/ets/view/ChargeSearchBarView.ts;&@tbs/charge/src/main/ets/view/ChargeSearchBarView&1.0.0;esm;entry|@tbs/charge|1.0.0|src/main/ets/view/ChargeSearchBarView.ts;@tbs/charge;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/http/response.ts;&@tbs/common/src/main/ets/http/response&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/http/response.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/location/PermissionConst.ts;&@tbs/common/src/main/ets/location/PermissionConst&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/location/PermissionConst.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/location/PermissionManager.ts;&@tbs/common/src/main/ets/location/PermissionManager&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/location/PermissionManager.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/mine/src/main/ets/model/MineModel.ts;&@tbs/mine/src/main/ets/model/MineModel&1.0.0;esm;entry|@tbs/mine|1.0.0|src/main/ets/model/MineModel.ts;@tbs/mine;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/charge/src/main/ets/page/ChargeOrderPage.ts;&@tbs/charge/src/main/ets/page/ChargeOrderPage&1.0.0;esm;entry|@tbs/charge|1.0.0|src/main/ets/page/ChargeOrderPage.ts;@tbs/charge;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/common/src/main/ets/location/AppBundleManager.ts;&@tbs/common/src/main/ets/location/AppBundleManager&1.0.0;esm;entry|@tbs/common|1.0.0|src/main/ets/location/AppBundleManager.ts;@tbs/common;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/charge/src/main/ets/page/ChargingPage.ts;&@tbs/charge/src/main/ets/page/ChargingPage&1.0.0;esm;entry|@tbs/charge|1.0.0|src/main/ets/page/ChargingPage.ts;@tbs/charge;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/charge/src/main/ets/view/ChargeItemDialogView.ts;&@tbs/charge/src/main/ets/view/ChargeItemDialogView&1.0.0;esm;entry|@tbs/charge|1.0.0|src/main/ets/view/ChargeItemDialogView.ts;@tbs/charge;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/charge/src/main/ets/view/MapDialogCall.ts;&@tbs/charge/src/main/ets/view/MapDialogCall&1.0.0;esm;entry|@tbs/charge|1.0.0|src/main/ets/view/MapDialogCall.ts;@tbs/charge;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/charge/src/main/ets/view/ChargePriceDialogView.ts;&@tbs/charge/src/main/ets/view/ChargePriceDialogView&1.0.0;esm;entry|@tbs/charge|1.0.0|src/main/ets/view/ChargePriceDialogView.ts;@tbs/charge;false
/Users/hy-harmonyos/Desktop/Lucy-folder/code/HarmonyOS-groundhog-charging-system/TbsChargeHarmonyOs/entry/build/default/cache/default/default@CompileArkTS/esmodule/debug/charge/src/main/ets/model/ChargeModel.ts;&@tbs/charge/src/main/ets/model/ChargeModel&1.0.0;esm;entry|@tbs/charge|1.0.0|src/main/ets/model/ChargeModel.ts;@tbs/charge;false
import dataPreferences from '@ohos.data.preferences';
import preferences from '@ohos.data.preferences';
import { HashMap } from '@kit.ArkTS';
import { common } from '@kit.AbilityKit';
import { GlobalContext } from './GlobalContext';
import { BusinessError } from '@kit.BasicServicesKit';
class Storage{
  private name: string = 'app_storage'
  private preferences: dataPreferences.Preferences | null = null
  private listenerKeyMap = new HashMap<string, HashMap<string, Callback<string>>>()
  constructor(name: string) {
    this.name = name;
  }
  initStorage() {
    const context = GlobalContext.getContext().getObject('context') as common.UIAbilityContext
    const options: dataPreferences.Options = { name: this.name }
    this.preferences = dataPreferences.getPreferencesSync(context, options)
    this.preferences?.on('change', (key: string) => {
      const pageMap = this.listenerKeyMap.get(key)
      pageMap?.forEach((callBack: Callback<string>) => {
        callBack(key)
      })
    })
  }
  /**
   * 存储key,value到preference缓存里面
   * @param key
   * @param value
   */
  saveValueSync(key: string, value: preferences.ValueType) {
    this.preferences?.putSync(key, value)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 根据key删除值
   * @param key
   */
  deleteValueSync(key: string) {
    this.preferences?.deleteSync(key)
    this.preferences?.flush((err: BusinessError) => {
      if (err) {
        console.error(`${this.name} file flush error :${err.message ?? ""}`)
      }
    })
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns string
   */
  getStringValueSync(key: string, defaultValue: string) {
    return this.preferences?.getSync(key, defaultValue) as string
  }
  /**
   * 适用于普通函数获取
   * @param key
   * @param defaultValue
   * @returns Array<string>
   */
  getArrayStringValueSync(key: string, defaultValue: Array<string>) {
    return this.preferences?.getSync(key, defaultValue) as Array<string>
  }
}
export const commonStorage = new Storage('common_storage')
export function initDataPreference() {
  commonStorage.initStorage()
}
import { bundleManager } from "@kit.AbilityKit";
class AppBundleManager{
  private bundleInfo?: bundleManager.BundleInfo
  getBundleInfo(): bundleManager.BundleInfo {
    if (this.bundleInfo == null || this.bundleInfo == undefined) {
      return bundleManager.getBundleInfoForSelfSync(bundleManager.BundleFlag.GET_BUNDLE_INFO_WITH_APPLICATION)
    }
    return this.bundleInfo
  }
  getTokenId(): number {
    let bundleInfo = this.getBundleInfo();
    return bundleInfo.appInfo.accessTokenId;
  }
}
export const appBundleManager = new AppBundleManager()
@system.app:@native.system.app
@ohos.app:@native.ohos.app
@system.router:@native.system.router
@system.curves:@native.system.curves
@ohos.curves:@native.ohos.curves
@system.matrix4:@native.system.matrix4
@ohos.matrix4:@native.ohos.matrix4
import { componentUtils, inspector } from "@kit.ArkUI"
export class ComponentUtils {
  /**
   * 同步方式获取组件渲染后的实际高度
   * @param componentId 组件ID
   * @param callback 注册的回调函数
   */
  static getComponentHeightSync(componentId: string, callback: (width: number) => void): void {
    // 监听组件
    const listener = inspector.createComponentObserver(componentId)
    // 注册回调
    listener.on('layout', () => {
      const componentInfo = componentUtils.getRectangleById(componentId)
      const height = px2vp(componentInfo.size.height)
      callback?.(height)
      // 取消注册回调
      listener.off('layout')
    })
  }
}
import { BusinessError } from "@kit.BasicServicesKit"
import { bundleManager } from "@kit.AbilityKit"
export enum ThirdApp {
  Alipay = 'alipays://',
  Amapuri = "amapuri://", // 高德地图的 scheme
  Baidumap = "baidumap://map/direction", // 百度地图的 scheme
  Maps = "maps://", // 华为地图的 scheme
  Https = "https://" // App link scheme
}
class ThirdAppManager{
  /** 第三方应用是否安装 */
  isAppInstall(thirdApp: ThirdApp): boolean {
    try {
      return bundleManager.canOpenLink(thirdApp)
    } catch (e) {
      let code = (e as BusinessError)?.code
      let msg = (e as BusinessError)?.message ?? ''
      if (code !== undefined) {
        if (code === 17700056) {
          msg += ` Please include "${thirdApp.replace('://',
            '')}" inside the "querySchemes" element of module.json5 in your app module.`
        }
        console.log(`isAppInstall get error${msg}`)
      } else {
        console.log(`isAppInstall get error${e}`)
      }
      return false
    }
  }
}
export const thirdAppManager = new ThirdAppManager()
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface MineHeaderView_Params {
    userInfoData?: UserInfoData | null;
}
import { ScreenUtils, StyleConst } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import type { UserInfoData } from "../model/MineModel";
import UserCenterConst from "@normalized:N&&&@tbs/common/src/main/ets/manager/UserCenterConst&1.0.0";
export class MineHeaderView extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.userInfoData = UserCenterConst.getUserInfoData();
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: MineHeaderView_Params) {
        if (params.userInfoData !== undefined) {
            this.userInfoData = params.userInfoData;
        }
    }
    updateStateVars(params: MineHeaderView_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
    }
    aboutToBeDeleted() {
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private userInfoData: UserInfoData | null;
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.width(StyleConst.FULL_WIDTH);
            Column.height(StyleConst.PERCENT_20);
            Column.backgroundColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Blank.create();
            Blank.height(ScreenUtils.getInstance().getStatusBarHeight());
            Blank.backgroundColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Blank);
        Blank.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 50332131, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.width({ "id": 50331976, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.borderRadius({ "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Image);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.userInfoData?.username);
            Text.fontColor(Color.White);
        }, Text);
        Text.pop();
        Column.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
}
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface MineContentView_Params {
    userInfoData?: UserInfoData | null;
}
import { StyleConst } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import UserCenterConst from "@normalized:N&&&@tbs/common/src/main/ets/manager/UserCenterConst&1.0.0";
import { orderOrServiceList, panelList } from "@normalized:N&&&@tbs/mine/src/main/ets/model/MineModel&1.0.0";
import type { panelData, UserInfoData } from "@normalized:N&&&@tbs/mine/src/main/ets/model/MineModel&1.0.0";
import router from "@ohos:router";
import "@normalized:N&&&@tbs/charge/src/main/ets/page/ChargeOrderPage&1.0.0";
export class MineContentView extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.userInfoData = UserCenterConst.getUserInfoData();
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: MineContentView_Params) {
        if (params.userInfoData !== undefined) {
            this.userInfoData = params.userInfoData;
        }
    }
    updateStateVars(params: MineContentView_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
    }
    aboutToBeDeleted() {
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private userInfoData: UserInfoData | null;
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: 10 });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: 6 });
            Column.margin({ top: -20 });
            Column.alignItems(HorizontalAlign.Start);
            Column.width(StyleConst.PERCENT_95);
            Column.padding({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Column.borderRadius({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Column.backgroundColor({ "id": 50331718, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            If.create();
            if (this.userInfoData?.balance) {
                this.ifElseBranchUpdateFunction(0, () => {
                    this.observeComponentCreation2((elmtId, isInitialRender) => {
                        Text.create(`${this.userInfoData?.balance.toFixed(2)}元`);
                    }, Text);
                    Text.pop();
                });
            }
            else {
                this.ifElseBranchUpdateFunction(1, () => {
                });
            }
        }, If);
        If.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('充电余额');
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('>');
        }, Text);
        Text.pop();
        Row.pop();
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create({ space: 10 });
            Row.justifyContent(FlexAlign.SpaceAround);
            Row.width(StyleConst.PERCENT_95);
            Row.padding({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.borderRadius({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.backgroundColor({ "id": 50331718, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            ForEach.create();
            const forEachItemGenFunction = _item => {
                const item = _item;
                this.observeComponentCreation2((elmtId, isInitialRender) => {
                    Column.create();
                    Column.onClick(() => {
                        if (item.type == 1) {
                            router.pushNamedRoute({
                                name: 'ChargeOrderPage'
                            });
                        }
                    });
                }, Column);
                this.observeComponentCreation2((elmtId, isInitialRender) => {
                    Image.create(item.image);
                    Image.width({ "id": 50331959, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                }, Image);
                this.observeComponentCreation2((elmtId, isInitialRender) => {
                    Text.create(item.name);
                }, Text);
                Text.pop();
                Column.pop();
            };
            this.forEachUpdateFunction(elmtId, orderOrServiceList, forEachItemGenFunction);
        }, ForEach);
        ForEach.pop();
        Row.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Flex.create({ wrap: FlexWrap.Wrap, alignContent: FlexAlign.SpaceAround });
            Flex.width(StyleConst.PERCENT_95);
            Flex.padding({ top: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, left: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, right: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
            Flex.borderRadius({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Flex.backgroundColor({ "id": 50331718, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Flex);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            ForEach.create();
            const forEachItemGenFunction = _item => {
                const item = _item;
                this.observeComponentCreation2((elmtId, isInitialRender) => {
                    Column.create({ space: 4 });
                    Column.width(StyleConst.PERCENT_25);
                    Column.margin({ bottom: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
                }, Column);
                this.observeComponentCreation2((elmtId, isInitialRender) => {
                    Image.create(item.image);
                    Image.width({ "id": 50331942, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                }, Image);
                this.observeComponentCreation2((elmtId, isInitialRender) => {
                    Text.create(item.name);
                }, Text);
                Text.pop();
                Column.pop();
            };
            this.forEachUpdateFunction(elmtId, panelList, forEachItemGenFunction);
        }, ForEach);
        ForEach.pop();
        Flex.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.justifyContent(FlexAlign.SpaceBetween);
            Row.width(StyleConst.PERCENT_95);
            Row.padding({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.borderRadius({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.backgroundColor({ "id": 50331718, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.padding({ top: { "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, bottom: { "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
            Row.onClick(() => {
            });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('退出登录');
            Text.margin({ left: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 50332135, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.width({ "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.fillColor(Color.Black);
        }, Image);
        Row.pop();
        Column.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
}
export class UserInfoData {
    id?: number;
    username?: string;
    nickname?: string;
    balance?: number;
    avatarUrl?: string;
}
export class panelData {
    type?: number;
    name?: ResourceStr;
    image?: ResourceStr;
}
export const panelList: Array<panelData> = [
    { name: { "id": 50331650, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, image: { "id": 50332132, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } },
    { name: { "id": 50331651, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, image: { "id": 50332133, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } },
    { name: { "id": 50331662, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, image: { "id": 50332134, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } },
    { name: { "id": 50331669, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, image: { "id": 50332136, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } },
    { name: { "id": 50331678, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, image: { "id": 50332138, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } },
    { name: { "id": 50331690, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, image: { "id": 50332139, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } }
];
export const orderOrServiceList: Array<panelData> = [
    { type: 1, name: { "id": 50331674, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, image: { "id": 50332137, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } },
    { type: 2, name: { "id": 50331695, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, image: { "id": 50332140, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } }
];
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface MinePage_Params {
}
import { StyleConst } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import { MineContentView } from "@normalized:N&&&@tbs/mine/src/main/ets/view/MineContentView&1.0.0";
import { MineHeaderView } from "@normalized:N&&&@tbs/mine/src/main/ets/view/MineHeaderView&1.0.0";
export class MinePage extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: MinePage_Params) {
    }
    updateStateVars(params: MinePage_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
    }
    aboutToBeDeleted() {
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.width(StyleConst.FULL_WIDTH);
            Column.height(StyleConst.FULL_HEIGHT);
            Column.backgroundColor({ "id": 50331715, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Column);
        {
            this.observeComponentCreation2((elmtId, isInitialRender) => {
                if (isInitialRender) {
                    let componentCall = new 
                    MineHeaderView(this, {}, undefined, elmtId, () => { }, { page: "feature/mine/src/main/ets/page/MinePage.ets", line: 12, col: 7 });
                    ViewPU.create(componentCall);
                    let paramsLambda = () => {
                        return {};
                    };
                    componentCall.paramsGenerator_ = paramsLambda;
                }
                else {
                    this.updateStateVarsOfChildByElmtId(elmtId, {});
                }
            }, { name: "MineHeaderView" });
        }
        {
            this.observeComponentCreation2((elmtId, isInitialRender) => {
                if (isInitialRender) {
                    let componentCall = new 
                    MineContentView(this, {}, undefined, elmtId, () => { }, { page: "feature/mine/src/main/ets/page/MinePage.ets", line: 14, col: 7 });
                    ViewPU.create(componentCall);
                    let paramsLambda = () => {
                        return {};
                    };
                    componentCall.paramsGenerator_ = paramsLambda;
                }
                else {
                    this.updateStateVarsOfChildByElmtId(elmtId, {});
                }
            }, { name: "MineContentView" });
        }
        Column.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
}
{
  "entry|entry|1.0.0|src/main/ets/entryability/EntryAbility.ts": {
    "version": 3,
    "file": "EntryAbility.ets",
    "sourceRoot": "",
    "sources": [
      "entry/src/main/ets/entryability/EntryAbility.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0"
  },
  "entry|entry|1.0.0|src/main/ets/entrybackupability/EntryBackupAbility.ts": {
    "version": 3,
    "file": "EntryBackupAbility.ets",
    "sourceRoot": "",
    "sources": [
      "entry/src/main/ets/entrybackupability/EntryBackupAbility.ets"
    ],
    "names": [],
    "mappings": ";;;AAGA,MAAM,MAAM,GAAG,MAAM,CAAC;AAEtB,MAAM,CAAC,OAAO,OAAO,kBAAmB,SAAQ,sBAAsB;IACpE,KAAK,CAAC,QAAQ;QACZ,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;QAC7C,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,aAAa,EAAE,aAAa;QAC1C,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,yBAAyB,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;QACxF,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;CACF",
    "entry-package-info": "entry|1.0.0"
  },
  "entry|@tbs/charge|1.0.0|Index.ts": {
    "version": 3,
    "file": "Index.ets",
    "sourceRoot": "",
    "sources": [
      "feature/charge/Index.ets"
    ],
    "names": [],
    "mappings": "OAAO,EAAE,UAAU,EAAE",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/charge|1.0.0"
  },
  "entry|@tbs/charge|1.0.0|src/main/ets/page/ChargePage.ts": {
    "version": 3,
    "file": "ChargePage.ets",
    "sourceRoot": "",
    "sources": [
      "feature/charge/src/main/ets/page/ChargePage.ets"
    ],
    "names": [],
    "mappings": ";;;;IAQ+B,IAAI,GAAE,MAAM;IAClC,UAAU,GAAE,UAAU,EAAE;IAC/B,eAAe,GAAE,mBAAmB;;OAV/B,EAAE,WAAW,EAAE,UAAU,EAAE,KAAK,EAAE;cAChC,UAAU,QAAQ,sBAAsB;OAC1C,EAAE,cAAc,EAAE;OAClB,EAAE,mBAAmB,EAAE;OACvB,EAAE,WAAW,EAAE;AAGtB,MAAM,OAAQ,UAAU;IADxB;;;;;mDAE8C,EAAE;yDACZ,EAAE;+BACG,IAAI,mBAAmB,EAAE;;;;KANP;;;;;;;;;;;;;;;;;;;;;;;;IAIzD,yCAAmC,MAAM,EAAK;QAAjB,IAAI;;;QAAJ,IAAI,WAAE,MAAM;;;IACzC,+CAAmB,UAAU,EAAE,EAAK;QAA7B,UAAU;;;QAAV,UAAU,WAAE,UAAU,EAAE;;;IAC/B,yBAAiB,mBAAmB,CAA4B;IAEhE,aAAa,IAAI,IAAI;QACnB,IAAI,CAAC,cAAc,EAAE,CAAA;IACvB,CAAC;IAED,SAAS;IACT,KAAK,CAAC,cAAc;QAClB,IAAI,IAAI,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACvC,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;YACrB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAA;SAC5B;IACH,CAAC;IAED,YAAY;QACV,IAAG,IAAI,CAAC,IAAI,IAAI,EAAE,EAAC;YACjB,IAAI,CAAC,cAAc,EAAE,CAAA;SACtB;IACH,CAAC;IAED,MAAM;IAEN,eAAe;;;;4CACb,mBAAmB,OAAC;wBAClB,IAAI,aAAW;wBACf,SAAS,EAAE,EAAE;wBACb,eAAe,EAAE,IAAI,CAAC,eAAe;wBACrC,oBAAoB,EAAE,CAAC,KAAK,EAAE,EAAE;4BAC9B,IAAI,CAAC,KAAK,EAAE;gCACV,KAAK,CAAC,SAAS,CAAC,CAAA;6BACjB;iCAAM;gCACL,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;gCACrC,IAAI,CAAC,cAAc,EAAE,CAAA;6BACtB;wBACH,CAAC;qBACF;;;;4BAXC,IAAI;4BACJ,SAAS,EAAE,EAAE;4BACb,eAAe,EAAE,IAAI,CAAC,eAAe;4BACrC,oBAAoB,EAAE,CAAC,KAAK,EAAE,EAAE;gCAC9B,IAAI,CAAC,KAAK,EAAE;oCACV,KAAK,CAAC,SAAS,CAAC,CAAA;iCACjB;qCAAM;oCACL,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;oCACrC,IAAI,CAAC,cAAc,EAAE,CAAA;iCACtB;4BACH,CAAC;;;;;;;;;;KAEJ;IAED,MAAM;IAEN,gBAAgB;;;uBAEX,MAAM,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,kBAAkB,EAAE,EAAE;;;;;4CADtE,cAAc,OAAC,EAAE,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE;;;;4BAA7B,UAAU,EAAE,IAAI,CAAC,UAAU;;;;;;;wBAA3B,UAAU,EAAE,IAAI,CAAC,UAAU;;;;;;KAE7C;IAED;;YACE,KAAK;YAAL,KAAK,CAIJ,YAAY,CAAC,SAAS,CAAC,GAAG;YAJ3B,KAAK,CAKJ,KAAK,CAAC,UAAU,CAAC,UAAU;YAL5B,KAAK,CAMJ,MAAM,CAAC,UAAU,CAAC,WAAW;YAN9B,KAAK,CAOJ,eAAe;;QANd,IAAI,CAAC,eAAe,aAAE,CAAC,MAAM;;QAC7B,IAAI,CAAC,gBAAgB,aAAE,CAAC,MAAM;;QAFhC,KAAK;KAQN",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/charge|1.0.0"
  },
  "entry|@tbs/mine|1.0.0|Index.ts": {
    "version": 3,
    "file": "Index.ets",
    "sourceRoot": "",
    "sources": [
      "feature/mine/Index.ets"
    ],
    "names": [],
    "mappings": "OAAO,EAAE,QAAQ,EAAE",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/mine|1.0.0"
  },
  "entry|@tbs/mine|1.0.0|src/main/ets/page/MinePage.ts": {
    "version": 3,
    "file": "MinePage.ets",
    "sourceRoot": "",
    "sources": [
      "feature/mine/src/main/ets/page/MinePage.ets"
    ],
    "names": [],
    "mappings": ";;;;;OAAO,EAA+B,UAAU,EAAE;OAG3C,EAAE,eAAe,EAAE;OACnB,EAAE,cAAc,EAAE;AAGzB,MAAM,OAAQ,QAAQ;IADtB;;;;;;;KAFwD;;;;;;;;;;;IAItD;;YACE,MAAM;YAAN,MAAM,CAML,KAAK,CAAC,UAAU,CAAC,UAAU;YAN5B,MAAM,CAOL,MAAM,CAAC,UAAU,CAAC,WAAW;YAP9B,MAAM,CAQL,eAAe;;;;;;oBAPd,MAAM;oBACN,cAAc;;;;;;;;;;;;;;;;oBACd,MAAM;oBACN,eAAe;;;;;;;;;;;;QAJjB,MAAM;KASP",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/mine|1.0.0"
  },
  "entry|@tbs/common|1.0.0|Index.ts": {
    "version": 3,
    "file": "Index.ets",
    "sourceRoot": "",
    "sources": [
      "common/Index.ets"
    ],
    "names": [],
    "mappings": ";;;;;OAUO,EAAE,gBAAgB,EAAE",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/common/BottomLoadingBuilder.ts": {
    "version": 3,
    "file": "BottomLoadingBuilder.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/common/BottomLoadingBuilder.ets"
    ],
    "names": [],
    "mappings": ";;;;IAIQ,YAAY,GAAE,OAAO;IACrB,OAAO,GAAE,OAAO;IAChB,UAAU,GAAE,MAAM;;OANnB,EAAE,UAAU,EAAE;AAGrB,MAAM,OAAQ,oBAAoB;IADlC;;;;;;;;;;KAF8C;;;;yCAItC,YAAY;oCACZ,OAAO;uCACP,UAAU;;;;;;;;;;;;;;IAFhB,sDAAoB,OAAO,EAAA;QAArB,YAAY;;;QAAZ,YAAY,WAAE,OAAO;;;IAC3B,iDAAe,OAAO,EAAA;QAAhB,OAAO;;;QAAP,OAAO,WAAE,OAAO;;;IACtB,oDAAkB,MAAM,EAAA;QAAlB,UAAU;;;QAAV,UAAU,WAAE,MAAM;;;IAExB;;;YACE,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,OAAO,EAAE;;;wBACrC,GAAG;wBAAH,GAAG,CASF,KAAK,CAAC,UAAU,CAAC,UAAU;wBAT5B,GAAG,CAUF,MAAM;wBAVP,GAAG,CAWF,cAAc,CAAC,SAAS,CAAC,MAAM;;;wBAV9B,eAAe;wBAAf,eAAe,CACZ,KAAK;wBADR,eAAe,CAEZ,MAAM;wBAFT,eAAe,CAGZ,MAAM,CAAC,EAAE,KAAK,sHAAyB,EAAE;;;wBAC5C,IAAI;wBAAJ,IAAI,CACD,QAAQ;wBADX,IAAI,CAED,SAAS;;oBAFZ,IAAI;oBALN,GAAG;;aAYJ;iBAAM,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE;;;wBACpD,IAAI;wBAAJ,IAAI,CACD,QAAQ;wBADX,IAAI,CAED,SAAS;wBAFZ,IAAI,CAGD,SAAS,CAAC,SAAS,CAAC,MAAM;wBAH7B,IAAI,CAID,KAAK,CAAC,UAAU,CAAC,UAAU;wBAJ9B,IAAI,CAKD,MAAM,CAAC,EAAE,GAAG,sHAAyB,EAAE,MAAM,sHAAyB,EAAE;;oBAL3E,IAAI;;aAML;;;;aAAA;;;KACF",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/common/index.ts": {
    "version": 3,
    "file": "index.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/common/index.ets"
    ],
    "names": [],
    "mappings": "",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/common/StyleConst.ts": {
    "version": 3,
    "file": "StyleConst.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/common/StyleConst.ets"
    ],
    "names": [],
    "mappings": "AAAA,MAAM,OAAO,UAAU;IACrB,KAAK;IACL,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,GAAG,MAAM,CAAC;IAC5C,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,GAAG,MAAM,CAAC;IAE7C,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAA;IAClC,MAAM,CAAC,QAAQ,CAAC,WAAW,GAAG,MAAM,CAAA;CACrC",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/common/TbsTitleBar.ts": {
    "version": 3,
    "file": "TbsTitleBar.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/common/TbsTitleBar.ets"
    ],
    "names": [],
    "mappings": ";;;;IAKQ,KAAK,GAAE,WAAW;IAClB,YAAY,GAAE,OAAO;;OANtB,EAAE,WAAW,EAAE,UAAU,EAAE;;AAIlC,MAAM,OAAQ,WAAW;IADzB;;;;;;;;;KAFmC;;;6BAIN,EAAE;;;oCACC,KAAK;;;;kCAD7B,KAAK;yCACL,YAAY;;;;;;;;;;;;IADlB,+CAAa,WAAW,EAAK;QAAvB,KAAK;;;QAAL,KAAK,WAAE,WAAW;;;IACxB,sDAAoB,OAAO,EAAQ;QAA7B,YAAY;;;QAAZ,YAAY,WAAE,OAAO;;;IAE3B;;YACE,MAAM;YAAN,MAAM,CA4BL,KAAK,CAAC,UAAU,CAAC,UAAU;YA5B5B,MAAM,CA6BL,eAAe;;;YA5Bd,KAAK;YAAL,KAAK,CAAG,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,kBAAkB,EAAE;;QAA7D,KAAK;;YACL,iBAAiB;YAAjB,iBAAiB,CAuBhB,KAAK,CAAC,UAAU,CAAC,UAAU;YAvB5B,iBAAiB,CAwBhB,MAAM;;;YAvBL,IAAI,QAAC,IAAI,CAAC,KAAK;YAAf,IAAI,CACD,SAAS,CAAC,KAAK,CAAC,KAAK;YADxB,IAAI,CAED,QAAQ;YAFX,IAAI,CAGD,SAAS,CAAC,SAAS,CAAC,MAAM;YAH7B,IAAI,CAID,QAAQ,CAAC,CAAC;YAJb,IAAI,CAKD,EAAE,CAAC,MAAM;YALZ,IAAI,CAMD,UAAU,CAAC;gBACV,MAAM,EAAE,EAAE,MAAM,EAAE,eAAe,EAAE,KAAK,EAAE,aAAa,CAAC,MAAM,EAAE;gBAChE,MAAM,EAAE,EAAE,MAAM,EAAE,eAAe,EAAE,KAAK,EAAE,eAAe,CAAC,MAAM,EAAE;aACnE;;QATH,IAAI;;;YAUJ,IAAI,IAAI,CAAC,YAAY,EAAE;;sCAGf,OAAO;;4BAFb,KAAK;4BAAL,KAAK,CACF,KAAK;4BADR,KAAK,CAEF,EAAE,CAAC,OAAO;4BAFb,KAAK,CAGF,UAAU,CAAC;gCACV,IAAI,EAAE,EAAE,MAAM,EAAE,eAAe,EAAE,KAAK,EAAE,eAAe,CAAC,KAAK,EAAE;6BAChE;4BALH,KAAK,CAMF,OAAO,CAAC,GAAG,EAAE;gCACZ,MAAM,CAAC,IAAI,EAAE,CAAA;4BACf,CAAC;;;;aACJ;;;;aAAA;;;QArBH,iBAAiB;QAFnB,MAAM;KA8BP",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/http/Apis.ts": {
    "version": 3,
    "file": "Apis.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/http/Apis.ets"
    ],
    "names": [],
    "mappings": "AAAA,MAAM,OAAO,IAAI;IACf,IAAI;IACJ,MAAM,CAAC,QAAQ,CAAC,aAAa,GAAG,2BAA2B,CAAA;IAC3D,YAAY;IACZ,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,sBAAsB,CAAA;IACnD,QAAQ;IACR,MAAM,CAAC,QAAQ,CAAC,WAAW,GAAG,0BAA0B,CAAA;IACxD,QAAQ;IACR,MAAM,CAAC,QAAQ,CAAC,SAAS,GAAG,iBAAiB,CAAA;IAC7C,OAAO;IACP,MAAM,CAAC,QAAQ,CAAC,mBAAmB,GAAG,sBAAsB,CAAA;IAC5D,OAAO;IACP,MAAM,CAAC,QAAQ,CAAC,gBAAgB,GAAG,mBAAmB,CAAA;IACtD,QAAQ;IACR,MAAM,CAAC,QAAQ,CAAC,YAAY,GAAG,oBAAoB,CAAA;IACnD,MAAM;IACN,MAAM,CAAC,QAAQ,CAAC,YAAY,GAAG,sBAAsB,CAAA;IACrD,MAAM;IACN,MAAM,CAAC,QAAQ,CAAC,WAAW,GAAG,qBAAqB,CAAA;IACnD,UAAU;IACV,MAAM,CAAC,QAAQ,CAAC,iBAAiB,GAAG,qBAAqB,CAAA;CAC1D",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/http/httpUtils.ts": {
    "version": 3,
    "file": "httpUtils.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/http/httpUtils.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/http/index.ts": {
    "version": 3,
    "file": "index.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/http/index.ets"
    ],
    "names": [],
    "mappings": "OAAO,EAAE,cAAc,EAAE",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/http/response.ts": {
    "version": 3,
    "file": "response.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/http/response.ets"
    ],
    "names": [],
    "mappings": "AAAA,MAAM,OAAO,cAAc;IACzB,IAAI,CAAC,EAAE,MAAM,CAAA;IACb,OAAO,CAAC,EAAE,MAAM,CAAA;IAChB,IAAI,CAAC,EAAE,MAAM,CAAA;CACd",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/manager/index.ts": {
    "version": 3,
    "file": "index.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/manager/index.ets"
    ],
    "names": [],
    "mappings": "",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/manager/RoutePageConst.ts": {
    "version": 3,
    "file": "RoutePageConst.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/manager/RoutePageConst.ets"
    ],
    "names": [],
    "mappings": "AAAA,MAAM,OAAO,cAAc;IACzB,MAAM,CAAC,QAAQ,CAAC,WAAW,GAAG,eAAe,CAAA,CAAC,UAAU;IACxD,MAAM,CAAC,QAAQ,CAAC,SAAS,GAAG,iBAAiB,CAAA,CAAC,UAAU;CACzD",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/manager/StorageConst.ts": {
    "version": 3,
    "file": "StorageConst.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/manager/StorageConst.ets"
    ],
    "names": [],
    "mappings": "AAAA,MAAM,OAAO,YAAY;IACvB,MAAM,CAAC,QAAQ,CAAC,KAAK,GAAG,OAAO,CAAA;IAC/B,MAAM,CAAC,QAAQ,CAAC,SAAS,GAAG,UAAU,CAAA;IACtC,OAAO;IACP,MAAM,CAAC,QAAQ,CAAC,eAAe,GAAG,eAAe,CAAA;IACjD,MAAM,CAAC,QAAQ,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;IACnD,UAAU;IACV,MAAM,CAAC,QAAQ,CAAC,iBAAiB,GAAG,iBAAiB,CAAA;IACrD,MAAM,CAAC,QAAQ,CAAC,cAAc,GAAG,gBAAgB,CAAA;CAClD",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/manager/UserCenterConst.ts": {
    "version": 3,
    "file": "UserCenterConst.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/manager/UserCenterConst.ets"
    ],
    "names": [],
    "mappings": "OAAO,EAAE,YAAY,EAAE;cACd,YAAY,QAAQ,wBAAwB;OAC9C,EAAE,aAAa,EAAE;AAExB,MAAM,eAAe;IACnB,QAAQ,EAAE,YAAY,GAAG,IAAI,GAAG,IAAI,CAAA;IAEpC,eAAe,IAAI,YAAY,GAAG,IAAI;QACpC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,IAAI,CAAC,QAAQ,CAAC;SACtB;QAED,MAAM,KAAK,GAAG,aAAa,CAAC,kBAAkB,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAE3E,eAAe;QACf,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YACtC,IAAI,CAAC,QAAQ,GAAG,KAAK,IAAI,YAAY,CAAC;YACtC,OAAO,IAAI,CAAC,QAAQ,CAAC;SACtB;QAED,cAAc;QACd,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,EAAE;YACtC,MAAM,CAAC,GAAG,SAAS,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YACzC,IAAI,CAAC,EAAE;gBACL,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;gBAClB,OAAO,IAAI,CAAC,QAAQ,CAAC;aACtB;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAED,SAAS,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,GAAG,CAAC,GAAG,SAAS;IAChD,IAAI;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KACzB;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,CAAC,aAAa,IAAI,WAAW,CAAC,EAAE,CAAC,CAAC;QAC/C,OAAO,SAAS,CAAC;KAClB;AACH,CAAC;AAED,eAAe,IAAI,eAAe,EAAE,CAAA",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/model/CommonDataSource.ts": {
    "version": 3,
    "file": "CommonDataSource.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/model/CommonDataSource.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/utils/ComponentUtils.ts": {
    "version": 3,
    "file": "ComponentUtils.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/utils/ComponentUtils.ets"
    ],
    "names": [],
    "mappings": ";;AAEA,MAAM,OAAO,cAAc;IACzB;;;;OAIG;IACH,MAAM,CAAC,sBAAsB,CAAC,WAAW,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,GAAG,IAAI;QACzF,OAAO;QACP,MAAM,QAAQ,GAAG,SAAS,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAA;QAC/D,OAAO;QACP,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;YACzB,MAAM,aAAa,GAAG,cAAc,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAA;YAClE,MAAM,MAAM,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YAC/C,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAA;YAClB,SAAS;YACT,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QACxB,CAAC,CAAC,CAAA;IACJ,CAAC;CACF",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/utils/formatDate.ts": {
    "version": 3,
    "file": "formatDate.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/utils/formatDate.ets"
    ],
    "names": [],
    "mappings": "AAAA,eAAe;AACf,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,OAAO,EAAC,MAAM,EAAC,EAAE;IAC1C,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAA;IAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAChC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAC3D,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACpD,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACvD,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAC3D,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAE3D,OAAO,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,OAAO,IAAI,OAAO,EAAE,CAAC;AAClE,CAAC,CAAA",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/utils/GlobalContext.ts": {
    "version": 3,
    "file": "GlobalContext.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/utils/GlobalContext.ets"
    ],
    "names": [],
    "mappings": "AACA,iCAAiC;AACjC,MAAM,OAAO,aAAa;IACxB,MAAM,CAAC,QAAQ,CAAC,OAAO,GAAG,SAAS,CAAC;IACpC,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC;IAC9B,OAAO;IACP,MAAM,CAAC,QAAQ,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IACtD,OAAO;IACP,MAAM,CAAC,QAAQ,CAAC,iBAAiB,GAAG,kBAAkB,CAAC;IAEvD,OAAO,iBAAiB,CAAC;IACzB,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,aAAa,CAAC;IACvC,OAAO,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,MAAM,GAAG,CAAC;IAE7C,MAAM,CAAC,MAAM,CAAC,UAAU,IAAI,aAAa;QACvC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YAC3B,aAAa,CAAC,QAAQ,GAAG,IAAI,aAAa,EAAE,CAAC;SAC9C;QACD,OAAO,aAAa,CAAC,QAAQ,CAAC;IAChC,CAAC;IAED,SAAS,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,GAAG,SAAS;QAC1C,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,SAAS,CAAC,GAAG,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,GAAG,IAAI;QAC/C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IACtC,CAAC;CACF",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/utils/index.ts": {
    "version": 3,
    "file": "index.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/utils/index.ets"
    ],
    "names": [],
    "mappings": ";;;OAMO,EAAE,WAAW,EAAE;OAEf,EAAE,kBAAkB,EAAE,aAAa,EAAE;;OAIrC,EAAE,UAAU,EAAE",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/utils/ScreenUtil.ts": {
    "version": 3,
    "file": "ScreenUtil.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/utils/ScreenUtil.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/utils/StorageUtils.ts": {
    "version": 3,
    "file": "StorageUtils.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/utils/StorageUtils.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/utils/TextUtil.ts": {
    "version": 3,
    "file": "TextUtil.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/utils/TextUtil.ets"
    ],
    "names": [],
    "mappings": "OAAO,OAAO;AACd,MAAM,OAAO,QAAQ;IACnB,MAAM,CAAC,YAAY,CAAC,WAAW,EAAE,MAAM,EACrC,QAAQ,EAAE,MAAM,GAAG,MAAM,GAAG,QAAQ,uHAA+B,EAAE,QAAQ,EAAE,MAAM,GAAG,CAAC,EACzF,MAAM,EAAE,UAAU,GAAG,MAAM,GAAG,UAAU,CAAC,OAAO,GAAG,MAAM;QAEzD,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5C,OAAO,CAAC,CAAA;SACT;QAED,MAAM,KAAK,EAAE,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC;YACxC,WAAW,EAAE,WAAW;YACxB,QAAQ,EAAE,QAAQ;YAClB,UAAU,EAAE,MAAM;YAClB,QAAQ,EAAE,QAAQ;SACnB,CAAC,CAAA;QACF,OAAO,KAAK,CAAC,KAAK,CAAC,CAAA;IACrB,CAAC;CACF",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/utils/WindowModel.ts": {
    "version": 3,
    "file": "WindowModel.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/utils/WindowModel.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/widgets/BottomPop.ts": {
    "version": 3,
    "file": "BottomPop.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/widgets/BottomPop.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/widgets/index.ts": {
    "version": 3,
    "file": "index.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/widgets/index.ets"
    ],
    "names": [],
    "mappings": "",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/widgets/ShowToast.ts": {
    "version": 3,
    "file": "ShowToast.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/widgets/ShowToast.ets"
    ],
    "names": [],
    "mappings": ";AAEA,QAAQ;AAER,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,WAAW,EAAE,MAAM,GAAG,WAAW,EAAE,SAAS,EAAE,SAAS,GAAG,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE;IACxG,YAAY,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAA;AACxE,CAAC,CAAA",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/charge|1.0.0|src/main/ets/model/ChargeModel.ts": {
    "version": 3,
    "file": "ChargeModel.ets",
    "sourceRoot": "",
    "sources": [
      "feature/charge/src/main/ets/model/ChargeModel.ets"
    ],
    "names": [],
    "mappings": "AAAA,MAAM,OAAO,cAAc;IACzB,MAAM,CAAC,EAAE,MAAM,CAAA;IACf,QAAQ,CAAC,EAAE,MAAM,CAAA;IACjB,UAAU,CAAC,EAAE,MAAM,CAAA;IACnB,IAAI,CAAC,EAAE,UAAU,EAAE,CAAA;CACpB;AAED,MAAM,OAAO,UAAU;IACrB,OAAO,CAAC,EAAE,MAAM,CAAA,CAAC,IAAI;IACrB,UAAU,CAAC,EAAE,MAAM,CAAA,CAAC,IAAI;IACxB,QAAQ,CAAC,EAAE,MAAM,CAAA,CAAC,IAAI;IACtB,aAAa,CAAC,EAAE,MAAM,CAAA,CAAC,MAAM;IAC7B,EAAE,CAAC,EAAE,MAAM,CAAA,CAAC,IAAI;IAChB,QAAQ,CAAC,EAAE,MAAM,CAAA,CAAC,IAAI;IACtB,IAAI,CAAC,EAAE,MAAM,CAAA,CAAC,IAAI;IAClB,SAAS,CAAC,EAAE,MAAM,CAAA,CAAC,MAAM;IACzB,YAAY,CAAC,EAAE,MAAM,CAAA,CAAC,OAAO;IAC7B,QAAQ,CAAC,EAAE,MAAM,CAAA,CAAC,MAAM;IACxB,UAAU,CAAC,EAAE,MAAM,CAAA,CAAC,IAAI;CACzB;AAED,MAAM,OAAO,YAAY;IACvB,MAAM,CAAC,EAAE,MAAM,CAAA;IACf,QAAQ,CAAC,EAAE,MAAM,CAAA;IACjB,UAAU,CAAC,EAAE,MAAM,CAAA;IACnB,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAA;CAClB;AAED,MAAM,OAAO,QAAQ;IACnB,IAAI,CAAC,EAAE,MAAM,CAAA,CAAC,IAAI;IAClB,EAAE,CAAC,EAAE,MAAM,CAAA,CAAC,IAAI;IAChB,KAAK,CAAC,EAAE,MAAM,CAAA,CAAC,OAAO;IACtB,SAAS,CAAC,EAAE,MAAM,CAAA,CAAC,QAAQ;IAC3B,WAAW,CAAC,EAAE,MAAM,CAAA,CAAC,OAAO;CAC7B;AAED,MAAM,OAAO,aAAa;IACxB,MAAM,CAAC,EAAE,MAAM,CAAA;IACf,QAAQ,CAAC,EAAE,MAAM,CAAA;IACjB,UAAU,CAAC,EAAE,MAAM,CAAA;IACnB,IAAI,CAAC,EAAE,SAAS,EAAE,CAAA;CACnB;AAED,MAAM,OAAO,SAAS;IACpB,OAAO,CAAC,EAAE,MAAM,GAAC,MAAM,CAAA,CAAE,MAAM;IAC/B,EAAE,CAAC,EAAE,MAAM,CAAA,CAAE,IAAI;IACjB,KAAK,CAAC,EAAE,MAAM,CAAA,CAAG,IAAI;IACrB,SAAS,CAAC,EAAE,MAAM,GAAC,MAAM,CAAA,CAAE,MAAM;IACjC,QAAQ,CAAC,EAAE,MAAM,CAAA,CAAE,MAAM;CAC1B;AAED,MAAM,OAAO,aAAa;IACxB,MAAM,CAAC,EAAE,MAAM,CAAA;IACf,QAAQ,CAAC,EAAE,MAAM,CAAA;IACjB,UAAU,CAAC,EAAE,MAAM,CAAA;IACnB,IAAI,CAAC,EAAE,SAAS,EAAE,CAAA;CACnB;AAED,MAAM,OAAO,SAAS;IACpB,EAAE,CAAC,EAAE,MAAM,CAAA,CAAE,IAAI;IACjB,QAAQ,CAAC,EAAE,MAAM,CAAA,CAAE,OAAO;IAC1B,SAAS,CAAC,EAAE,MAAM,CAAA,CAAE,KAAK;IACzB,KAAK,CAAC,EAAE,MAAM,CAAA,CAAE,IAAI;IACpB,OAAO,CAAC,EAAE,MAAM,CAAA,CAAE,MAAM;IACxB,KAAK,CAAC,EAAE,MAAM,CAAA,CAAE,MAAM;IACtB,WAAW,CAAC,EAAE,MAAM,CAAA,CAAE,MAAM;IAC5B,MAAM,CAAC,EAAE,MAAM,CAAA,CAAE,MAAM;CACxB;AAED,MAAM,OAAO,WAAW;IACtB,IAAI,EAAE,WAAW,GAAG,EAAE,CAAA;IACtB,IAAI,EAAE,MAAM,GAAG,EAAE,CAAA;IACjB,YAAY,EAAE,OAAO,GAAG,KAAK,CAAA;CAC9B;AAED,MAAM,OAAO,WAAW;IACtB,QAAQ,CAAC,EAAE,MAAM,GAAG,GAAG,CAAC;IACxB,SAAS,CAAC,EAAE,MAAM,GAAG,GAAG,CAAC;CAC1B;AAED,KAAK;AACL,MAAM,CAAC,MAAM,SAAS,EAAE,KAAK,CAAC,aAAa,CAAC,GAAG;IAC7C,EAAE,IAAI,sHAA8B,EAAE,IAAI,EAAE,GAAG,EAAE;IACjD,EAAE,IAAI,sHAAwB,EAAE,IAAI,EAAE,GAAG,EAAE;IAC3C,EAAE,IAAI,sHAAqB,EAAE,IAAI,EAAE,GAAG,EAAE;IACxC,EAAE,IAAI,sHAAoC,EAAE,IAAI,EAAE,GAAG,EAAE;CACxD,CAAA;AAED,MAAM,OAAO,aAAa;IACxB,IAAI,CAAC,EAAE,WAAW,CAAA;IAClB,IAAI,CAAC,EAAE,MAAM,CAAA;CACd",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/charge|1.0.0"
  },
  "entry|@tbs/charge|1.0.0|src/main/ets/page/ChargeOrderPage.ts": {
    "version": 3,
    "file": "ChargeOrderPage.ets",
    "sourceRoot": "",
    "sources": [
      "feature/charge/src/main/ets/page/ChargeOrderPage.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/charge|1.0.0"
  },
  "entry|@tbs/charge|1.0.0|src/main/ets/page/ChargingPage.ts": {
    "version": 3,
    "file": "ChargingPage.ets",
    "sourceRoot": "",
    "sources": [
      "feature/charge/src/main/ets/page/ChargingPage.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/charge|1.0.0"
  },
  "entry|@tbs/charge|1.0.0|src/main/ets/view/ChargeItemDialogView.ts": {
    "version": 3,
    "file": "ChargeItemDialogView.ets",
    "sourceRoot": "",
    "sources": [
      "feature/charge/src/main/ets/view/ChargeItemDialogView.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/charge|1.0.0"
  },
  "entry|@tbs/charge|1.0.0|src/main/ets/view/ChargeListView.ts": {
    "version": 3,
    "file": "ChargeListView.ets",
    "sourceRoot": "",
    "sources": [
      "feature/charge/src/main/ets/view/ChargeListView.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/charge|1.0.0"
  },
  "entry|@tbs/charge|1.0.0|src/main/ets/view/ChargePriceDialogView.ts": {
    "version": 3,
    "file": "ChargePriceDialogView.ets",
    "sourceRoot": "",
    "sources": [
      "feature/charge/src/main/ets/view/ChargePriceDialogView.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/charge|1.0.0"
  },
  "entry|@tbs/charge|1.0.0|src/main/ets/view/ChargeSearchBarView.ts": {
    "version": 3,
    "file": "ChargeSearchBarView.ets",
    "sourceRoot": "",
    "sources": [
      "feature/charge/src/main/ets/view/ChargeSearchBarView.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/charge|1.0.0"
  },
  "entry|@tbs/charge|1.0.0|src/main/ets/viewModel/ChargeViewModel.ts": {
    "version": 3,
    "file": "ChargeViewModel.ets",
    "sourceRoot": "",
    "sources": [
      "feature/charge/src/main/ets/viewModel/ChargeViewModel.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/charge|1.0.0"
  },
  "entry|@tbs/mine|1.0.0|src/main/ets/model/MineModel.ts": {
    "version": 3,
    "file": "MineModel.ets",
    "sourceRoot": "",
    "sources": [
      "feature/mine/src/main/ets/model/MineModel.ets"
    ],
    "names": [],
    "mappings": "AAAA,MAAM,OAAO,YAAY;IACvB,EAAE,CAAC,EAAE,MAAM,CAAA;IACX,QAAQ,CAAC,EAAE,MAAM,CAAA;IACjB,QAAQ,CAAC,EAAE,MAAM,CAAA;IACjB,OAAO,CAAC,EAAE,MAAM,CAAA;IAChB,SAAS,CAAC,EAAE,MAAM,CAAA;CACnB;AAED,MAAM,OAAO,SAAS;IACpB,IAAI,CAAC,EAAE,MAAM,CAAA;IACb,IAAI,CAAC,EAAE,WAAW,CAAA;IAClB,KAAK,CAAC,EAAE,WAAW,CAAA;CACpB;AAED,MAAM,CAAC,MAAM,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,GAAG;IACzC,EAAE,IAAI,sHAA4B,EAAE,KAAK,sHAA2B,EAAE;IACtE,EAAE,IAAI,sHAAgC,EAAE,KAAK,sHAA+B,EAAE;IAC9E,EAAE,IAAI,sHAAuB,EAAE,KAAK,sHAAsB,EAAE;IAC5D,EAAE,IAAI,sHAA0B,EAAE,KAAK,sHAAyB,EAAE;IAClE,EAAE,IAAI,sHAAyB,EAAE,KAAK,sHAAwB,EAAE;IAChE,EAAE,IAAI,sHAAuB,EAAE,KAAK,sHAAsB,EAAE;CAC7D,CAAA;AAED,MAAM,CAAC,MAAM,kBAAkB,EAAE,KAAK,CAAC,SAAS,CAAC,GAAG;IAClD,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,sHAAwB,EAAE,KAAK,sHAAuB,EAAE;IACvE,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,sHAA0B,EAAE,KAAK,sHAAyB,EAAE;CAC5E,CAAA",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/mine|1.0.0"
  },
  "entry|@tbs/mine|1.0.0|src/main/ets/view/MineContentView.ts": {
    "version": 3,
    "file": "MineContentView.ets",
    "sourceRoot": "",
    "sources": [
      "feature/mine/src/main/ets/view/MineContentView.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/mine|1.0.0"
  },
  "entry|@tbs/mine|1.0.0|src/main/ets/view/MineHeaderView.ts": {
    "version": 3,
    "file": "MineHeaderView.ets",
    "sourceRoot": "",
    "sources": [
      "feature/mine/src/main/ets/view/MineHeaderView.ets"
    ],
    "names": [],
    "mappings": ";;;;IAME,YAAY,GAAE,YAAY,GAAG,IAAI;;OAN5B,EAAE,WAAW,EAAE,UAAU,EAAE;cACzB,YAAY,QAAQ,oBAAoB;OAC1C,eAAe;AAGtB,MAAM,OAAQ,cAAc;IAD5B;;;;;4BAEsC,eAAe,CAAC,eAAe,EAAE;;;KAJO;;;;;;;;;;;;;;IAI5E,sBAAc,YAAY,GAAG,IAAI,CAAoC;IAErE;;YACE,MAAM;YAAN,MAAM,CAKL,KAAK,CAAC,UAAU,CAAC,UAAU;YAL5B,MAAM,CAML,MAAM,CAAC,UAAU,CAAC,UAAU;YAN7B,MAAM,CAOL,eAAe;;;YANd,KAAK;YAAL,KAAK,CAAG,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,kBAAkB,EAAE;YAA7D,KAAK,CAA0D,eAAe;;QAA9E,KAAK;;YACL,KAAK;YAAL,KAAK,CAA4B,KAAK;YAAtC,KAAK,CAA2D,YAAY;;;YAC5E,IAAI,QAAC,IAAI,CAAC,YAAY,EAAE,QAAQ;YAAhC,IAAI,CAA8B,SAAS,CAAC,KAAK,CAAC,KAAK;;QAAvD,IAAI;QAHN,MAAM;KAQP",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/mine|1.0.0"
  },
  "entry|entry|1.0.0|src/main/ets/home/HomePage.ts": {
    "version": 3,
    "file": "HomePage.ets",
    "sourceRoot": "",
    "sources": [
      "entry/src/main/ets/home/HomePage.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0"
  },
  "entry|entry|1.0.0|src/main/ets/home/viewModel/homeData.ts": {
    "version": 3,
    "file": "homeData.ets",
    "sourceRoot": "",
    "sources": [
      "entry/src/main/ets/home/viewModel/homeData.ets"
    ],
    "names": [],
    "mappings": "AACA,MAAM,OAAO,eAAe;IAC1B,KAAK,EAAE,MAAM,GAAG,CAAC,CAAC;IAClB,GAAG,EAAE,QAAQ,wHAAwB;IACrC,SAAS,EAAE,QAAQ,wHAA+B;IAClD,KAAK,EAAE,QAAQ,wHAA2B;CAC3C;AAED,MAAM,UAAU,EAAE,eAAe,EAAE,GAAG;IACpC;QACE,KAAK,EAAE,CAAC;QACR,GAAG,sHAAsB;QACzB,SAAS,sHAA6B;QACtC,KAAK,sHAAyB;KAC/B;IACD;QACE,KAAK,EAAE,CAAC;QACR,GAAG,sHAAsB;QACzB,SAAS,sHAA6B;QACtC,KAAK,sHAAuB;KAC7B;IACD;QACE,KAAK,EAAE,CAAC;QACR,GAAG,sHAAoB;QACvB,SAAS,sHAA2B;QACpC,KAAK,sHAAuB;KAC7B;CACF,CAAA;AAED,OAAO,EAAE,UAAU,EAAE,CAAA",
    "entry-package-info": "entry|1.0.0"
  },
  "entry|entry|1.0.0|src/main/ets/login/LoginPage.ts": {
    "version": 3,
    "file": "LoginPage.ets",
    "sourceRoot": "",
    "sources": [
      "entry/src/main/ets/login/LoginPage.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0"
  },
  "entry|entry|1.0.0|src/main/ets/login/viewModel/LoginViewModel.ts": {
    "version": 3,
    "file": "LoginViewModel.ets",
    "sourceRoot": "",
    "sources": [
      "entry/src/main/ets/login/viewModel/LoginViewModel.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0"
  },
  "entry|entry|1.0.0|src/main/ets/register/RegisterPage.ts": {
    "version": 3,
    "file": "RegisterPage.ets",
    "sourceRoot": "",
    "sources": [
      "entry/src/main/ets/register/RegisterPage.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0"
  },
  "entry|entry|1.0.0|src/main/ets/register/viewModel/RegisterViewModel.ts": {
    "version": 3,
    "file": "RegisterViewModel.ets",
    "sourceRoot": "",
    "sources": [
      "entry/src/main/ets/register/viewModel/RegisterViewModel.ets"
    ],
    "names": [],
    "mappings": ";OAEO,EAAE,IAAI,EAAE,cAAc,EAAE;AAE/B,IAAI;AACJ,MAAM,UAAU,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,EACpG,SAAS,EAAE,MAAM;IACjB,2CAA2C;IAC3C,kBAAkB;IAClB,sBAAsB;IACtB,oCAAoC;IACpC,oCAAoC;IACpC,2BAA2B;IAC3B,IAAI;IACJ,OAAO,cAAc,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAA,EAAE;IAEzH,CAAC,CAAC,CAAA;AACJ,CAAC",
    "entry-package-info": "entry|1.0.0"
  },
  "entry|@tbs/scan|1.0.0|Index.ts": {
    "version": 3,
    "file": "Index.ets",
    "sourceRoot": "",
    "sources": [
      "feature/scan/Index.ets"
    ],
    "names": [],
    "mappings": "OAAO,EAAE,QAAQ,EAAE",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/scan|1.0.0"
  },
  "entry|@tbs/scan|1.0.0|src/main/ets/page/ScanPage.ts": {
    "version": 3,
    "file": "ScanPage.ets",
    "sourceRoot": "",
    "sources": [
      "feature/scan/src/main/ets/page/ScanPage.ets"
    ],
    "names": [],
    "mappings": ";;;;;AAEA,MAAM,OAAQ,QAAQ;IADtB;;;;;;;KADA;;;;;;;;;;;IAGE;;YACE,IAAI,QAAC,UAAU;;QAAf,IAAI;KACL",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/scan|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/location/AppBundleManager.ts": {
    "version": 3,
    "file": "AppBundleManager.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/location/AppBundleManager.ets"
    ],
    "names": [],
    "mappings": ";AAEA,MAAM,gBAAgB;IACpB,OAAO,CAAC,UAAU,CAAC,EAAE,aAAa,CAAC,UAAU,CAAA;IAE7C,aAAa,IAAI,aAAa,CAAC,UAAU;QACvC,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,IAAI,IAAI,CAAC,UAAU,IAAI,SAAS,EAAE;YAC3D,OAAO,aAAa,CAAC,wBAAwB,CAAC,aAAa,CAAC,UAAU,CAAC,gCAAgC,CAAC,CAAA;SACzG;QACD,OAAO,IAAI,CAAC,UAAU,CAAA;IACxB,CAAC;IAED,UAAU,IAAI,MAAM;QAClB,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACtC,OAAO,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC;IAC1C,CAAC;CACF;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,EAAE,CAAA",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/location/index.ts": {
    "version": 3,
    "file": "index.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/location/index.ets"
    ],
    "names": [],
    "mappings": "",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/location/LocationManager.ts": {
    "version": 3,
    "file": "LocationManager.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/location/LocationManager.ets"
    ],
    "names": [],
    "mappings": ";OACO,EAAE,eAAe,EAAE;OACnB,EAAE,iBAAiB,EAAE;AAE5B,MAAM,eAAe;IAEnB,KAAK,CAAC,sBAAsB;QAC1B,OAAO,MAAM,iBAAiB,CAAC,sBAAsB,CAAC,eAAe,CAAC,mBAAmB,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAA;IAC9G,CAAC;IACD,+BAA+B;IAC/B,KAAK,CAAC,wBAAwB,IAAI,OAAO,CAAC,OAAO,CAAC;QAChD,IAAI;YACF,OAAO,MAAM,iBAAiB,CAAC,gBAAgB,CAAC,eAAe,CAAC,mBAAmB,CAAC;gBACpF,kBAAkB,CAAC,iBAAiB,EAAE,CAAC;SACxC;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,kCAAkC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;YAClE,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED,8CAA8C;IAC9C,KAAK,CAAC,wBAAwB,CAAC,OAAO,EAAE,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAChE,IAAI,SAAS,GAAG,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;QACtD,IAAI,SAAS,EAAE;YACb,OAAO,IAAI,CAAC;SACb;QACD,IAAI;YACF,IAAI,WAAW,GAAG,MAAM,iBAAiB,CAAC,sBAAsB,CAAC,eAAe,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;YAC/G,IAAI,WAAW,EAAE;gBACf,OAAO,IAAI,CAAC;aACb;iBAAM;gBACL,OAAO,KAAK,CAAC;aACd;SACF;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SAC1B;IACH,CAAC;CACF;AAED,MAAM,CAAC,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAA",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/location/PermissionConst.ts": {
    "version": 3,
    "file": "PermissionConst.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/location/PermissionConst.ets"
    ],
    "names": [],
    "mappings": ";AAEA,MAAM,OAAO,eAAe;IAC1B,MAAM,CAAC,QAAQ,CAAC,mBAAmB,EAAE,KAAK,CAAC,WAAW,CAAC,GAAG;QACxD,wCAAwC;QACxC,0BAA0B;KAC3B,CAAC;IACF,MAAM,CAAC,QAAQ,CAAC,kBAAkB,EAAE,KAAK,CAAC,WAAW,CAAC,GAAG;QACvD,4BAA4B;QAC5B,6BAA6B;KAC9B,CAAC;IACF,MAAM,CAAC,QAAQ,CAAC,wBAAwB,EAAE,WAAW,GAAG,iCAAiC,CAAC;IAC1F,MAAM,CAAC,QAAQ,CAAC,yBAAyB,EAAE,WAAW,GAAG,kCAAkC,CAAC;IAC5F,MAAM,CAAC,QAAQ,CAAC,gBAAgB,EAAE,WAAW,GAAG,wBAAwB,CAAC;IACzE,SAAS;IACT,MAAM,CAAC,QAAQ,CAAC,cAAc,EAAE,WAAW,GAAG,sCAAsC,CAAC;CACtF",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/location/PermissionManager.ts": {
    "version": 3,
    "file": "PermissionManager.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/location/PermissionManager.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/common|1.0.0|src/main/ets/location/ThirdAppManager.ts": {
    "version": 3,
    "file": "ThirdAppManager.ets",
    "sourceRoot": "",
    "sources": [
      "common/src/main/ets/location/ThirdAppManager.ets"
    ],
    "names": [],
    "mappings": ";;AAGA,MAAM,MAAM,QAAQ;IAClB,MAAM,eAAe;IACrB,OAAO,eAAe;IACtB,QAAQ,6BAA6B;IACrC,IAAI,YAAY;IAChB,KAAK,aAAa,CAAC,kBAAkB;CACtC;AAED,MAAM,eAAe;IACnB,gBAAgB;IAChB,YAAY,CAAC,QAAQ,EAAE,QAAQ,GAAG,OAAO;QACvC,IAAI;YACF,OAAO,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;SAC3C;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,IAAI,GAAG,CAAC,CAAC,IAAI,aAAa,CAAC,EAAE,IAAI,CAAA;YACrC,IAAI,GAAG,GAAG,CAAC,CAAC,IAAI,aAAa,CAAC,EAAE,OAAO,IAAI,EAAE,CAAA;YAC7C,IAAI,IAAI,KAAK,SAAS,EAAE;gBACtB,IAAI,IAAI,KAAK,QAAQ,EAAE;oBACrB,GAAG,IAAI,oBAAoB,QAAQ,CAAC,OAAO,CAAC,KAAK,EAC/C,EAAE,CAAC,yEAAyE,CAAA;iBAC/E;gBACD,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,EAAE,CAAC,CAAA;aAC5C;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,EAAE,CAAC,CAAA;aAC1C;YACD,OAAO,KAAK,CAAA;SACb;IACH,CAAC;CACF;AAED,MAAM,CAAC,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAA",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/common|1.0.0"
  },
  "entry|@tbs/charge|1.0.0|src/main/ets/view/MapDialogCall.ts": {
    "version": 3,
    "file": "MapDialogCall.ets",
    "sourceRoot": "",
    "sources": [
      "feature/charge/src/main/ets/view/MapDialogCall.ets"
    ],
    "names": [],
    "mappings": "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",
    "entry-package-info": "entry|1.0.0",
    "package-info": "@tbs/charge|1.0.0"
  }
}
export class ChargeListData {
    PageNo?: number;
    PageSize?: number;
    TotalCount?: number;
    List?: ChargeType[];
}
export class ChargeType {
    address?: string; 
    coordinate?: string; 
    distance?: number; 
    freePileTotal?: number; 
    id?: number; 
    imageUrl?: string; 
    name?: string; 
    pileTotal?: number; 
    pricePerHour?: number; 
    tenantId?: number; 
    tenantName?: string; 
}
export class PileListData {
    PageNo?: number;
    PageSize?: number;
    TotalCount?: number;
    List?: PileType[];
}
export class PileType {
    code?: string; 
    id?: number; 
    state?: number; 
    stationId?: number; 
    stationName?: string; 
}
export class PriceListData {
    PageNo?: number;
    PageSize?: number;
    TotalCount?: number;
    List?: PriceType[];
}
export class PriceType {
    endHour?: number | string; 
    id?: number; 
    price?: string; 
    startHour?: number | string; 
    tenantId?: number; 
}
export class OrderTypeData {
    PageNo?: number;
    PageSize?: number;
    TotalCount?: number;
    List?: OrderType[];
}
export class OrderType {
    id?: number; 
    pileCode?: string; 
    orderCode?: string; 
    price?: number; 
    startAt?: string; 
    state?: number; 
    stationName?: string; 
    stopAt?: string; 
}
export class mapListItem {
    name: ResourceStr = '';
    link: string = '';
    isAppInstall: boolean = false;
}
export class AddressData {
    latitude?: number = 0.0;
    longitude?: number = 0.0;
}
export const pileParam: Array<pileParamType> = [
    { text: { "id": 50331660, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, type: '1' },
    { text: { "id": 50331649, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, type: '2' },
    { text: { "id": 50331648, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, type: '3' },
    { text: { "id": 50331671, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, type: '4' }
];
export class pileParamType {
    text?: ResourceStr;
    type?: string;
}
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface HomePage_Params {
    controller?: TabsController;
    currentIndex?: number;
}
import { StyleConst } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import { ChargePage } from "@normalized:N&&&@tbs/charge/Index&1.0.0";
import { MinePage } from "@normalized:N&&&@tbs/mine/Index&1.0.0";
import { ScanPage } from "@normalized:N&&&@tbs/scan/Index&1.0.0";
import { buttonInfo } from "@normalized:N&&&entry/src/main/ets/home/viewModel/homeData&";
import type { ButtonInfoModel } from "@normalized:N&&&entry/src/main/ets/home/viewModel/homeData&";
class HomePage extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.controller = new TabsController();
        this.__currentIndex = new ObservedPropertySimplePU(0, this, "currentIndex");
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: HomePage_Params) {
        if (params.controller !== undefined) {
            this.controller = params.controller;
        }
        if (params.currentIndex !== undefined) {
            this.currentIndex = params.currentIndex;
        }
    }
    updateStateVars(params: HomePage_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__currentIndex.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__currentIndex.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private controller: TabsController;
    private __currentIndex: ObservedPropertySimplePU<number>;
    get currentIndex() {
        return this.__currentIndex.get();
    }
    set currentIndex(newValue: number) {
        this.__currentIndex.set(newValue);
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Flex.create({ direction: FlexDirection.Column, justifyContent: FlexAlign.End, alignItems: ItemAlign.Center });
            Flex.borderWidth(1);
            Flex.borderColor(Color.Blue);
        }, Flex);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Tabs.create({ barPosition: BarPosition.End, index: 0, controller: this.controller });
            Tabs.width(StyleConst.FULL_WIDTH);
            Tabs.height(StyleConst.FULL_HEIGHT);
            Tabs.vertical(false);
            Tabs.scrollable(false);
            Tabs.animationDuration(0);
            Tabs.divider({ strokeWidth: 1, color: '#f0f2f4' });
            Tabs.barHeight({ "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Tabs.margin({ bottom: { "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
            Tabs.onChange((index) => {
                this.currentIndex = index;
            });
        }, Tabs);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            ForEach.create();
            const forEachItemGenFunction = (_item, index?: number) => {
                const item = _item;
                this.observeComponentCreation2((elmtId, isInitialRender) => {
                    TabContent.create(() => {
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            If.create();
                            if (index == 0) {
                                this.ifElseBranchUpdateFunction(0, () => {
                                    {
                                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                                            if (isInitialRender) {
                                                let componentCall = new ChargePage(this, {}, undefined, elmtId, () => { }, { page: "entry/src/main/ets/home/HomePage.ets", line: 18, col: 15 });
                                                ViewPU.create(componentCall);
                                                let paramsLambda = () => {
                                                    return {};
                                                };
                                                componentCall.paramsGenerator_ = paramsLambda;
                                            }
                                            else {
                                                this.updateStateVarsOfChildByElmtId(elmtId, {});
                                            }
                                        }, { name: "ChargePage" });
                                    }
                                });
                            }
                            else if (index == 1) {
                                this.ifElseBranchUpdateFunction(1, () => {
                                    {
                                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                                            if (isInitialRender) {
                                                let componentCall = new ScanPage(this, {}, undefined, elmtId, () => { }, { page: "entry/src/main/ets/home/HomePage.ets", line: 20, col: 15 });
                                                ViewPU.create(componentCall);
                                                let paramsLambda = () => {
                                                    return {};
                                                };
                                                componentCall.paramsGenerator_ = paramsLambda;
                                            }
                                            else {
                                                this.updateStateVarsOfChildByElmtId(elmtId, {});
                                            }
                                        }, { name: "ScanPage" });
                                    }
                                });
                            }
                            else if (index == 2) {
                                this.ifElseBranchUpdateFunction(2, () => {
                                    {
                                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                                            if (isInitialRender) {
                                                let componentCall = new MinePage(this, {}, undefined, elmtId, () => { }, { page: "entry/src/main/ets/home/HomePage.ets", line: 22, col: 15 });
                                                ViewPU.create(componentCall);
                                                let paramsLambda = () => {
                                                    return {};
                                                };
                                                componentCall.paramsGenerator_ = paramsLambda;
                                            }
                                            else {
                                                this.updateStateVarsOfChildByElmtId(elmtId, {});
                                            }
                                        }, { name: "MinePage" });
                                    }
                                });
                            }
                            else {
                                this.ifElseBranchUpdateFunction(3, () => {
                                });
                            }
                        }, If);
                        If.pop();
                    });
                    TabContent.tabBar({ builder: () => {
                            this.BottomNavigation.call(this, item);
                        } });
                }, TabContent);
                TabContent.pop();
            };
            this.forEachUpdateFunction(elmtId, buttonInfo, forEachItemGenFunction, undefined, true, false);
        }, ForEach);
        ForEach.pop();
        Tabs.pop();
        Flex.pop();
    }
    BottomNavigation(item: ButtonInfoModel, parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: 6 });
            Column.width(StyleConst.FULL_WIDTH);
            Column.height(StyleConst.FULL_HEIGHT);
            Column.alignItems(HorizontalAlign.Center);
            Column.justifyContent(FlexAlign.Center);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create(this.currentIndex === item.index ? item.selectImg : item.img);
            Image.objectFit(ImageFit.Contain);
            Image.width({ "id": 50331875, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.height({ "id": 50331875, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Image);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(item.title);
            Text.fontColor(this.currentIndex === item.index ? { "id": 50331705, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } : Color.Black);
            Text.opacity(this.currentIndex === item.index ? 1 : 0.6);
            Text.fontWeight(FontWeight.Medium);
            Text.textAlign(TextAlign.Center);
            Text.fontSize({ "id": 50332020, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Text);
        Text.pop();
        Column.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
    static getEntryName(): string {
        return "HomePage";
    }
}
registerNamedRoute(() => new HomePage(undefined, {}), "", { bundleName: "com.example.tbschargeharmonyos", moduleName: "entry", pagePath: "home/HomePage", pageFullPath: "entry/src/main/ets/home/HomePage", integratedHsp: "false", moduleType: "followWithHap" });
export * from "@normalized:N&&&@tbs/common/src/main/ets/widgets/ShowToast&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/widgets/BottomPop&1.0.0";
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface ChargeSearchBarView_Params {
    name?: string;
    cancelMode?: CancelButtonStyle;
    inputController?: TextInputController;
    keyboardFocus?: boolean;
    maxLength?: number;
    searchButtonCallback?: (value: string) => void 
    ;
}
import { ScreenUtils, StyleConst } from "@normalized:N&&&@tbs/common/Index&1.0.0";
function __TextInput__orderInputStyle(focus: boolean): void {
    TextInput.textAlign(TextAlign.Start);
    TextInput.fontColor(Color.Black);
    TextInput.placeholderColor({ "id": 50331710, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
    TextInput.placeholderFont({ size: { "id": 50332024, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
    TextInput.fontSize({ "id": 50332025, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
    TextInput.backgroundColor(Color.Transparent);
    TextInput.enterKeyType(EnterKeyType.Search);
    TextInput.defaultFocus(focus);
}
export class ChargeSearchBarView extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__name = new SynchedPropertySimpleTwoWayPU(params.name, this, "name");
        this.__cancelMode = new ObservedPropertySimplePU(CancelButtonStyle.INVISIBLE 
        , this, "cancelMode");
        this.inputController = undefined;
        this.keyboardFocus = false 
        ;
        this.maxLength = Infinity;
        this.searchButtonCallback = undefined;
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: ChargeSearchBarView_Params) {
        if (params.cancelMode !== undefined) {
            this.cancelMode = params.cancelMode;
        }
        if (params.inputController !== undefined) {
            this.inputController = params.inputController;
        }
        if (params.keyboardFocus !== undefined) {
            this.keyboardFocus = params.keyboardFocus;
        }
        if (params.maxLength !== undefined) {
            this.maxLength = params.maxLength;
        }
        if (params.searchButtonCallback !== undefined) {
            this.searchButtonCallback = params.searchButtonCallback;
        }
    }
    updateStateVars(params: ChargeSearchBarView_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__name.purgeDependencyOnElmtId(rmElmtId);
        this.__cancelMode.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__name.aboutToBeDeleted();
        this.__cancelMode.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private __name: SynchedPropertySimpleTwoWayPU<string>;
    get name() {
        return this.__name.get();
    }
    set name(newValue: string) {
        this.__name.set(newValue);
    }
    private __cancelMode: ObservedPropertySimplePU<CancelButtonStyle>; 
    get cancelMode() {
        return this.__cancelMode.get();
    }
    set cancelMode(newValue: CancelButtonStyle) {
        this.__cancelMode.set(newValue);
    }
    private inputController?: TextInputController;
    private keyboardFocus: boolean; 
    private maxLength: number;
    private searchButtonCallback?: (value: string) => void; 
    inputBuilder(parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.height({ "id": 50331947, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.clip(true);
            Row.layoutWeight(1);
            Row.backgroundColor({ "id": 50331718, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.borderRadius({ "id": 50331997, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.margin({ left: { "id": 50331975, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, right: { "id": 50331997, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 50332130, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.width({ "id": 50331808, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.height({ "id": 50331808, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.margin({ left: { "id": 50331986, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
        }, Image);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            TextInput.create({
                text: this.name,
                placeholder: { "id": 50331693, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                controller: this.inputController
            });
            __TextInput__orderInputStyle(this.keyboardFocus);
            TextInput.maxLines(this.maxLength);
            TextInput.layoutWeight(1);
            TextInput.cancelButton({
                style: this.cancelMode,
                icon: { src: { "id": 50332129, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, size: { "id": 50331764, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } }
            });
            TextInput.padding({ left: { "id": 50331975, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
            TextInput.onChange((value: string) => {
                this.name = value;
                if (value) {
                    this.cancelMode = CancelButtonStyle.INPUT;
                }
            });
            TextInput.onSubmit(() => {
                this.lostKeyboard();
                if (this.searchButtonCallback) {
                    this.searchButtonCallback(this.name);
                }
            });
        }, TextInput);
        Row.pop();
    }
    searchButtonBuilder(parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create({ "id": 50331692, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.fontSize({ "id": 50332025, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.fontColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.fontWeight(FontWeight.Medium);
            Text.height({ "id": 50331942, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.padding({ left: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, right: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
            Text.backgroundColor(Color.White);
            Text.borderRadius({ "id": 50331975, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.onClick(() => {
                if (this.searchButtonCallback) {
                    this.searchButtonCallback(this.name);
                }
                if (this.name) {
                    this.lostKeyboard();
                }
            });
        }, Text);
        Text.pop();
    }
    lostKeyboard() {
        if (this.inputController) {
            this.inputController.stopEditing();
        }
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.width(StyleConst.FULL_WIDTH);
            Column.backgroundColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Blank.create();
            Blank.height(ScreenUtils.getInstance().getStatusBarHeight());
            Blank.backgroundColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Blank);
        Blank.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.width(StyleConst.FULL_WIDTH);
            Row.padding({ left: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, right: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
            Row.margin({ bottom: { "id": 50331775, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
        }, Row);
        this.inputBuilder.bind(this)();
        this.searchButtonBuilder.bind(this)();
        Row.pop();
        Column.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
}
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface BottomPop_Params {
    controller?: CustomDialogController;
    title?: ResourceStr;
    titlePadding?: Padding;
    titleFontSize?: ResourceStr;
    titleTextColor?: ResourceColor;
    titleBgColor?: ResourceColor;
    contentBgColor?: ResourceColor;
    bgColor?: ResourceColor;
    keyBoardVisible?: boolean;
    keyboardAvoidMode?: KeyboardAvoidMode;
    minHeight?: Length;
    maxHeight?: Length;
    dialogMaxHeight?: number;
    childBuilderParam?: () => void;
}
import { StyleConst } from "@normalized:N&&&@tbs/common/src/main/ets/common/index&1.0.0";
import { ScreenUtils, WindowModel, ComponentUtils } from "@normalized:N&&&@tbs/common/src/main/ets/utils/index&1.0.0";
export class BottomPop extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.controller = undefined;
        this.title = '';
        this.titlePadding = { top: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, bottom: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } };
        this.titleFontSize = { "id": 50332027, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
        this.titleTextColor = Color.Black;
        this.titleBgColor = Color.Transparent;
        this.contentBgColor = Color.Transparent;
        this.bgColor = Color.White;
        this.__keyBoardVisible = new ObservedPropertySimplePU(false, this, "keyBoardVisible");
        this.keyboardAvoidMode = KeyboardAvoidMode.DEFAULT;
        this.minHeight = ScreenUtils.getInstance().getScreenHeightVp() * 0.3 
        ;
        this.maxHeight = ScreenUtils.getInstance().getScreenHeightVp() * 0.8 
        ;
        this.__dialogMaxHeight = new ObservedPropertySimplePU(0 
        , this, "dialogMaxHeight");
        this.childBuilderParam = this.child;
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: BottomPop_Params) {
        if (params.controller !== undefined) {
            this.controller = params.controller;
        }
        if (params.title !== undefined) {
            this.title = params.title;
        }
        if (params.titlePadding !== undefined) {
            this.titlePadding = params.titlePadding;
        }
        if (params.titleFontSize !== undefined) {
            this.titleFontSize = params.titleFontSize;
        }
        if (params.titleTextColor !== undefined) {
            this.titleTextColor = params.titleTextColor;
        }
        if (params.titleBgColor !== undefined) {
            this.titleBgColor = params.titleBgColor;
        }
        if (params.contentBgColor !== undefined) {
            this.contentBgColor = params.contentBgColor;
        }
        if (params.bgColor !== undefined) {
            this.bgColor = params.bgColor;
        }
        if (params.keyBoardVisible !== undefined) {
            this.keyBoardVisible = params.keyBoardVisible;
        }
        if (params.keyboardAvoidMode !== undefined) {
            this.keyboardAvoidMode = params.keyboardAvoidMode;
        }
        if (params.minHeight !== undefined) {
            this.minHeight = params.minHeight;
        }
        if (params.maxHeight !== undefined) {
            this.maxHeight = params.maxHeight;
        }
        if (params.dialogMaxHeight !== undefined) {
            this.dialogMaxHeight = params.dialogMaxHeight;
        }
        if (params.childBuilderParam !== undefined) {
            this.childBuilderParam = params.childBuilderParam;
        }
    }
    updateStateVars(params: BottomPop_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__keyBoardVisible.purgeDependencyOnElmtId(rmElmtId);
        this.__dialogMaxHeight.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__keyBoardVisible.aboutToBeDeleted();
        this.__dialogMaxHeight.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private controller: CustomDialogController;
    setController(ctr: CustomDialogController) {
        this.controller = ctr;
    }
    private title: ResourceStr;
    private titlePadding: Padding;
    private titleFontSize: ResourceStr;
    private titleTextColor: ResourceColor;
    private titleBgColor: ResourceColor;
    private contentBgColor: ResourceColor;
    private bgColor?: ResourceColor;
    private __keyBoardVisible: ObservedPropertySimplePU<boolean>;
    get keyBoardVisible() {
        return this.__keyBoardVisible.get();
    }
    set keyBoardVisible(newValue: boolean) {
        this.__keyBoardVisible.set(newValue);
    }
    private keyboardAvoidMode: KeyboardAvoidMode;
    private minHeight: Length; 
    private maxHeight: Length; 
    private __dialogMaxHeight: ObservedPropertySimplePU<number>; 
    get dialogMaxHeight() {
        return this.__dialogMaxHeight.get();
    }
    set dialogMaxHeight(newValue: number) {
        this.__dialogMaxHeight.set(newValue);
    }
    child(parent = null) {
    }
    private __childBuilderParam;
    aboutToAppear(): void {
        if (this.isKeyboardAvoidNone()) {
            this.getKeyBoardVisible();
        }
        this.getTitleHeight();
    }
    getKeyBoardVisible() {
        WindowModel.getInstance().getKeyBoardVisible((visible) => {
            this.keyBoardVisible = visible;
        });
    }
    isKeyboardAvoidNone() {
        return this.keyboardAvoidMode === KeyboardAvoidMode.NONE; 
    }
    getTitleHeight() {
        ComponentUtils.getComponentHeightSync('BottomPop_title', (componentHeight) => {
            const safeBottomHeight = ScreenUtils.getInstance().getSafeBottomHeight(); 
            this.dialogMaxHeight = Number(this.maxHeight) - componentHeight - safeBottomHeight;
        });
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Stack.create({ alignContent: Alignment.TopEnd });
        }, Stack);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.padding({
                bottom: ScreenUtils.getInstance().getSafeBottomHeight(), 
            });
            Column.width(StyleConst.FULL_WIDTH);
            Column.backgroundColor(this.bgColor);
            Column.borderRadius({
                topLeft: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                topRight: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
            });
            Column.constraintSize({
                maxHeight: this.maxHeight,
                minHeight: this.minHeight
            });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.title);
            Text.padding(this.titlePadding);
            Text.fontColor(this.titleTextColor);
            Text.fontSize(this.titleFontSize);
            Text.fontWeight(FontWeight.Medium);
            Text.textAlign(TextAlign.Center);
            Text.width(StyleConst.FULL_WIDTH);
            Text.height({ "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.backgroundColor(this.titleBgColor);
            Text.id('BottomPop_title');
            Text.borderRadius({
                topLeft: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                topRight: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
            });
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.backgroundColor(this.contentBgColor);
            Column.constraintSize({
                maxHeight: this.dialogMaxHeight,
            });
        }, Column);
        this.childBuilderParam.bind(this)();
        Column.pop();
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 50332120, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.size({ width: { "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, height: { "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
            Image.margin({ top: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, right: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
            Image.responseRegion({
                x: '-25%',
                y: '-25%',
                width: '150%',
                height: '150%'
            });
            Image.onClick(() => {
                this.controller.close();
            });
        }, Image);
        Stack.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
}
import promptAction from "@ohos:promptAction";
export const toast = (hintContent: string | ResourceStr, alignment: Alignment = Alignment.Center): void => {
    promptAction.showToast({ message: hintContent, alignment: alignment });
};
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface ChargeListView_Params {
    chargeList?: ChargeType[];
    Piles?: PileType[];
    destinationLongitude?: number;
    destinationLatitude?: number;
    destinationName?: string;
    mapList?: mapListItem[];
    locationData?: AddressData;
    selectMapDialogController?: CustomDialogController;
    chargeItemController?: CustomDialogController | null;
}
import { BottomPop, StyleConst, ThirdApp, thirdAppManager, toast, locationManager } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import type { AddressData, ChargeType, mapListItem, PileType } from "../model/ChargeModel";
import { getPiles } from "@normalized:N&&&@tbs/charge/src/main/ets/viewModel/ChargeViewModel&1.0.0";
import { ChargeItemDialogView } from "@normalized:N&&&@tbs/charge/src/main/ets/view/ChargeItemDialogView&1.0.0";
import router from "@ohos:router";
import "@normalized:N&&&@tbs/charge/src/main/ets/page/ChargingPage&1.0.0";
import type OpenLinkOptions from "@ohos:app.ability.OpenLinkOptions";
import type common from "@ohos:app.ability.common";
import type { BusinessError } from "@ohos:base";
import geoLocationManager from "@ohos:geoLocationManager";
import { MapDialogCall } from "@normalized:N&&&@tbs/charge/src/main/ets/view/MapDialogCall&1.0.0";
export class ChargeListView extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__chargeList = new SynchedPropertyObjectOneWayPU(params.chargeList, this, "chargeList");
        this.__Piles = new ObservedPropertyObjectPU([], this, "Piles");
        this.__destinationLongitude = new ObservedPropertySimplePU(0, this, "destinationLongitude");
        this.__destinationLatitude = new ObservedPropertySimplePU(0, this, "destinationLatitude");
        this.__destinationName = new ObservedPropertySimplePU('', this, "destinationName");
        this.__mapList = new ObservedPropertyObjectPU([], this, "mapList");
        this.locationData = {};
        this.selectMapDialogController = undefined;
        this.chargeItemController = new CustomDialogController({
            builder: () => {
                let jsDialog = new BottomPop(this, {
                    title: { "id": 50331694, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                    bgColor: { "id": 50331716, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                    titleBgColor: { "id": 50331716, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                    contentBgColor: { "id": 50331716, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                    keyboardAvoidMode: KeyboardAvoidMode.NONE,
                    childBuilderParam: () => {
                        this.chargeItemDialog();
                    }
                }, undefined, -1, () => { }, { page: "feature/charge/src/main/ets/view/ChargeListView.ets", line: 37, col: 14 });
                jsDialog.setController(this.chargeItemController);
                ViewPU.create(jsDialog);
                let paramsLambda = () => {
                    return {
                        title: { "id": 50331694, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                        bgColor: { "id": 50331716, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                        titleBgColor: { "id": 50331716, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                        contentBgColor: { "id": 50331716, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                        keyboardAvoidMode: KeyboardAvoidMode.NONE,
                        childBuilderParam: () => {
                            this.chargeItemDialog();
                        }
                    };
                };
                jsDialog.paramsGenerator_ = paramsLambda;
            },
            customStyle: true,
            alignment: DialogAlignment.Bottom,
            maskColor: { "id": 50331709, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
        }, this);
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: ChargeListView_Params) {
        if (params.Piles !== undefined) {
            this.Piles = params.Piles;
        }
        if (params.destinationLongitude !== undefined) {
            this.destinationLongitude = params.destinationLongitude;
        }
        if (params.destinationLatitude !== undefined) {
            this.destinationLatitude = params.destinationLatitude;
        }
        if (params.destinationName !== undefined) {
            this.destinationName = params.destinationName;
        }
        if (params.mapList !== undefined) {
            this.mapList = params.mapList;
        }
        if (params.locationData !== undefined) {
            this.locationData = params.locationData;
        }
        if (params.selectMapDialogController !== undefined) {
            this.selectMapDialogController = params.selectMapDialogController;
        }
        if (params.chargeItemController !== undefined) {
            this.chargeItemController = params.chargeItemController;
        }
    }
    updateStateVars(params: ChargeListView_Params) {
        this.__chargeList.reset(params.chargeList);
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__chargeList.purgeDependencyOnElmtId(rmElmtId);
        this.__Piles.purgeDependencyOnElmtId(rmElmtId);
        this.__destinationLongitude.purgeDependencyOnElmtId(rmElmtId);
        this.__destinationLatitude.purgeDependencyOnElmtId(rmElmtId);
        this.__destinationName.purgeDependencyOnElmtId(rmElmtId);
        this.__mapList.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__chargeList.aboutToBeDeleted();
        this.__Piles.aboutToBeDeleted();
        this.__destinationLongitude.aboutToBeDeleted();
        this.__destinationLatitude.aboutToBeDeleted();
        this.__destinationName.aboutToBeDeleted();
        this.__mapList.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private __chargeList: SynchedPropertySimpleOneWayPU<ChargeType[]>;
    get chargeList() {
        return this.__chargeList.get();
    }
    set chargeList(newValue: ChargeType[]) {
        this.__chargeList.set(newValue);
    }
    private __Piles: ObservedPropertyObjectPU<PileType[]>;
    get Piles() {
        return this.__Piles.get();
    }
    set Piles(newValue: PileType[]) {
        this.__Piles.set(newValue);
    }
    private __destinationLongitude: ObservedPropertySimplePU<number>;
    get destinationLongitude() {
        return this.__destinationLongitude.get();
    }
    set destinationLongitude(newValue: number) {
        this.__destinationLongitude.set(newValue);
    }
    private __destinationLatitude: ObservedPropertySimplePU<number>;
    get destinationLatitude() {
        return this.__destinationLatitude.get();
    }
    set destinationLatitude(newValue: number) {
        this.__destinationLatitude.set(newValue);
    }
    private __destinationName: ObservedPropertySimplePU<string>;
    get destinationName() {
        return this.__destinationName.get();
    }
    set destinationName(newValue: string) {
        this.__destinationName.set(newValue);
    }
    private __mapList: ObservedPropertyObjectPU<mapListItem[]>;
    get mapList() {
        return this.__mapList.get();
    }
    set mapList(newValue: mapListItem[]) {
        this.__mapList.set(newValue);
    }
    private locationData: AddressData;
    private selectMapDialogController?: CustomDialogController;
    async getPileData(id: number) {
        let data = await getPiles(id);
        if (data) {
            this.Piles = data;
        }
    }
    aboutToDisappear(): void {
        this.chargeItemController = null;
        this.selectMapDialogController?.close();
        this.selectMapDialogController = undefined;
    }
    private chargeItemController: CustomDialogController | null;
    chargeItemDialog(parent = null) {
        {
            this.observeComponentCreation2((elmtId, isInitialRender) => {
                if (isInitialRender) {
                    let componentCall = new ChargeItemDialogView(this, {
                        Piles: this.Piles,
                        clickPileItemCallBack: (item: PileType) => {
                            this.clickPileItem(item);
                        }
                    }, undefined, elmtId, () => { }, { page: "feature/charge/src/main/ets/view/ChargeListView.ets", line: 54, col: 5 });
                    ViewPU.create(componentCall);
                    let paramsLambda = () => {
                        return {
                            Piles: this.Piles,
                            clickPileItemCallBack: (item: PileType) => {
                                this.clickPileItem(item);
                            }
                        };
                    };
                    componentCall.paramsGenerator_ = paramsLambda;
                }
                else {
                    this.updateStateVarsOfChildByElmtId(elmtId, {
                        Piles: this.Piles
                    });
                }
            }, { name: "ChargeItemDialogView" });
        }
    }
    clickPileItem(item: PileType) {
        if (item.state === 0) {
            this.chargeItemController?.close();
            router.pushNamedRoute({
                name: 'ChargingPage',
                params: { item }
            });
        }
        else if (item.state === 1) {
            toast('此桩正在充电中～');
        }
        else {
            toast('桩故障，无法充电哦～');
        }
    }
    chargeItem(item: ChargeType, parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: 12 });
            Column.backgroundColor({ "id": 50331718, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Column.padding({
                left: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                right: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                top: { "id": 50331775, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                bottom: { "id": 50331775, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
            });
            Column.borderRadius({ "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Column.alignItems(HorizontalAlign.Start);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(item.name);
            Text.fontWeight(FontWeight.Bold);
            Text.onClick(() => {
                this.chargeItemController?.open();
                if (item.id) {
                    this.getPileData(item.id);
                }
            });
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create({ space: 8 });
            Row.width(StyleConst.FULL_WIDTH);
            Row.onClick(() => {
                this.chargeItemController?.open();
                if (item.id) {
                    this.getPileData(item.id);
                }
            });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(`￥ ${item.pricePerHour}`);
            Text.fontColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('/度');
            Text.fontColor({ "id": 50331713, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Blank.create();
        }, Blank);
        Blank.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(item.tenantName);
            Text.fontSize({ "id": 50332029, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.fontColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Blank.create();
        }, Blank);
        Blank.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 50332123, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.width({ "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Image);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(`闲${item.freePileTotal}`);
            Text.fontWeight(FontWeight.Bold);
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(`/${item.pileTotal}`);
        }, Text);
        Text.pop();
        Row.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create({ space: 8 });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create({ space: 8 });
            Row.onClick(() => {
                this.handleCheckInstallation(item);
            });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            If.create();
            if (item.distance) {
                this.ifElseBranchUpdateFunction(0, () => {
                    this.observeComponentCreation2((elmtId, isInitialRender) => {
                        Text.create(`${item.distance.toFixed(2)}km`);
                    }, Text);
                    Text.pop();
                });
            }
            else {
                this.ifElseBranchUpdateFunction(1, () => {
                });
            }
        }, If);
        If.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 50332125, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.width({ "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Image);
        Row.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 50332124, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.width({ "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Image);
        Row.pop();
        Column.pop();
    }
    haveDataCardView(parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            List.create({ space: 10 });
            List.width(StyleConst.FULL_WIDTH);
            List.padding({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            List.layoutWeight(1);
        }, List);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            ForEach.create();
            const forEachItemGenFunction = _item => {
                const item = _item;
                {
                    const itemCreation = (elmtId, isInitialRender) => {
                        ViewStackProcessor.StartGetAccessRecordingFor(elmtId);
                        itemCreation2(elmtId, isInitialRender);
                        if (!isInitialRender) {
                            ListItem.pop();
                        }
                        ViewStackProcessor.StopGetAccessRecording();
                    };
                    const itemCreation2 = (elmtId, isInitialRender) => {
                        ListItem.create(deepRenderFunction, true);
                    };
                    const deepRenderFunction = (elmtId, isInitialRender) => {
                        itemCreation(elmtId, isInitialRender);
                        this.chargeItem.bind(this)(item);
                        ListItem.pop();
                    };
                    this.observeComponentCreation2(itemCreation2, ListItem);
                    ListItem.pop();
                }
            };
            this.forEachUpdateFunction(elmtId, this.chargeList, forEachItemGenFunction);
        }, ForEach);
        ForEach.pop();
        List.pop();
    }
    noDataCardView(parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.margin({ top: { "id": 50331832, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 50332122, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.width({ "id": 50331721, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.height({ "id": 50331721, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Image);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create({ "id": 50331673, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.fontSize({ "id": 50332032, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.fontColor(Color.Black);
            Text.fontWeight(FontWeight.Bold);
            Text.margin({ top: { "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, bottom: { "id": 50331875, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
        }, Text);
        Text.pop();
        Column.pop();
    }
    handleCheckInstallation(item: ChargeType) {
        this.isAppInstalled(item);
        if (this.mapList.length === 0) {
            toast({ "id": 50332149, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }
        else {
            this.permissionRequest();
        }
    }
    isAppInstalled(model: ChargeType) {
        const mapList = [ThirdApp.Amapuri, ThirdApp.Baidumap, ThirdApp.Maps].map((key: ThirdApp) => {
            let name: Length = '';
            let link: string = "";
            switch (key) {
                case ThirdApp.Amapuri:
                    link =
                        `amapuri://route/plan?dlat=${model.coordinate?.split(',')[0]}&dname=${model.name}&slat=${this.locationData.latitude}&dlon=${model.coordinate?.split(',')[1]}&slon=${this.locationData.longitude}&sname=我的位置&t=0&sourceApplication=com.huawei.hmos.maps.app`;
                    name = { "id": 50332150, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
                    break;
                case ThirdApp.Baidumap:
                    name = { "id": 50332148, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
                    link =
                        `baidumap://map/direction?destination=latlng:${model.coordinate?.split(',')[0]},${model.coordinate?.split(',')[1]}|name:${model.name}&mode=driving`;
                    break;
                case ThirdApp.Maps:
                    name = { "id": 50332151, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
                    link =
                        `https://www.petalmaps.com/routes/?daddr=${model.coordinate?.split(',')[0]},${model.coordinate?.split(',')[1]}(${model.name})&coordinateType=0&type=drive&utm_source=com.huawei.hmos.maps.app`;
                    break;
                default:
                    name = "";
            }
            return {
                name,
                link,
                isAppInstall: thirdAppManager.isAppInstall(key)
            } as mapListItem;
        });
        console.log('lucy== map', JSON.stringify(mapList));
        this.mapList = mapList.filter(ele => ele.isAppInstall);
    }
    async permissionRequest() {
        try {
            let isGranted = await locationManager.checkAndApplyPermissions(getContext(this));
            if (!isGranted) {
                isGranted = await locationManager.requestPermissionAgain();
            }
            if (isGranted) {
                this.selectMapDialogController = new CustomDialogController({
                    builder: () => {
                        let jsDialog = new MapDialogCall(this, {
                            title: '请选择地图',
                            titleFontSize: { "id": 50331753, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                            titleTextColor: '#acb1b6',
                            mapList: this.mapList,
                            propBackgroundColor: Color.Transparent,
                            propBorderRadius: { "id": 50331997, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                            propHeight: { "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                            propSpace: 0,
                            titleHeight: { "id": 50331956, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                            propContentPadding: {
                                top: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                                bottom: 0
                            },
                            propPadding: {
                                left: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                                right: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                                bottom: { "id": 50331944, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                            },
                            onClickCallBack: (item) => {
                                this.handleStartNavigation(item);
                            }
                        }, undefined, -1, () => { }, { page: "feature/charge/src/main/ets/view/ChargeListView.ets", line: 216, col: 20 });
                        jsDialog.setController(this.selectMapDialogController);
                        ViewPU.create(jsDialog);
                        let paramsLambda = () => {
                            return {
                                title: '请选择地图',
                                titleFontSize: { "id": 50331753, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                                titleTextColor: '#acb1b6',
                                mapList: this.mapList,
                                propBackgroundColor: Color.Transparent,
                                propBorderRadius: { "id": 50331997, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                                propHeight: { "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                                propSpace: 0,
                                titleHeight: { "id": 50331956, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                                propContentPadding: {
                                    top: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                                    bottom: 0
                                },
                                propPadding: {
                                    left: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                                    right: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                                    bottom: { "id": 50331944, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                                },
                                onClickCallBack: (item) => {
                                    this.handleStartNavigation(item);
                                }
                            };
                        };
                        jsDialog.paramsGenerator_ = paramsLambda;
                    },
                    customStyle: true,
                    autoCancel: true,
                    alignment: DialogAlignment.Bottom,
                    keyboardAvoidMode: KeyboardAvoidMode.NONE
                }, this);
                this.selectMapDialogController.open();
                const request: geoLocationManager.SingleLocationRequest = {
                    locatingPriority: geoLocationManager.LocatingPriority.PRIORITY_LOCATING_SPEED,
                    locatingTimeoutMs: 10000
                };
                await geoLocationManager.getCurrentLocation(request).then((location) => {
                    this.locationData.latitude = location.latitude;
                    this.locationData.longitude = location.longitude;
                }).catch((err: object) => {
                    console.error("lucy== 获取位置失败:", JSON.stringify(err));
                });
            }
        }
        catch (e) {
            console.log('lucy== Address request location Permission fail' + e.message);
        }
    }
    handleStartNavigation(item: mapListItem) {
        this.selectMapDialogController?.close();
        this.jumpToMapApp(item.link);
    }
    jumpToMapApp(link: string) {
        try {
            const openLinkOptions: OpenLinkOptions = {
                appLinkingOnly: false
            };
            const context = getContext(this) as common.UIAbilityContext;
            context.openLink(link, openLinkOptions)
                .then(() => {
                console.log('open link success.');
            }).catch((err: BusinessError) => {
                console.log(`open link failed. Code is ${err.code}, message is ${err.message}`);
            });
        }
        catch (paramError) {
            console.log(`Failed to start link. Code is ${paramError.code}, message is ${paramError.message}`);
        }
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            If.create();
            if (this.chargeList.length > 0) {
                this.ifElseBranchUpdateFunction(0, () => {
                    this.haveDataCardView.bind(this)();
                });
            }
            else {
                this.ifElseBranchUpdateFunction(1, () => {
                    this.noDataCardView.bind(this)();
                });
            }
        }, If);
        If.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
}
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface ChargePriceDialogView_Params {
    priceList?: PriceType[];
}
import type { PriceType } from "../model/ChargeModel";
export class ChargePriceDialogView extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__priceList = new SynchedPropertyObjectOneWayPU(params.priceList, this, "priceList");
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: ChargePriceDialogView_Params) {
    }
    updateStateVars(params: ChargePriceDialogView_Params) {
        this.__priceList.reset(params.priceList);
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__priceList.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__priceList.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private __priceList: SynchedPropertySimpleOneWayPU<PriceType[]>;
    get priceList() {
        return this.__priceList.get();
    }
    set priceList(newValue: PriceType[]) {
        this.__priceList.set(newValue);
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.padding(20);
            Column.backgroundColor('#f5f7fa');
            Column.borderRadius(12);
            Column.width('100%');
            Column.height('auto');
        }, Column);
        this.buildHeader.bind(this)();
        this.buildPriceTable.bind(this)();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Divider.create();
            Divider.strokeWidth(1);
            Divider.color('#e0e0e0');
            Divider.margin({ top: 25, bottom: 20 });
        }, Divider);
        this.buildFooter.bind(this)();
        Column.pop();
    }
    buildHeader(parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('桩编号：00205020101100000000323');
            Text.fontSize(14);
            Text.fontColor('#666666');
            Text.margin({ bottom: 15 });
        }, Text);
        Text.pop();
    }
    buildPriceTable(parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.width('100%');
            Column.padding(12);
            Column.backgroundColor(Color.White);
            Column.borderRadius(8);
            Column.shadow({
                radius: 4,
                color: '#20000000',
                offsetX: 1,
                offsetY: 1
            });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.width('100%');
            Row.padding({ bottom: 10 });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('充电时段');
            Text.fontSize(16);
            Text.fontWeight(FontWeight.Bold);
            Text.layoutWeight(1);
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('价格（元/度）');
            Text.fontSize(16);
            Text.fontWeight(FontWeight.Bold);
            Text.layoutWeight(1);
        }, Text);
        Text.pop();
        Row.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            ForEach.create();
            const forEachItemGenFunction = (_item, index: number) => {
                const item = _item;
                this.observeComponentCreation2((elmtId, isInitialRender) => {
                    Row.create();
                    Row.width('100%');
                    Row.padding({ top: 10, bottom: 10 });
                    Row.backgroundColor(index % 2 === 0 ? '#ffffff' : '#f8f9fa');
                }, Row);
                this.observeComponentCreation2((elmtId, isInitialRender) => {
                    Text.create(`${item.startHour} - ${item.endHour}`);
                    Text.fontSize(16);
                    Text.fontColor('#333333');
                    Text.layoutWeight(1);
                }, Text);
                Text.pop();
                this.observeComponentCreation2((elmtId, isInitialRender) => {
                    If.create();
                    if (item.price) {
                        this.ifElseBranchUpdateFunction(0, () => {
                            this.observeComponentCreation2((elmtId, isInitialRender) => {
                                Text.create(`${item.price}`);
                                Text.fontSize(16);
                                Text.fontColor('#e91e63');
                                Text.fontWeight(FontWeight.Medium);
                                Text.layoutWeight(1);
                            }, Text);
                            Text.pop();
                        });
                    }
                    else {
                        this.ifElseBranchUpdateFunction(1, () => {
                        });
                    }
                }, If);
                If.pop();
                Row.pop();
            };
            this.forEachUpdateFunction(elmtId, this.priceList, forEachItemGenFunction, undefined, true, false);
        }, ForEach);
        ForEach.pop();
        Column.pop();
    }
    buildFooter(parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('*充电费用仅供参考，请以实际收取费用为准');
            Text.fontSize(12);
            Text.fontColor('#999999');
            Text.fontStyle(FontStyle.Italic);
            Text.alignSelf(ItemAlign.Start);
        }, Text);
        Text.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
}
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface MapDialogCall_Params {
    mapList?: mapListItem[];
    controller?: CustomDialogController;
    propBackgroundColor?: Color | number | string | Resource;
    propPadding?: Padding | Length | LocalizedPadding;
    propBorderRadius?: ResourceStr;
    title?: ResourceStr;
    titlePadding?: Padding;
    titleFontSize?: ResourceStr;
    titleTextColor?: ResourceColor;
    titleBgColor?: ResourceColor;
    onClickCallBack?: (ele: mapListItem) => void;
    propHeight?: Length;
    propSpace?: number;
    propContentPadding?: Padding | Length | LocalizedPadding;
    titleHeight?: Length;
}
import { StyleConst } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import type { mapListItem } from "../model/ChargeModel";
interface TextStyle {
    height: Length;
}
function __Text__textStyles(item: TextStyle): void {
    Text.fontColor({ "id": 50331705, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
    Text.textAlign(TextAlign.Center);
    Text.fontSize({ "id": 50331808, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
    Text.height(item.height);
}
export class MapDialogCall extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.mapList = [];
        this.controller = undefined;
        this.propBackgroundColor = '#f3f4f5';
        this.propPadding = {};
        this.propBorderRadius = '0';
        this.title = '';
        this.titlePadding = { top: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, bottom: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } };
        this.titleFontSize = { "id": 50332027, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
        this.titleTextColor = '#222427';
        this.titleBgColor = Color.Transparent;
        this.onClickCallBack = undefined;
        this.propHeight = { "id": 50331886, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
        this.propSpace = 13;
        this.propContentPadding = {
            top: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
            bottom: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
        };
        this.titleHeight = 0;
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: MapDialogCall_Params) {
        if (params.mapList !== undefined) {
            this.mapList = params.mapList;
        }
        if (params.controller !== undefined) {
            this.controller = params.controller;
        }
        if (params.propBackgroundColor !== undefined) {
            this.propBackgroundColor = params.propBackgroundColor;
        }
        if (params.propPadding !== undefined) {
            this.propPadding = params.propPadding;
        }
        if (params.propBorderRadius !== undefined) {
            this.propBorderRadius = params.propBorderRadius;
        }
        if (params.title !== undefined) {
            this.title = params.title;
        }
        if (params.titlePadding !== undefined) {
            this.titlePadding = params.titlePadding;
        }
        if (params.titleFontSize !== undefined) {
            this.titleFontSize = params.titleFontSize;
        }
        if (params.titleTextColor !== undefined) {
            this.titleTextColor = params.titleTextColor;
        }
        if (params.titleBgColor !== undefined) {
            this.titleBgColor = params.titleBgColor;
        }
        if (params.onClickCallBack !== undefined) {
            this.onClickCallBack = params.onClickCallBack;
        }
        if (params.propHeight !== undefined) {
            this.propHeight = params.propHeight;
        }
        if (params.propSpace !== undefined) {
            this.propSpace = params.propSpace;
        }
        if (params.propContentPadding !== undefined) {
            this.propContentPadding = params.propContentPadding;
        }
        if (params.titleHeight !== undefined) {
            this.titleHeight = params.titleHeight;
        }
    }
    updateStateVars(params: MapDialogCall_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
    }
    aboutToBeDeleted() {
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private mapList: mapListItem[];
    private controller: CustomDialogController;
    setController(ctr: CustomDialogController) {
        this.controller = ctr;
    }
    private propBackgroundColor: Color | number | string | Resource;
    private propPadding: Padding | Length | LocalizedPadding;
    private propBorderRadius: ResourceStr;
    private title: ResourceStr;
    private titlePadding: Padding;
    private titleFontSize: ResourceStr;
    private titleTextColor: ResourceColor;
    private titleBgColor: ResourceColor;
    private onClickCallBack?: (ele: mapListItem) => void;
    private propHeight: Length;
    private propSpace: number;
    private propContentPadding: Padding | Length | LocalizedPadding;
    private titleHeight: Length;
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: 12 });
            Column.padding(this.propPadding);
            Column.expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM]);
            Column.width(StyleConst.FULL_WIDTH);
            Column.backgroundColor(this.propBackgroundColor);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: this.propSpace });
            Column.borderRadius(this.propBorderRadius);
            Column.justifyContent(FlexAlign.Center);
            Column.width(StyleConst.FULL_WIDTH);
            Column.backgroundColor(Color.White);
            Column.padding(this.propContentPadding);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.title);
            Text.fontColor(this.titleTextColor);
            Text.fontSize(this.titleFontSize);
            Text.textAlign(TextAlign.Center);
            Text.width(StyleConst.FULL_WIDTH);
            Text.height(this.titleHeight);
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            ForEach.create();
            const forEachItemGenFunction = _item => {
                const ele = _item;
                this.observeComponentCreation2((elmtId, isInitialRender) => {
                    Text.create(ele.name);
                    __Text__textStyles({ height: this.propHeight });
                    Text.onClick(() => {
                        this.onClickCallBack && this.onClickCallBack(ele);
                    });
                }, Text);
                Text.pop();
            };
            this.forEachUpdateFunction(elmtId, this.mapList, forEachItemGenFunction);
        }, ForEach);
        ForEach.pop();
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.borderRadius(this.propBorderRadius);
            Row.backgroundColor(Color.White);
            Row.height({ "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.margin({ bottom: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
            Row.onClick(() => {
                this.controller.close();
            });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('取消');
            __Text__textStyles({ height: this.propHeight });
            Text.fontColor({ "id": 50331705, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.width(StyleConst.FULL_WIDTH);
        }, Text);
        Text.pop();
        Row.pop();
        Column.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
}
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface ChargeItemDialogView_Params {
    screenWidth?: number;
    Piles?: PileType[];
    clickPileItemCallBack?: (item: PileType) => void;
}
import { StorageConst, ScreenUtils, StyleConst } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import { pileParam } from "@normalized:N&&&@tbs/charge/src/main/ets/model/ChargeModel&1.0.0";
import type { pileParamType, PileType } from "@normalized:N&&&@tbs/charge/src/main/ets/model/ChargeModel&1.0.0";
export class ChargeItemDialogView extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__screenWidth = this.createStorageProp(StorageConst.SCREEN_WIDTH_VP, ScreenUtils.getInstance().getScreenWidthVp(), "screenWidth");
        this.__Piles = new SynchedPropertyObjectOneWayPU(params.Piles, this, "Piles");
        this.clickPileItemCallBack = undefined;
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: ChargeItemDialogView_Params) {
        if (params.clickPileItemCallBack !== undefined) {
            this.clickPileItemCallBack = params.clickPileItemCallBack;
        }
    }
    updateStateVars(params: ChargeItemDialogView_Params) {
        this.__Piles.reset(params.Piles);
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__screenWidth.purgeDependencyOnElmtId(rmElmtId);
        this.__Piles.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__screenWidth.aboutToBeDeleted();
        this.__Piles.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private __screenWidth: ObservedPropertyAbstractPU<number>;
    get screenWidth() {
        return this.__screenWidth.get();
    }
    set screenWidth(newValue: number) {
        this.__screenWidth.set(newValue);
    }
    private __Piles: SynchedPropertySimpleOneWayPU<PileType[]>;
    get Piles() {
        return this.__Piles.get();
    }
    set Piles(newValue: PileType[]) {
        this.__Piles.set(newValue);
    }
    private clickPileItemCallBack?: (item: PileType) => void;
    pileItem(item: PileType, parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.padding({ top: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, bottom: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
            Row.width(this.screenWidth - 12 * 2);
            Row.margin({ bottom: { "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
            Row.borderRadius({ "id": 50331742, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.backgroundColor(Color.White);
            Row.onClick(() => {
                if (this.clickPileItemCallBack) {
                    this.clickPileItemCallBack(item);
                }
            });
        }, Row);
        this.pileItemLeftBuilder.bind(this)(item);
        this.pileItemRightBuilder.bind(this)(item);
        Row.pop();
    }
    pileItemLeftBuilder(item: PileType, parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: 10 });
            Column.margin({ left: { "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, right: { "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create(this.pileImage(item.state ?? 0));
            Image.height({ "id": 50331942, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Image);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.pileStateText(item.state ?? 0));
            Text.textAlign(TextAlign.Center);
            Text.fontSize({ "id": 50332020, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.fontColor(this.pileStateTextColor(item.state ?? 0));
            Text.width({ "id": 50331954, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.height({ "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.border({
                width: { "id": 50331719, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                color: this.pileStateTextColor(item.state ?? 0),
                style: BorderStyle.Solid,
                radius: { "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
            });
        }, Text);
        Text.pop();
        Column.pop();
    }
    pileItemRightBuilder(item: PileType, parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: 10 });
            Column.layoutWeight(1);
            Column.alignItems(HorizontalAlign.Start);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create();
            Text.fontSize({ "id": 50332025, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Text);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Span.create({ "id": 50331680, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Span.fontColor({ "id": 50331710, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Span);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Span.create(item.code);
            Span.fontColor(Color.Black);
        }, Span);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create();
            Text.fontSize({ "id": 50332025, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Text);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Span.create({ "id": 50331697, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Span.fontColor({ "id": 50331710, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Span);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Span.create(item.stationName);
            Span.fontColor(Color.Black);
        }, Span);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create({ space: 10 });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            ForEach.create();
            const forEachItemGenFunction = _item => {
                const item = _item;
                this.observeComponentCreation2((elmtId, isInitialRender) => {
                    Row.create();
                    Row.backgroundColor({ "id": 50331717, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                    Row.padding({
                        top: { "id": 50331964, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                        bottom: { "id": 50331964, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                        left: { "id": 50331997, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                        right: { "id": 50331997, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
                    });
                }, Row);
                this.observeComponentCreation2((elmtId, isInitialRender) => {
                    Text.create(item.text);
                    Text.textAlign(TextAlign.Center);
                    Text.fontSize({ "id": 50332022, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                    Text.fontColor(Color.Black);
                }, Text);
                Text.pop();
                Row.pop();
            };
            this.forEachUpdateFunction(elmtId, pileParam, forEachItemGenFunction);
        }, ForEach);
        ForEach.pop();
        Row.pop();
        Column.pop();
    }
    pileImage(state: number) {
        switch (state) {
            case 0:
                return { "id": 50332128, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
            case 1:
                return { "id": 50332126, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
            case 2:
                return { "id": 50332127, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
            default:
                return { "id": 50332128, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
        }
    }
    pileStateText(state: number) {
        switch (state) {
            case 0:
                return { "id": 50331664, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
            case 1:
                return { "id": 50331654, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
            case 2:
                return { "id": 50331661, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
            default:
                return { "id": 50331664, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
        }
    }
    pileStateTextColor(state: number) {
        switch (state) {
            case 0:
                return { "id": 50331703, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
            case 1:
                return { "id": 50331714, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
            case 2:
                return { "id": 50331712, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
            default:
                return { "id": 50331703, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
        }
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            List.create();
            List.width(StyleConst.FULL_WIDTH);
        }, List);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            ForEach.create();
            const forEachItemGenFunction = _item => {
                const item = _item;
                {
                    const itemCreation = (elmtId, isInitialRender) => {
                        ViewStackProcessor.StartGetAccessRecordingFor(elmtId);
                        itemCreation2(elmtId, isInitialRender);
                        if (!isInitialRender) {
                            ListItem.pop();
                        }
                        ViewStackProcessor.StopGetAccessRecording();
                    };
                    const itemCreation2 = (elmtId, isInitialRender) => {
                        ListItem.create(deepRenderFunction, true);
                        ListItem.width(StyleConst.FULL_WIDTH);
                    };
                    const deepRenderFunction = (elmtId, isInitialRender) => {
                        itemCreation(elmtId, isInitialRender);
                        this.pileItem.bind(this)(item);
                        ListItem.pop();
                    };
                    this.observeComponentCreation2(itemCreation2, ListItem);
                    ListItem.pop();
                }
            };
            this.forEachUpdateFunction(elmtId, this.Piles, forEachItemGenFunction);
        }, ForEach);
        ForEach.pop();
        List.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
}
export class ButtonInfoModel {
    index: number = 0;
    img: Resource = { "id": 50332141, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
    selectImg: Resource = { "id": 50332142, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
    title: Resource = { "id": 50331652, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" };
}
const buttonInfo: ButtonInfoModel[] = [
    {
        index: 0,
        img: { "id": 50332141, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
        selectImg: { "id": 50332142, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
        title: { "id": 50331652, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
    },
    {
        index: 1,
        img: { "id": 50332146, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
        selectImg: { "id": 50332147, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
        title: { "id": 50331691, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
    },
    {
        index: 2,
        img: { "id": 50332143, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
        selectImg: { "id": 50332144, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
        title: { "id": 50331670, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
    }
];
export { buttonInfo };
export * from "@normalized:N&&&@tbs/common/src/main/ets/common/StyleConst&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/common/TbsTitleBar&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/common/BottomLoadingBuilder&1.0.0";
import http from "@ohos:net.http";
import { commonStorage } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import { StorageConst } from "@normalized:N&&&@tbs/common/src/main/ets/manager/index&1.0.0";
import { ResponseResult } from "@normalized:N&&&@tbs/common/src/main/ets/http/response&1.0.0";
export function requestApiCall(url: string, method: http.RequestMethod, data?: Record<string, number | boolean | string | Object | undefined>, headers?: Record<string, string>): Promise<ResponseResult> {
    const BASE_URL = 'https://charging.lusson.xyz';
    const httpRequest = http.createHttp();
    const defaultHeaders: Record<string, string> = {
        'Content-Type': 'application/json',
    };
    const token = commonStorage.getStringValueSync(StorageConst.TOKEN, "");
    console.log('lucy== 获取的token', token, JSON.stringify(token));
    if (token) {
        defaultHeaders['Authorization'] = `Bearer ${token}`;
    }
    const finalHeaders: Record<string, string> = {};
    Object.keys(defaultHeaders).forEach(key => {
        finalHeaders[key] = defaultHeaders[key];
    });
    if (headers) {
        Object.keys(headers).forEach(key => {
            finalHeaders[key] = String(headers[key]);
        });
    }
    let responseResult = httpRequest.request(BASE_URL + url, {
        method: method,
        extraData: data ? JSON.stringify(data) : undefined,
        header: finalHeaders
    });
    let response: ResponseResult = new ResponseResult();
    return responseResult.then((value: http.HttpResponse) => {
        if (value.responseCode === 200) {
            let res: ResponseResult = JSON.parse(`${value.result}`);
            response.data = res.data;
            response.code = res.code;
            response.message = res.message;
        }
        else {
            response.message = '请求错误';
            response.code = 400;
        }
        return response;
    }).catch((error: Error) => {
        console.log('lucy++ error', JSON.stringify(error));
        response.message = '请求错误';
        response.code = 400;
        return response;
    });
}
export { requestApiCall } from "@normalized:N&&&@tbs/common/src/main/ets/http/httpUtils&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/http/Apis&1.0.0";
export class StyleConst {
    static readonly FULL_WIDTH: string = '100%';
    static readonly FULL_HEIGHT: string = '100%';
    static readonly PERCENT_10 = '10%';
    static readonly PERCENT_15 = '15%';
    static readonly PERCENT_17 = '17%';
    static readonly PERCENT_20 = '20%';
    static readonly PERCENT_25 = '25%';
    static readonly PERCENT_30 = '30%';
    static readonly PERCENT_35 = '35%';
    static readonly PERCENT_40 = '40%';
    static readonly PERCENT_45 = '45%';
    static readonly PERCENT_50 = '50%';
    static readonly PERCENT_60 = '60%';
    static readonly PERCENT_65 = '65%';
    static readonly PERCENT_70 = '70%';
    static readonly PERCENT_72 = '72%';
    static readonly PERCENT_75 = '75%';
    static readonly PERCENT_80 = '80%';
    static readonly PERCENT_85 = '85%';
    static readonly PERCENT_90 = '90%';
    static readonly PERCENT_95 = '95%';
    static readonly PERCENT_100 = '100%';
}
export class ResponseResult {
    code?: number;
    message?: string;
    data?: object;
}
export class Apis {
    static readonly USER_REGISTER = "/saas-api/tenant/register";
    static readonly USER_LOGIN = "/saas-api/user/login";
    static readonly USER_TENANT = "/saas-api/tenant/selects";
    static readonly USER_INFO = "/wx-api/me/info";
    static readonly CHARGE_STATION_LIST = "/wx-api/station/list";
    static readonly CHARGE_PILE_LIST = "/wx-api/pile/list";
    static readonly CHARGE_PRICE = "/wx-api/price/list";
    static readonly CHARGE_START = "/wx-api/charge/start";
    static readonly CHARGE_STOP = "/wx-api/charge/stop";
    static readonly CHARGE_ORDER_LIST = "/wx-api/charge/list";
}
import componentUtils from "@ohos:arkui.componentUtils";
import inspector from "@ohos:arkui.inspector";
export class ComponentUtils {
    static getComponentHeightSync(componentId: string, callback: (width: number) => void): void {
        const listener = inspector.createComponentObserver(componentId);
        listener.on('layout', () => {
            const componentInfo = componentUtils.getRectangleById(componentId);
            const height = px2vp(componentInfo.size.height);
            callback?.(height);
            listener.off('layout');
        });
    }
}
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface BottomLoadingBuilder_Params {
    haveNextPage?: boolean;
    loading?: boolean;
    dataLength?: number;
}
import { StyleConst } from "@normalized:N&&&@tbs/common/Index&1.0.0";
export class BottomLoadingBuilder extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__haveNextPage = new SynchedPropertySimpleOneWayPU(params.haveNextPage, this, "haveNextPage");
        this.__loading = new SynchedPropertySimpleOneWayPU(params.loading, this, "loading");
        this.__dataLength = new SynchedPropertySimpleOneWayPU(params.dataLength, this, "dataLength");
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: BottomLoadingBuilder_Params) {
    }
    updateStateVars(params: BottomLoadingBuilder_Params) {
        this.__haveNextPage.reset(params.haveNextPage);
        this.__loading.reset(params.loading);
        this.__dataLength.reset(params.dataLength);
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__haveNextPage.purgeDependencyOnElmtId(rmElmtId);
        this.__loading.purgeDependencyOnElmtId(rmElmtId);
        this.__dataLength.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__haveNextPage.aboutToBeDeleted();
        this.__loading.aboutToBeDeleted();
        this.__dataLength.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private __haveNextPage: SynchedPropertySimpleOneWayPU<boolean>;
    get haveNextPage() {
        return this.__haveNextPage.get();
    }
    set haveNextPage(newValue: boolean) {
        this.__haveNextPage.set(newValue);
    }
    private __loading: SynchedPropertySimpleOneWayPU<boolean>;
    get loading() {
        return this.__loading.get();
    }
    set loading(newValue: boolean) {
        this.__loading.set(newValue);
    }
    private __dataLength: SynchedPropertySimpleOneWayPU<number>;
    get dataLength() {
        return this.__dataLength.get();
    }
    set dataLength(newValue: number) {
        this.__dataLength.set(newValue);
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            If.create();
            if (this.haveNextPage && this.loading) {
                this.ifElseBranchUpdateFunction(0, () => {
                    this.observeComponentCreation2((elmtId, isInitialRender) => {
                        Row.create();
                        Row.width(StyleConst.FULL_WIDTH);
                        Row.height({ "id": 50331976, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        Row.justifyContent(FlexAlign.Center);
                    }, Row);
                    this.observeComponentCreation2((elmtId, isInitialRender) => {
                        LoadingProgress.create();
                        LoadingProgress.width({ "id": 50331942, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        LoadingProgress.height({ "id": 50331942, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        LoadingProgress.margin({ right: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
                    }, LoadingProgress);
                    this.observeComponentCreation2((elmtId, isInitialRender) => {
                        Text.create({ "id": 50331665, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        Text.fontSize({ "id": 50332025, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        Text.fontColor({ "id": 50331708, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                    }, Text);
                    Text.pop();
                    Row.pop();
                });
            }
            else if (!this.haveNextPage && this.dataLength > 0) {
                this.ifElseBranchUpdateFunction(1, () => {
                    this.observeComponentCreation2((elmtId, isInitialRender) => {
                        Text.create({ "id": 50331699, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        Text.fontSize({ "id": 50332025, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        Text.fontColor({ "id": 50331711, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        Text.textAlign(TextAlign.Center);
                        Text.width(StyleConst.FULL_WIDTH);
                        Text.margin({ top: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, bottom: { "id": 50331831, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
                    }, Text);
                    Text.pop();
                });
            }
            else {
                this.ifElseBranchUpdateFunction(2, () => {
                });
            }
        }, If);
        If.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
}
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface TbsTitleBar_Params {
    title?: ResourceStr;
    showBackIcon?: boolean;
}
import { ScreenUtils, StyleConst } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import router from "@ohos:router";
export class TbsTitleBar extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__title = new SynchedPropertyObjectOneWayPU(params.title, this, "title");
        this.__showBackIcon = new SynchedPropertySimpleOneWayPU(params.showBackIcon, this, "showBackIcon");
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: TbsTitleBar_Params) {
        if (params.title === undefined) {
            this.__title.set('');
        }
        if (params.showBackIcon === undefined) {
            this.__showBackIcon.set(false);
        }
    }
    updateStateVars(params: TbsTitleBar_Params) {
        this.__title.reset(params.title);
        this.__showBackIcon.reset(params.showBackIcon);
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__title.purgeDependencyOnElmtId(rmElmtId);
        this.__showBackIcon.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__title.aboutToBeDeleted();
        this.__showBackIcon.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private __title: SynchedPropertySimpleOneWayPU<ResourceStr>;
    get title() {
        return this.__title.get();
    }
    set title(newValue: ResourceStr) {
        this.__title.set(newValue);
    }
    private __showBackIcon: SynchedPropertySimpleOneWayPU<boolean>;
    get showBackIcon() {
        return this.__showBackIcon.get();
    }
    set showBackIcon(newValue: boolean) {
        this.__showBackIcon.set(newValue);
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.width(StyleConst.FULL_WIDTH);
            Column.backgroundColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Blank.create();
            Blank.height(ScreenUtils.getInstance().getStatusBarHeight());
        }, Blank);
        Blank.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            RelativeContainer.create();
            RelativeContainer.width(StyleConst.FULL_WIDTH);
            RelativeContainer.height({ "id": 50331959, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, RelativeContainer);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.title);
            Text.fontColor(Color.White);
            Text.fontSize({ "id": 50332032, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.textAlign(TextAlign.Center);
            Text.maxLines(1);
            Text.id('text');
            Text.alignRules({
                center: { anchor: "__container__", align: VerticalAlign.Center },
                middle: { anchor: "__container__", align: HorizontalAlign.Center }
            });
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            If.create();
            if (this.showBackIcon) {
                this.ifElseBranchUpdateFunction(0, () => {
                    if (!If.canRetake('image')) {
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Image.create({ "id": 50332119, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                            Image.width({ "id": 50331959, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                            Image.id('image');
                            Image.alignRules({
                                left: { anchor: "__container__", align: HorizontalAlign.Start }
                            });
                            Image.onClick(() => {
                                router.back();
                            });
                        }, Image);
                    }
                });
            }
            else {
                this.ifElseBranchUpdateFunction(1, () => {
                });
            }
        }, If);
        If.pop();
        RelativeContainer.pop();
        Column.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
}
import geoLocationManager from "@ohos:geoLocationManager";
import { PermissionConst } from "@normalized:N&&&@tbs/common/src/main/ets/location/PermissionConst&1.0.0";
import { permissionManager } from "@normalized:N&&&@tbs/common/src/main/ets/location/PermissionManager&1.0.0";
class LocationManager {
    async requestPermissionAgain() {
        return await permissionManager.requestPermissionAgain(PermissionConst.locationPermissions, getContext(this));
    }
    async checkLocationPermissions(): Promise<boolean> {
        try {
            return await permissionManager.checkPermissions(PermissionConst.locationPermissions) &&
                geoLocationManager.isLocationEnabled();
        }
        catch (e) {
            console.log(`lucy== hasLocationPermissions, ${JSON.stringify(e)}`);
            return false;
        }
    }
    async checkAndApplyPermissions(context: Context): Promise<boolean> {
        let isGranted = await this.checkLocationPermissions();
        if (isGranted) {
            return true;
        }
        try {
            let userGranted = await permissionManager.reqPermissionsFromUser(PermissionConst.locationPermissions, context);
            if (userGranted) {
                return true;
            }
            else {
                return false;
            }
        }
        catch (e) {
            return Promise.reject(e);
        }
    }
}
export const locationManager = new LocationManager();
export class GlobalContext {
    static readonly CONTEXT = 'context';
    static readonly WANT = 'want';
    static readonly STATUS_BAR_HEIGHT = 'statusBarHeight';
    static readonly NAVIGATION_HEIGHT = 'navigationHeight';
    private constructor() { }
    private static instance: GlobalContext;
    private _objects = new Map<string, Object>();
    public static getContext(): GlobalContext {
        if (!GlobalContext.instance) {
            GlobalContext.instance = new GlobalContext();
        }
        return GlobalContext.instance;
    }
    getObject(value: string): Object | undefined {
        return this._objects.get(value);
    }
    setObject(key: string, objectClass: Object): void {
        this._objects.set(key, objectClass);
    }
}
import type { Permissions } from "@ohos:abilityAccessCtrl";
export class PermissionConst {
    static readonly locationPermissions: Array<Permissions> = [
        'ohos.permission.APPROXIMATELY_LOCATION',
        'ohos.permission.LOCATION',
    ];
    static readonly mediaRWPermissions: Array<Permissions> = [
        'ohos.permission.READ_MEDIA',
        'ohos.permission.WRITE_MEDIA'
    ];
    static readonly imageVideoReadPermission: Permissions = 'ohos.permission.READ_IMAGEVIDEO';
    static readonly imageVideoWritePermission: Permissions = 'ohos.permission.WRITE_IMAGEVIDEO';
    static readonly cameraPermission: Permissions = 'ohos.permission.CAMERA';
    static readonly oaIdPermission: Permissions = 'ohos.permission.APP_TRACKING_CONSENT';
}
export * from "@normalized:N&&&@tbs/common/src/main/ets/utils/WindowModel&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/utils/GlobalContext&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/utils/TextUtil&1.0.0";
export { ScreenUtils } from "@normalized:N&&&@tbs/common/src/main/ets/utils/ScreenUtil&1.0.0";
export { initDataPreference, commonStorage } from "@normalized:N&&&@tbs/common/src/main/ets/utils/StorageUtils&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/utils/ComponentUtils&1.0.0";
export { formatDate } from "@normalized:N&&&@tbs/common/src/main/ets/utils/formatDate&1.0.0";
import type { BusinessError } from "@ohos:base";
import bundleManager from "@ohos:bundle.bundleManager";
export enum ThirdApp {
    Alipay = "alipays://",
    Amapuri = "amapuri://",
    Baidumap = "baidumap://map/direction",
    Maps = "maps://",
    Https = "https://" 
}
class ThirdAppManager {
    isAppInstall(thirdApp: ThirdApp): boolean {
        try {
            return bundleManager.canOpenLink(thirdApp);
        }
        catch (e) {
            let code = (e as BusinessError)?.code;
            let msg = (e as BusinessError)?.message ?? '';
            if (code !== undefined) {
                if (code === 17700056) {
                    msg += ` Please include "${thirdApp.replace('://', '')}" inside the "querySchemes" element of module.json5 in your app module.`;
                }
                console.log(`isAppInstall get error${msg}`);
            }
            else {
                console.log(`isAppInstall get error${e}`);
            }
            return false;
        }
    }
}
export const thirdAppManager = new ThirdAppManager();
import bundleManager from "@ohos:bundle.bundleManager";
class AppBundleManager {
    private bundleInfo?: bundleManager.BundleInfo;
    getBundleInfo(): bundleManager.BundleInfo {
        if (this.bundleInfo == null || this.bundleInfo == undefined) {
            return bundleManager.getBundleInfoForSelfSync(bundleManager.BundleFlag.GET_BUNDLE_INFO_WITH_APPLICATION);
        }
        return this.bundleInfo;
    }
    getTokenId(): number {
        let bundleInfo = this.getBundleInfo();
        return bundleInfo.appInfo.accessTokenId;
    }
}
export const appBundleManager = new AppBundleManager();
export const formatDate = (dateStr: string) => {
    const date = new Date(dateStr);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
};
export class StorageConst {
    static readonly TOKEN = 'token';
    static readonly USER_INFO = 'userInfo';
    static readonly SCREEN_WIDTH_VP = 'screenWidthVp';
    static readonly SCREEN_HEIGHT_VP = 'screenHeightVp';
    static readonly FOLD_DISPLAY_MODE = 'foldDisplayMode';
    static readonly SEARCH_HISTORY = "search_history";
}
import display from "@ohos:display";
import { GlobalContext } from "@normalized:N&&&@tbs/common/src/main/ets/utils/index&1.0.0";
import window from "@ohos:window";
import type common from "@ohos:app.ability.common";
import { StorageConst } from "@normalized:N&&&@tbs/common/src/main/ets/manager/index&1.0.0";
export class ScreenUtils {
    private static instance: ScreenUtils;
    setWindow(windowInfo: window.Window) {
        const properties = windowInfo.getWindowProperties();
        this.setScreen(properties.windowRect.width, properties.windowRect.height);
        windowInfo.on("windowSizeChange", (size: Size) => {
            this.setScreen(size.width, size.height);
        });
    }
    private constructor() {
        this.defaultDisplay = display.getDefaultDisplaySync();
        this.defaultDisplay.getCutoutInfo((e, data) => {
            this.cutoutInfo = data;
        });
        let callback: Callback<display.FoldDisplayMode> = (data: display.FoldDisplayMode) => {
            this.setFoldDisplayMode(data);
        };
        display.on("foldDisplayModeChange", callback);
    }
    private setScreen(width: number, height: number) {
        AppStorage.setOrCreate(StorageConst.SCREEN_WIDTH_VP, px2vp(width));
        AppStorage.setOrCreate(StorageConst.SCREEN_HEIGHT_VP, px2vp(height));
    }
    private setFoldDisplayMode(data: display.FoldDisplayMode) {
        AppStorage.setOrCreate(StorageConst.FOLD_DISPLAY_MODE, data);
    }
    public static getInstance(): ScreenUtils {
        if (!ScreenUtils.instance) {
            ScreenUtils.instance = new ScreenUtils();
        }
        return ScreenUtils.instance;
    }
    private defaultDisplay: display.Display | null = null;
    private cutoutInfo: display.CutoutInfo | null = null;
    getDisplay(): display.Display | null {
        return this.defaultDisplay;
    }
    getScreenWidthPx(): number {
        return this.defaultDisplay?.width ?? -1;
    }
    getScreenHeightPx(): number {
        return this.defaultDisplay?.height ?? -1;
    }
    getScreenContentHeightPX(): number {
        return vp2px(this.getScreenHeightVp() - this.getStatusBarHeight());
    }
    getScreenContentHeightVp(): number {
        return px2vp(this.getScreenHeightPx());
    }
    getScreenHeightVp(): number {
        return px2vp(this.getScreenHeightPx());
    }
    getScreenWidthVp(): number {
        return px2vp(this.getScreenWidthPx());
    }
    getStatusBarHeight(): number {
        const statusBar = GlobalContext.getContext().getObject(GlobalContext.STATUS_BAR_HEIGHT) as number;
        return px2vp(statusBar);
    }
    getSafeBottomHeight() {
        const navigation = GlobalContext.getContext().getObject(GlobalContext.NAVIGATION_HEIGHT) as number;
        return px2vp(navigation);
    }
    async getBottomNavBarHeight(context: common.BaseContext): Promise<number> {
        const win = await window.getLastWindow(context);
        return px2vp(win.getWindowAvoidArea(window.AvoidAreaType.TYPE_NAVIGATION_INDICATOR).bottomRect.height);
    }
    async getStatusBarColor(): Promise<string> {
        const currentWindow = await window.getLastWindow(getContext(this));
        return currentWindow.getWindowSystemBarProperties().statusBarColor ?? '#000000';
    }
    updateStatusBarColor(isBlack: boolean) {
        window.getLastWindow(getContext(this)).then(currentWindow => {
            currentWindow.setWindowSystemBarProperties({ statusBarContentColor: isBlack ? '#000000' : '#ffffff' });
        });
    }
    isFoldable() {
        return display.isFoldable();
    }
    isFoldExpanded() {
        return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_EXPANDED;
    }
    isFoldHalfFolded() {
        return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_HALF_FOLDED;
    }
    isFoldFolded() {
        return this.isFoldable() && display.getFoldStatus() === display.FoldStatus.FOLD_STATUS_FOLDED;
    }
}
import dataPreferences from "@ohos:data.preferences";
import type preferences from "@ohos:data.preferences";
import HashMap from "@ohos:util.HashMap";
import type common from "@ohos:app.ability.common";
import { GlobalContext } from "@normalized:N&&&@tbs/common/src/main/ets/utils/GlobalContext&1.0.0";
import type { BusinessError } from "@ohos:base";
class Storage {
    private name: string = 'app_storage';
    private preferences: dataPreferences.Preferences | null = null;
    private listenerKeyMap = new HashMap<string, HashMap<string, Callback<string>>>();
    constructor(name: string) {
        this.name = name;
    }
    initStorage() {
        const context = GlobalContext.getContext().getObject('context') as common.UIAbilityContext;
        const options: dataPreferences.Options = { name: this.name };
        this.preferences = dataPreferences.getPreferencesSync(context, options);
        this.preferences?.on('change', (key: string) => {
            const pageMap = this.listenerKeyMap.get(key);
            pageMap?.forEach((callBack: Callback<string>) => {
                callBack(key);
            });
        });
    }
    saveValueSync(key: string, value: preferences.ValueType) {
        this.preferences?.putSync(key, value);
        this.preferences?.flush((err: BusinessError) => {
            if (err) {
                console.error(`${this.name} file flush error :${err.message ?? ""}`);
            }
        });
    }
    deleteValueSync(key: string) {
        this.preferences?.deleteSync(key);
        this.preferences?.flush((err: BusinessError) => {
            if (err) {
                console.error(`${this.name} file flush error :${err.message ?? ""}`);
            }
        });
    }
    getStringValueSync(key: string, defaultValue: string) {
        return this.preferences?.getSync(key, defaultValue) as string;
    }
    getArrayStringValueSync(key: string, defaultValue: Array<string>) {
        return this.preferences?.getSync(key, defaultValue) as Array<string>;
    }
}
export const commonStorage = new Storage('common_storage');
export function initDataPreference() {
    commonStorage.initStorage();
}
import { StorageConst } from "@normalized:N&&&@tbs/common/src/main/ets/manager/StorageConst&1.0.0";
import type { UserInfoData } from "../model/UserInfoModel";
import { commonStorage } from "@normalized:N&&&@tbs/common/src/main/ets/utils/index&1.0.0";
class UserCenterConst {
    userInfo: UserInfoData | null = null;
    getUserInfoData(): UserInfoData | null {
        if (this.userInfo) {
            return this.userInfo;
        }
        const value = commonStorage.getStringValueSync(StorageConst.USER_INFO, '');
        if (value && typeof value === 'object') {
            this.userInfo = value as UserInfoData;
            return this.userInfo;
        }
        if (typeof value === 'string' && value) {
            const p = JsonParse<UserInfoData>(value);
            if (p) {
                this.userInfo = p;
                return this.userInfo;
            }
        }
        return null;
    }
}
function JsonParse<T>(text: string): T | undefined {
    try {
        return JSON.parse(text);
    }
    catch (e) {
        console.error(`JSON解析错误: ${text}, 错误信息: ${e}`);
        return undefined;
    }
}
export default new UserCenterConst();
import measure from "@ohos:measure";
export class TextUtil {
    static getTextWidth(textContent: string, fontSize: number | string | Resource = { "id": 50332025, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, maxLines: number = 1, weight: FontWeight | number = FontWeight.Regular): number {
        if (!textContent || textContent.length === 0) {
            return 0;
        }
        const width: number = measure.measureText({
            textContent: textContent,
            fontSize: fontSize,
            fontWeight: weight,
            maxLines: maxLines
        });
        return px2vp(width);
    }
}
import abilityAccessCtrl from "@ohos:abilityAccessCtrl";
import type { PermissionRequestResult, Permissions } from "@ohos:abilityAccessCtrl";
import type { BusinessError } from "@ohos:base";
import { appBundleManager } from "@normalized:N&&&@tbs/common/src/main/ets/location/AppBundleManager&1.0.0";
class PermissionManager {
    atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
    async checkPermissions(permissions: Array<Permissions>): Promise<boolean> {
        console.log(`check permission ${permissions}`);
        try {
            let grantStatusArray: abilityAccessCtrl.GrantStatus[] = [];
            for (let i = 0; i < permissions.length; i++) {
                grantStatusArray[i] = await this.checkPermissionInner(permissions[i]);
            }
            console.log(`checkPermissions: ${permissions}, grantStatus ${grantStatusArray} `);
            const denied = grantStatusArray.indexOf(abilityAccessCtrl.GrantStatus.PERMISSION_DENIED) > -1;
            return !denied;
        }
        catch (e) {
            return Promise.reject(e);
        }
    }
    private async checkPermissionInner(permission: Permissions): Promise<abilityAccessCtrl.GrantStatus> {
        let grantStatus: abilityAccessCtrl.GrantStatus = abilityAccessCtrl.GrantStatus.PERMISSION_DENIED;
        try {
            grantStatus = await this.atManager.checkAccessToken(appBundleManager.getTokenId(), permission);
        }
        catch (error) {
            const err: BusinessError = error as BusinessError;
            console.log(`Failed to check access token. Code is ${err.code}, message is ${err.message}`);
            return Promise.reject(`checkPermissionInner: checkAccessToken error: ${JSON.stringify(error)}`);
        }
        return grantStatus;
    }
    async reqPermissionsFromUser(permissions: Array<Permissions>, context: Context): Promise<boolean> {
        let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();
        try {
            let result: PermissionRequestResult = await atManager.requestPermissionsFromUser(context, permissions);
            let grantStatus: Array<number> = result.authResults;
            for (let i = 0; i < grantStatus.length; i++) {
                if (grantStatus[i] === 0) {
                    console.log(`reqPermissionsFromUser: ${permissions[i]} is granted`);
                }
                else {
                    console.log(`reqPermissionsFromUser: ${permissions[i]} is denied`);
                    return false;
                }
            }
            return true;
        }
        catch (e) {
            console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
            return Promise.reject(e);
        }
    }
    async requestPermissionAgain(permissions: Array<Permissions>, context: Context): Promise<boolean> {
        try {
            const result = await this.atManager.requestPermissionOnSetting(context, permissions);
            return result.every((status) => {
                return status === abilityAccessCtrl.GrantStatus.PERMISSION_GRANTED;
            });
        }
        catch (e) {
            console.log(`reqPermissionsFromUser error: Code is ${e.code}, message is ${e.message}`);
            return Promise.reject(e);
        }
    }
}
let permissionManager = new PermissionManager();
export { permissionManager };
import window from "@ohos:window";
import type { BusinessError } from "@ohos:base";
export class WindowModel {
    private constructor() {
    }
    private readonly DEFAULT: window.SystemBarProperties = {
        statusBarColor: '#00000000',
        navigationBarColor: '#00000000',
        statusBarContentColor: '#000000',
        navigationBarContentColor: '#00000000'
    };
    private static instance?: WindowModel;
    static getInstance(): WindowModel {
        if (!WindowModel.instance) {
            WindowModel.instance = new WindowModel();
        }
        return WindowModel.instance;
    }
    private windowStage?: window.WindowStage;
    setWindowStage(windowStage: window.WindowStage): void {
        this.windowStage = windowStage;
    }
    getWindowStage(): window.WindowStage | undefined {
        return this.windowStage;
    }
    setMainWindowImmersive(enable: boolean, properties?: window.SystemBarProperties): void {
        if (this.windowStage === undefined) {
            console.error('windowStage is undefined.');
            return;
        }
        let windowClass: window.Window | null = null;
        this.windowStage.getMainWindow((err: BusinessError, data) => {
            let errCode: number = err.code;
            if (errCode) {
                console.error('Failed to obtain the main window. Cause: ' + JSON.stringify(err));
                return;
            }
            windowClass = data;
            console.info('Succeeded in obtaining the main window data.');
            windowClass.setWindowLayoutFullScreen(enable, (err: BusinessError) => {
                let errCode: number = err.code;
                if (errCode) {
                    console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));
                    return;
                }
                console.info('Succeeded in setting the window layout to full-screen mode.');
            });
            const p = properties ? properties : this.DEFAULT;
            windowClass.setWindowSystemBarProperties(p, (err: BusinessError) => {
                let errCode: number = err.code;
                if (errCode) {
                    console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));
                    return;
                }
                console.info('Succeeded in setting the system bar properties.');
            });
        });
    }
    getKeyBoardVisible(callback: (visible: boolean) => void) {
        window.getLastWindow(getContext(this)).then(currentWindow => {
            currentWindow.on('avoidAreaChange', data => {
                if (data.type == window.AvoidAreaType.TYPE_KEYBOARD) {
                    const keyBoardHeight = px2vp(data.area.bottomRect.height);
                    if (keyBoardHeight > 0) {
                        callback(true);
                    }
                    else {
                        callback(false);
                    }
                }
            });
        });
    }
}
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface LoginPage_Params {
    tenant?: string;
    username?: string;
    password?: string;
    Tenants?: TenantValueItem[];
}
import { StyleConst, toast } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import type { TenantItem, TenantValueItem } from './model/LoginModel';
import router from "@ohos:router";
import { getTenant, getToken } from "@normalized:N&&&entry/src/main/ets/login/viewModel/LoginViewModel&";
class LoginPage extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__tenant = new ObservedPropertySimplePU('', this, "tenant");
        this.__username = new ObservedPropertySimplePU('', this, "username");
        this.__password = new ObservedPropertySimplePU('', this, "password");
        this.__Tenants = new ObservedPropertyObjectPU([], this, "Tenants");
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: LoginPage_Params) {
        if (params.tenant !== undefined) {
            this.tenant = params.tenant;
        }
        if (params.username !== undefined) {
            this.username = params.username;
        }
        if (params.password !== undefined) {
            this.password = params.password;
        }
        if (params.Tenants !== undefined) {
            this.Tenants = params.Tenants;
        }
    }
    updateStateVars(params: LoginPage_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__tenant.purgeDependencyOnElmtId(rmElmtId);
        this.__username.purgeDependencyOnElmtId(rmElmtId);
        this.__password.purgeDependencyOnElmtId(rmElmtId);
        this.__Tenants.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__tenant.aboutToBeDeleted();
        this.__username.aboutToBeDeleted();
        this.__password.aboutToBeDeleted();
        this.__Tenants.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private __tenant: ObservedPropertySimplePU<string>;
    get tenant() {
        return this.__tenant.get();
    }
    set tenant(newValue: string) {
        this.__tenant.set(newValue);
    }
    private __username: ObservedPropertySimplePU<string>;
    get username() {
        return this.__username.get();
    }
    set username(newValue: string) {
        this.__username.set(newValue);
    }
    private __password: ObservedPropertySimplePU<string>;
    get password() {
        return this.__password.get();
    }
    set password(newValue: string) {
        this.__password.set(newValue);
    }
    private __Tenants: ObservedPropertyObjectPU<TenantValueItem[]>;
    get Tenants() {
        return this.__Tenants.get();
    }
    set Tenants(newValue: TenantValueItem[]) {
        this.__Tenants.set(newValue);
    }
    aboutToAppear() {
        this.getTenantData();
    }
    async getTenantData() {
        let data = await getTenant();
        if (data) {
            this.Tenants = data.map((item: TenantItem): TenantValueItem => ({
                value: item.name || ''
            })) || [];
        }
    }
    async login() {
        if (!this.tenant) {
            toast({ "id": 50331686, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            return;
        }
        if (!this.username) {
            toast({ "id": 50331684, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            return;
        }
        if (!this.password) {
            toast({ "id": 50331683, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            return;
        }
        let data = await getToken(this.tenant, this.username, this.password);
        if (data) {
            router.replaceUrl({
                url: 'home/HomePage'
            });
        }
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: 15 });
            Column.width(StyleConst.FULL_WIDTH);
            Column.height(StyleConst.FULL_HEIGHT);
            Column.backgroundImage({ "id": 50332145, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 50332131, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.width({ "id": 50331721, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.borderRadius({ "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.margin({ top: { "id": 50331743, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
        }, Image);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create({ "id": 50331701, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.fontColor(Color.Gray);
            Text.fontSize({ "id": 50332032, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Select.create(this.Tenants);
            Select.selected(0);
            Select.value({ "id": 50331686, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Select.font({ size: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, weight: FontWeight.Bold });
            Select.fontColor({ "id": 50331707, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Select.selectedOptionFont({ size: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, weight: FontWeight.Regular });
            Select.optionFont({ size: { "id": 50331786, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, weight: FontWeight.Regular });
            Select.width(StyleConst.PERCENT_60);
            Select.onSelect((index: number) => {
                this.tenant = (index + 1).toString();
            });
        }, Select);
        Select.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            TextInput.create({
                placeholder: { "id": 50331684, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
            });
            TextInput.width(StyleConst.PERCENT_90);
            TextInput.onChange((val: string) => {
                this.username = val;
            });
        }, TextInput);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            TextInput.create({
                placeholder: { "id": 50331683, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
            });
            TextInput.width(StyleConst.PERCENT_90);
            TextInput.onChange((val) => {
                this.password = val;
            });
            TextInput.type(InputType.Password);
        }, TextInput);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Button.createWithLabel({ "id": 50331667, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Button.width(StyleConst.PERCENT_90);
            Button.backgroundColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Button.onClick(() => {
                this.login();
            });
        }, Button);
        Button.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create({ "id": 50331672, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create({ "id": 50331688, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.fontWeight(FontWeight.Bold);
            Text.fontColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.onClick(() => {
                router.pushUrl({ url: 'register/RegisterPage' });
            });
        }, Text);
        Text.pop();
        Row.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            LoadingProgress.create();
            LoadingProgress.color({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            LoadingProgress.width({ "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            LoadingProgress.height({ "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, LoadingProgress);
        Column.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
    static getEntryName(): string {
        return "LoginPage";
    }
}
registerNamedRoute(() => new LoginPage(undefined, {}), "", { bundleName: "com.example.tbschargeharmonyos", moduleName: "entry", pagePath: "login/LoginPage", pageFullPath: "entry/src/main/ets/login/LoginPage", integratedHsp: "false", moduleType: "followWithHap" });
export * from "@normalized:N&&&@tbs/common/src/main/ets/location/LocationManager&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/location/ThirdAppManager&1.0.0";
export class CommonDataSource<T> implements IDataSource {
    private listeners: DataChangeListener[] = [];
    protected items: T[] = [];
    public totalCount(): number {
        return this.items.length;
    }
    public getData(index: number): T | void {
        return this.items[index];
    }
    ;
    public getList(): T[] {
        return this.items;
    }
    public clearData() {
        this.items = [];
        this.notifyDataReload();
    }
    public resetData(data: T | T[]) {
        this.items = [];
        if (Array.isArray(data)) {
            this.items.push(...data);
        }
        else {
            this.items.push(data);
        }
        this.notifyDataReload();
    }
    public setDataArray(data: T[]) {
        this.items = data;
        this.notifyDataReload();
    }
    public pushData(data: T | T[]): void {
        let fromIndex = this.items.length;
        if (Array.isArray(data)) {
            this.items.push(...data);
        }
        else {
            this.items.push(data);
        }
        this.notifyDatasetAdd(fromIndex, this.items.length - fromIndex);
    }
    public changeItem(index: number) {
        this.notifyDataChange(index);
    }
    public deleteData(index: number): void {
        this.items.splice(index, 1);
        this.notifyDataDelete(index);
    }
    registerDataChangeListener(listener: DataChangeListener): void {
        if (this.listeners.indexOf(listener) < 0) {
            this.listeners.push(listener);
        }
    }
    unregisterDataChangeListener(listener: DataChangeListener): void {
        const pos = this.listeners.indexOf(listener);
        if (pos >= 0) {
            this.listeners.splice(pos, 1);
        }
    }
    notifyDataReload(): void {
        this.listeners.forEach((listener: DataChangeListener) => {
            listener.onDatasetChange([{ type: DataOperationType.RELOAD }]);
        });
    }
    notifyDatasetAdd(insertIndex: number, addCount: number): void {
        this.listeners.forEach(listener => {
            listener.onDatasetChange([{ type: DataOperationType.ADD, index: insertIndex, count: addCount }]);
        });
    }
    notifyDataChange(changeIndex: number): void {
        this.listeners.forEach((listener: DataChangeListener) => {
            listener.onDatasetChange([{ type: DataOperationType.CHANGE, index: changeIndex }]);
        });
    }
    notifyDataDelete(deleteIndex: number): void {
        this.listeners.forEach((listener: DataChangeListener) => {
            listener.onDatasetChange([{ type: DataOperationType.DELETE, index: deleteIndex }]);
        });
    }
}
export class RoutePageConst {
    static readonly AppHomePage = "home/HomePage"; 
    static readonly LoginPage = "login/LoginPage"; 
}
export * from "@normalized:N&&&@tbs/common/src/main/ets/manager/StorageConst&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/manager/RoutePageConst&1.0.0";
export * from "@normalized:N&&&@tbs/common/src/main/ets/manager/UserCenterConst&1.0.0";
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface Index_Params {
    message?: string;
}
import { ChargePage } from "@normalized:N&&&@tbs/charge/Index&1.0.0";
import { MinePage } from "@normalized:N&&&@tbs/mine/Index&1.0.0";
class Index extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__message = new ObservedPropertySimplePU('Hello World', this, "message");
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: Index_Params) {
        if (params.message !== undefined) {
            this.message = params.message;
        }
    }
    updateStateVars(params: Index_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__message.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__message.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private __message: ObservedPropertySimplePU<string>;
    get message() {
        return this.__message.get();
    }
    set message(newValue: string) {
        this.__message.set(newValue);
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
        }, Column);
        {
            this.observeComponentCreation2((elmtId, isInitialRender) => {
                if (isInitialRender) {
                    let componentCall = new ChargePage(this, {}, undefined, elmtId, () => { }, { page: "entry/src/main/ets/pages/Index.ets", line: 12, col: 7 });
                    ViewPU.create(componentCall);
                    let paramsLambda = () => {
                        return {};
                    };
                    componentCall.paramsGenerator_ = paramsLambda;
                }
                else {
                    this.updateStateVarsOfChildByElmtId(elmtId, {});
                }
            }, { name: "ChargePage" });
        }
        {
            this.observeComponentCreation2((elmtId, isInitialRender) => {
                if (isInitialRender) {
                    let componentCall = new MinePage(this, {}, undefined, elmtId, () => { }, { page: "entry/src/main/ets/pages/Index.ets", line: 13, col: 7 });
                    ViewPU.create(componentCall);
                    let paramsLambda = () => {
                        return {};
                    };
                    componentCall.paramsGenerator_ = paramsLambda;
                }
                else {
                    this.updateStateVarsOfChildByElmtId(elmtId, {});
                }
            }, { name: "MinePage" });
        }
        Column.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
    static getEntryName(): string {
        return "Index";
    }
}
registerNamedRoute(() => new Index(undefined, {}), "", { bundleName: "com.example.tbschargeharmonyos", moduleName: "entry", pagePath: "pages/Index", pageFullPath: "entry/src/main/ets/pages/Index", integratedHsp: "false", moduleType: "followWithHap" });
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface RegisterPage_Params {
    adminUsername?: string;
    adminPassword?: string;
    validCode?: string;
    name?: string;
    domain?: string;
}
import { StyleConst, toast } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import router from "@ohos:router";
import { getRegister } from "@normalized:N&&&entry/src/main/ets/register/viewModel/RegisterViewModel&";
class RegisterPage extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__adminUsername = new ObservedPropertySimplePU('' 
        , this, "adminUsername");
        this.__adminPassword = new ObservedPropertySimplePU('' 
        , this, "adminPassword");
        this.__validCode = new ObservedPropertySimplePU('' 
        , this, "validCode");
        this.__name = new ObservedPropertySimplePU('' 
        , this, "name");
        this.__domain = new ObservedPropertySimplePU('' 
        , this, "domain");
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: RegisterPage_Params) {
        if (params.adminUsername !== undefined) {
            this.adminUsername = params.adminUsername;
        }
        if (params.adminPassword !== undefined) {
            this.adminPassword = params.adminPassword;
        }
        if (params.validCode !== undefined) {
            this.validCode = params.validCode;
        }
        if (params.name !== undefined) {
            this.name = params.name;
        }
        if (params.domain !== undefined) {
            this.domain = params.domain;
        }
    }
    updateStateVars(params: RegisterPage_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__adminUsername.purgeDependencyOnElmtId(rmElmtId);
        this.__adminPassword.purgeDependencyOnElmtId(rmElmtId);
        this.__validCode.purgeDependencyOnElmtId(rmElmtId);
        this.__name.purgeDependencyOnElmtId(rmElmtId);
        this.__domain.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__adminUsername.aboutToBeDeleted();
        this.__adminPassword.aboutToBeDeleted();
        this.__validCode.aboutToBeDeleted();
        this.__name.aboutToBeDeleted();
        this.__domain.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private __adminUsername: ObservedPropertySimplePU<string>; 
    get adminUsername() {
        return this.__adminUsername.get();
    }
    set adminUsername(newValue: string) {
        this.__adminUsername.set(newValue);
    }
    private __adminPassword: ObservedPropertySimplePU<string>; 
    get adminPassword() {
        return this.__adminPassword.get();
    }
    set adminPassword(newValue: string) {
        this.__adminPassword.set(newValue);
    }
    private __validCode: ObservedPropertySimplePU<string>; 
    get validCode() {
        return this.__validCode.get();
    }
    set validCode(newValue: string) {
        this.__validCode.set(newValue);
    }
    private __name: ObservedPropertySimplePU<string>; 
    get name() {
        return this.__name.get();
    }
    set name(newValue: string) {
        this.__name.set(newValue);
    }
    private __domain: ObservedPropertySimplePU<string>; 
    get domain() {
        return this.__domain.get();
    }
    set domain(newValue: string) {
        this.__domain.set(newValue);
    }
    async getRegisterInfo() {
        if (!this.adminUsername) {
            toast({ "id": 50331684, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            return;
        }
        if (!this.adminPassword) {
            toast({ "id": 50331683, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            return;
        }
        if (!this.validCode) {
            toast({ "id": 50331685, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            return;
        }
        if (!this.name) {
            toast({ "id": 50331681, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            return;
        }
        if (!this.domain) {
            toast({ "id": 50331682, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            return;
        }
        let data = await getRegister(this.name, this.domain, this.adminUsername, this.adminPassword, this.validCode);
        console.log('lucy== data', JSON.stringify(data));
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: 15 });
            Column.width(StyleConst.FULL_WIDTH);
            Column.height(StyleConst.FULL_HEIGHT);
            Column.backgroundImage({ "id": 50332145, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 50332131, "type": 20000, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.width({ "id": 50331721, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.borderRadius({ "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Image.margin({ top: { "id": 50331743, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
        }, Image);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create({ "id": 50331702, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.fontColor(Color.Gray);
            Text.fontSize({ "id": 50332032, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            TextInput.create({
                placeholder: { "id": 50331684, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
            });
            TextInput.width(StyleConst.PERCENT_90);
            TextInput.onChange((val: string) => {
                this.adminUsername = val;
            });
        }, TextInput);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.justifyContent(FlexAlign.SpaceBetween);
            Row.width(StyleConst.PERCENT_90);
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            TextInput.create({ placeholder: { "id": 50331700, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
            TextInput.width(StyleConst.PERCENT_50);
            TextInput.onChange((val: string) => this.validCode = val);
        }, TextInput);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Button.createWithLabel({ "id": 50331663, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Button.width(StyleConst.PERCENT_40);
            Button.backgroundColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Button);
        Button.pop();
        Row.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            TextInput.create({
                placeholder: { "id": 50331676, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
            });
            TextInput.width(StyleConst.PERCENT_90);
            TextInput.onChange((val: string) => this.adminPassword = val);
            TextInput.type(InputType.Password);
        }, TextInput);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            TextInput.create({
                placeholder: { "id": 50331655, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
            });
            TextInput.width(StyleConst.PERCENT_90);
            TextInput.onChange((val: string) => {
                this.name = val;
            });
        }, TextInput);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            TextInput.create({
                placeholder: { "id": 50331656, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
            });
            TextInput.width(StyleConst.PERCENT_90);
            TextInput.onChange((val: string) => {
                this.domain = val;
            });
        }, TextInput);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Button.createWithLabel({ "id": 50331689, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Button.width(StyleConst.PERCENT_90);
            Button.backgroundColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Button.onClick(() => {
                this.getRegisterInfo();
            });
        }, Button);
        Button.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create({ "id": 50331659, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create({ "id": 50331668, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.fontWeight(FontWeight.Bold);
            Text.fontColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Text.onClick(() => {
                router.back();
            });
        }, Text);
        Text.pop();
        Row.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            LoadingProgress.create();
            LoadingProgress.color({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            LoadingProgress.width({ "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            LoadingProgress.height({ "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, LoadingProgress);
        Column.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
    static getEntryName(): string {
        return "RegisterPage";
    }
}
registerNamedRoute(() => new RegisterPage(undefined, {}), "", { bundleName: "com.example.tbschargeharmonyos", moduleName: "entry", pagePath: "register/RegisterPage", pageFullPath: "entry/src/main/ets/register/RegisterPage", integratedHsp: "false", moduleType: "followWithHap" });
import http from "@ohos:net.http";
import type { LoginData, TenantsData } from "../model/LoginModel";
import { Apis, StorageConst, commonStorage, requestApiCall, toast } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import type { UserInfoData } from "@tbs/mine/src/main/ets/model/MineModel";
import type { BusinessError } from "@ohos:base";
export function getTenant() {
    return requestApiCall(Apis.USER_TENANT, http.RequestMethod.GET).then((res) => {
        if (res.code !== 0 && res.message) {
            toast(res.message);
        }
        const data = res.data as TenantsData;
        return data.Data;
    }).catch((err: BusinessError) => {
        console.error(`lucy++ 获取租户ID接口调用失败，${err.code}+${err.message}`);
    });
}
export function getToken(tenant: string, username: string, password: string) {
    const headers: Record<string, string> = {
        'X-Tenant-ID': tenant,
    };
    const params: Record<string, Object> = {
        "username": username,
        "password": password
    };
    return requestApiCall(Apis.USER_LOGIN, http.RequestMethod.POST, params, headers).then(res => {
        if (res.code !== 0 && res.message) {
            toast(res.message);
        }
        const data = res.data as LoginData;
        let token = data.token;
        console.log('lucy== token', token);
        if (token) {
            commonStorage.saveValueSync(StorageConst.TOKEN, token);
            getUserInfo();
        }
        return token;
    }).catch((err: BusinessError) => {
        console.error(`lucy++ 获取登录接口调用失败，${err.code}+${err.message}`);
    });
}
export function getUserInfo() {
    return requestApiCall(Apis.USER_INFO, http.RequestMethod.GET).then(res => {
        if (res.code !== 0 && res.message) {
            toast(res.message);
        }
        const data = res.data as UserInfoData;
        if (data) {
            commonStorage.saveValueSync(StorageConst.USER_INFO, data);
        }
    }).catch((err: BusinessError) => {
        console.error(`lucy++ 获取用户信息接口调用失败，${err.code}+${err.message}`);
    });
}
import ConfigurationConstant from "@ohos:app.ability.ConfigurationConstant";
import UIAbility from "@ohos:app.ability.UIAbility";
import type AbilityConstant from "@ohos:app.ability.AbilityConstant";
import type Want from "@ohos:app.ability.Want";
import hilog from "@ohos:hilog";
import window from "@ohos:window";
import { commonStorage, GlobalContext, initDataPreference, RoutePageConst, StorageConst, WindowModel } from "@normalized:N&&&@tbs/common/Index&1.0.0";
const DOMAIN = 0x0000;
export default class EntryAbility extends UIAbility {
    onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {
        this.context.getApplicationContext().setColorMode(ConfigurationConstant.ColorMode.COLOR_MODE_NOT_SET);
        hilog.info(DOMAIN, 'testTag', '%{public}s', 'Ability onCreate');
        GlobalContext.getContext().setObject(GlobalContext.CONTEXT, this.context);
        initDataPreference();
    }
    onDestroy(): void {
        hilog.info(DOMAIN, 'testTag', '%{public}s', 'Ability onDestroy');
    }
    onWindowStageCreate(windowStage: window.WindowStage): void {
        hilog.info(DOMAIN, 'testTag', '%{public}s', 'Ability onWindowStageCreate');
        this.setMainWindowImmersive(windowStage);
        let destPageUrl = RoutePageConst.AppHomePage;
        if (!commonStorage.getStringValueSync(StorageConst.TOKEN, "")) {
            destPageUrl = RoutePageConst.LoginPage;
        }
        windowStage.loadContent(destPageUrl, (err) => {
            if (err.code) {
                hilog.error(DOMAIN, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err));
                return;
            }
            hilog.info(DOMAIN, 'testTag', 'Succeeded in loading the content.');
        });
    }
    onWindowStageDestroy(): void {
        hilog.info(DOMAIN, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');
    }
    onForeground(): void {
        hilog.info(DOMAIN, 'testTag', '%{public}s', 'Ability onForeground');
    }
    onBackground(): void {
        hilog.info(DOMAIN, 'testTag', '%{public}s', 'Ability onBackground');
    }
    setMainWindowImmersive(windowStage: window.WindowStage) {
        WindowModel.getInstance().setWindowStage(windowStage);
        WindowModel.getInstance().setMainWindowImmersive(true);
        let type = window.AvoidAreaType.TYPE_SYSTEM;
        try {
            let mainWindow = windowStage.getMainWindowSync();
            let avoidArea = mainWindow.getWindowAvoidArea(type);
            GlobalContext.getContext().setObject(GlobalContext.STATUS_BAR_HEIGHT, avoidArea.topRect.height); 
            let t = window.AvoidAreaType.TYPE_NAVIGATION_INDICATOR;
            let avoidAreaIndicator = mainWindow.getWindowAvoidArea(t);
            let bottomRectHeight = avoidAreaIndicator.bottomRect.height; 
            GlobalContext.getContext().setObject(GlobalContext.NAVIGATION_HEIGHT, bottomRectHeight);
        }
        catch (e) {
            console.error('lucy++ EntryAbility getMainWindowSync error:' + e.message);
        }
    }
}
import http from "@ohos:net.http";
import { Apis, requestApiCall } from "@normalized:N&&&@tbs/common/Index&1.0.0";
export function getRegister(name: string, domain: string, adminUsername: string, adminPassword: string, validCode: string) {
    return requestApiCall(Apis.USER_REGISTER, http.RequestMethod.POST, {}, { 'Content-Type': 'application/json' }).then(res => {
    });
}
import hilog from "@ohos:hilog";
import BackupExtensionAbility from "@ohos:application.BackupExtensionAbility";
import type { BundleVersion } from "@ohos:application.BackupExtensionAbility";
const DOMAIN = 0x0000;
export default class EntryBackupAbility extends BackupExtensionAbility {
    async onBackup() {
        hilog.info(DOMAIN, 'testTag', 'onBackup ok');
        await Promise.resolve();
    }
    async onRestore(bundleVersion: BundleVersion) {
        hilog.info(DOMAIN, 'testTag', 'onRestore ok %{public}s', JSON.stringify(bundleVersion));
        await Promise.resolve();
    }
}
import { requestApiCall, Apis, toast } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import http from "@ohos:net.http";
import type { ChargeListData, OrderTypeData, PileListData, PriceListData } from "../model/ChargeModel";
import type { BusinessError } from "@ohos:base";
export function getStations(name: string, pageNo: number = 1, pageSize: number = 20) {
    return requestApiCall(`${Apis.CHARGE_STATION_LIST}?name=${name}&pageNo=${pageNo}&pageSize=${pageSize}`, http.RequestMethod.GET).then(res => {
        if (res.code !== 0 && res.message) {
            toast(res.message);
        }
        const data = res.data as ChargeListData;
        return data;
    }).catch((err: BusinessError) => {
        console.error(`lucy++ 获取充电站接口调用失败，${err.code}+${err.message}`);
    });
}
export function getPiles(stationId: number) {
    return requestApiCall(`${Apis.CHARGE_PILE_LIST}?stationId=${stationId}`, http.RequestMethod.GET).then(res => {
        if (res.code !== 0 && res.message) {
            toast(res.message);
        }
        const data = res.data as PileListData;
        return data.List;
    }).catch((err: BusinessError) => {
        console.error(`lucy++ 获取充电桩接口调用失败，${err.code}+${err.message}`);
    });
}
export function getChargePrice(pageNo: number = 1, pageSize: number = 20) {
    return requestApiCall(`${Apis.CHARGE_PRICE}?pageNo=${pageNo}&pageSize=${pageSize}`, http.RequestMethod.GET)
        .then(res => {
        if (res.code !== 0 && res.message) {
            toast(res.message);
        }
        const data = res.data as PriceListData;
        return data.List;
    }).catch((err: BusinessError) => {
        console.error(`lucy++ 获取充电价格接口调用失败，${err.code}+${err.message}`);
    });
}
export function getStartCharge(pileId: number) {
    const params: Record<string, Object> = {
        "pileId": pileId
    };
    return requestApiCall(Apis.CHARGE_START, http.RequestMethod.POST, params).then(res => {
        if (res.code !== 0 && res.message) {
            toast(res.message);
        }
        return res.code;
    }).catch((err: BusinessError) => {
        console.error(`lucy++ 开始充电接口调用失败，${err.code}+${err.message}`);
    });
}
export function getChargeOrders(pageNo: number, pageSize: number) {
    return requestApiCall(`${Apis.CHARGE_ORDER_LIST}?pageNo=${pageNo}&pageSize=${pageSize}`, http.RequestMethod.GET)
        .then(res => {
        if (res.code !== 0 && res.message) {
            toast(res.message);
        }
        const data = res.data as OrderTypeData;
        return data;
    }).catch((err: BusinessError) => {
        console.error(`lucy++ 获取充电订单列表接口调用失败，${err.code}+${err.message}`);
    });
}
export function getStopCharge(orderId: number) {
    const params: Record<string, Object> = {
        "orderId": orderId
    };
    return requestApiCall(Apis.CHARGE_STOP, http.RequestMethod.POST, params).then(res => {
        if (res.code !== 0 && res.message) {
            toast(res.message);
        }
        console.log('lucy== 结束res', JSON.stringify(res));
        return res.code;
    }).catch((err: BusinessError) => {
        console.error(`lucy++ 结束充电接口调用失败，${err.code}+${err.message}`);
    });
}
{
  "string": [
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface ChargingPage_Params {
    pileItem?: PileType;
    priceList?: PriceType[];
    chargePriceController?: CustomDialogController | null;
}
import { StyleConst, TbsTitleBar, BottomPop, toast } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import router from "@ohos:router";
import type { PileType, PriceType } from "../model/ChargeModel";
import { ChargePriceDialogView } from "@normalized:N&&&@tbs/charge/src/main/ets/view/ChargePriceDialogView&1.0.0";
import { getChargePrice, getStartCharge } from "@normalized:N&&&@tbs/charge/src/main/ets/viewModel/ChargeViewModel&1.0.0";
import "@normalized:N&&&@tbs/charge/src/main/ets/page/ChargeOrderPage&1.0.0";
export class ChargingPage extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__pileItem = new ObservedPropertyObjectPU({}, this, "pileItem");
        this.__priceList = new ObservedPropertyObjectPU([], this, "priceList");
        this.chargePriceController = new CustomDialogController({
            builder: () => {
                let jsDialog = new BottomPop(this, {
                    title: '收费标准',
                    bgColor: { "id": 50331716, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                    titleBgColor: { "id": 50331716, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                    contentBgColor: { "id": 50331716, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                    keyboardAvoidMode: KeyboardAvoidMode.NONE,
                    childBuilderParam: () => {
                        this.chargePriceDialog();
                    }
                }, undefined, -1, () => { }, { page: "feature/charge/src/main/ets/page/ChargingPage.ets", line: 23, col: 14 });
                jsDialog.setController(this.chargePriceController);
                ViewPU.create(jsDialog);
                let paramsLambda = () => {
                    return {
                        title: '收费标准',
                        bgColor: { "id": 50331716, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                        titleBgColor: { "id": 50331716, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                        contentBgColor: { "id": 50331716, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" },
                        keyboardAvoidMode: KeyboardAvoidMode.NONE,
                        childBuilderParam: () => {
                            this.chargePriceDialog();
                        }
                    };
                };
                jsDialog.paramsGenerator_ = paramsLambda;
            },
            customStyle: true,
            alignment: DialogAlignment.Bottom,
            maskColor: { "id": 50331709, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }
        }, this);
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: ChargingPage_Params) {
        if (params.pileItem !== undefined) {
            this.pileItem = params.pileItem;
        }
        if (params.priceList !== undefined) {
            this.priceList = params.priceList;
        }
        if (params.chargePriceController !== undefined) {
            this.chargePriceController = params.chargePriceController;
        }
    }
    updateStateVars(params: ChargingPage_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__pileItem.purgeDependencyOnElmtId(rmElmtId);
        this.__priceList.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__pileItem.aboutToBeDeleted();
        this.__priceList.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private __pileItem: ObservedPropertyObjectPU<PileType>;
    get pileItem() {
        return this.__pileItem.get();
    }
    set pileItem(newValue: PileType) {
        this.__pileItem.set(newValue);
    }
    private __priceList: ObservedPropertyObjectPU<PriceType[]>;
    get priceList() {
        return this.__priceList.get();
    }
    set priceList(newValue: PriceType[]) {
        this.__priceList.set(newValue);
    }
    onPageShow(): void {
        const PileTypeParams = router.getParams() as Record<string, Object>;
        if (PileTypeParams) {
            this.pileItem = PileTypeParams.item as PileType;
        }
    }
    private chargePriceController: CustomDialogController | null;
    chargePriceDialog(parent = null) {
        {
            this.observeComponentCreation2((elmtId, isInitialRender) => {
                if (isInitialRender) {
                    let componentCall = new ChargePriceDialogView(this, { priceList: this.priceList }, undefined, elmtId, () => { }, { page: "feature/charge/src/main/ets/page/ChargingPage.ets", line: 40, col: 5 });
                    ViewPU.create(componentCall);
                    let paramsLambda = () => {
                        return {
                            priceList: this.priceList
                        };
                    };
                    componentCall.paramsGenerator_ = paramsLambda;
                }
                else {
                    this.updateStateVarsOfChildByElmtId(elmtId, {
                        priceList: this.priceList
                    });
                }
            }, { name: "ChargePriceDialogView" });
        }
    }
    async getChargePriceData() {
        let data = await getChargePrice();
        if (data) {
            this.priceList = data;
        }
    }
    async getStartChargeData() {
        if (this.pileItem.id) {
            let data = await getStartCharge(this.pileItem.id);
            if (data == 0) {
                toast('充电成功');
                router.pushNamedRoute({
                    name: 'ChargeOrderPage'
                });
            }
        }
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: 10 });
            Column.width(StyleConst.FULL_WIDTH);
            Column.height(StyleConst.FULL_HEIGHT);
            Column.backgroundColor({ "id": 50331715, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Column);
        {
            this.observeComponentCreation2((elmtId, isInitialRender) => {
                if (isInitialRender) {
                    let componentCall = new 
                    TbsTitleBar(this, { title: '充电ing', showBackIcon: true }, undefined, elmtId, () => { }, { page: "feature/charge/src/main/ets/page/ChargingPage.ets", line: 68, col: 7 });
                    ViewPU.create(componentCall);
                    let paramsLambda = () => {
                        return {
                            title: '充电ing',
                            showBackIcon: true
                        };
                    };
                    componentCall.paramsGenerator_ = paramsLambda;
                }
                else {
                    this.updateStateVarsOfChildByElmtId(elmtId, {
                        title: '充电ing', showBackIcon: true
                    });
                }
            }, { name: "TbsTitleBar" });
        }
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: 10 });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.height({ "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.justifyContent(FlexAlign.SpaceBetween);
            Row.width(StyleConst.PERCENT_95);
            Row.padding({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.borderRadius({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.backgroundColor({ "id": 50331718, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('充电站');
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.pileItem?.stationName);
        }, Text);
        Text.pop();
        Row.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.height({ "id": 50331965, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.justifyContent(FlexAlign.SpaceBetween);
            Row.width(StyleConst.PERCENT_95);
            Row.padding({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.borderRadius({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Row.backgroundColor({ "id": 50331718, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('设备编号');
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.pileItem.code);
        }, Text);
        Text.pop();
        Row.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: 20 });
            Column.width(StyleConst.PERCENT_95);
            Column.padding({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Column.borderRadius({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Column.backgroundColor({ "id": 50331718, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Column.alignItems(HorizontalAlign.Start);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.width(StyleConst.FULL_WIDTH);
            Row.justifyContent(FlexAlign.SpaceBetween);
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('收费标准');
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('收费规则 >>');
            Text.onClick(() => {
                this.chargePriceController?.open();
                this.getChargePriceData();
            });
        }, Text);
        Text.pop();
        Row.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.width(StyleConst.FULL_WIDTH);
            Row.justifyContent(FlexAlign.SpaceBetween);
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('充电时长');
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('充满即止 >>');
        }, Text);
        Text.pop();
        Row.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('PS：此功能不涉及支付，只做演示使用');
            Text.fontColor(Color.Red);
        }, Text);
        Text.pop();
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Button.createWithLabel('充电');
            Button.onClick(() => {
                this.getStartChargeData();
            });
            Button.fontColor(Color.White);
            Button.backgroundColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
            Button.width(StyleConst.PERCENT_95);
        }, Button);
        Button.pop();
        Column.pop();
        Column.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
    static getEntryName(): string {
        return "ChargingPage";
    }
}
{
    let routeNameNode = 'ChargingPage';
    registerNamedRoute(() => new ChargingPage(undefined, {}), routeNameNode, { bundleName: "com.example.tbschargeharmonyos", moduleName: "entry", pagePath: "../../../../feature/charge/src/main/ets/page/ChargingPage", pageFullPath: "feature/charge/src/main/ets/page/ChargingPage", integratedHsp: "false", moduleType: "followWithHap" });
}
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface ChargePage_Params {
    name?: string;
    chargeList?: ChargeType[];
    inputController?: TextInputController;
}
import { ScreenUtils, StyleConst, toast } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import type { ChargeType } from "../model/ChargeModel";
import { ChargeListView } from "@normalized:N&&&@tbs/charge/src/main/ets/view/ChargeListView&1.0.0";
import { ChargeSearchBarView } from "@normalized:N&&&@tbs/charge/src/main/ets/view/ChargeSearchBarView&1.0.0";
import { getStations } from "@normalized:N&&&@tbs/charge/src/main/ets/viewModel/ChargeViewModel&1.0.0";
export class ChargePage extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__name = new ObservedPropertySimplePU('', this, "name");
        this.__chargeList = new ObservedPropertyObjectPU([], this, "chargeList");
        this.inputController = new TextInputController();
        this.setInitiallyProvidedValue(params);
        this.declareWatch("name", this.onChangeName);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: ChargePage_Params) {
        if (params.name !== undefined) {
            this.name = params.name;
        }
        if (params.chargeList !== undefined) {
            this.chargeList = params.chargeList;
        }
        if (params.inputController !== undefined) {
            this.inputController = params.inputController;
        }
    }
    updateStateVars(params: ChargePage_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__name.purgeDependencyOnElmtId(rmElmtId);
        this.__chargeList.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__name.aboutToBeDeleted();
        this.__chargeList.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private __name: ObservedPropertySimplePU<string>;
    get name() {
        return this.__name.get();
    }
    set name(newValue: string) {
        this.__name.set(newValue);
    }
    private __chargeList: ObservedPropertyObjectPU<ChargeType[]>;
    get chargeList() {
        return this.__chargeList.get();
    }
    set chargeList(newValue: ChargeType[]) {
        this.__chargeList.set(newValue);
    }
    private inputController: TextInputController;
    aboutToAppear(): void {
        this.getStationData();
    }
    async getStationData() {
        let data = await getStations(this.name);
        if (data && data.List) {
            this.chargeList = data.List;
        }
    }
    onChangeName() {
        if (this.name == '') {
            this.getStationData();
        }
    }
    chargeSearchBar(parent = null) {
        {
            this.observeComponentCreation2((elmtId, isInitialRender) => {
                if (isInitialRender) {
                    let componentCall = new ChargeSearchBarView(this, {
                        name: this.__name,
                        maxLength: 30,
                        inputController: this.inputController,
                        searchButtonCallback: (value) => {
                            if (!value) {
                                toast('请输入搜索内容');
                            }
                            else {
                                this.name = value.replace(/\s+/g, '');
                                this.getStationData();
                            }
                        }
                    }, undefined, elmtId, () => { }, { page: "feature/charge/src/main/ets/page/ChargePage.ets", line: 34, col: 5 });
                    ViewPU.create(componentCall);
                    let paramsLambda = () => {
                        return {
                            name: this.name,
                            maxLength: 30,
                            inputController: this.inputController,
                            searchButtonCallback: (value) => {
                                if (!value) {
                                    toast('请输入搜索内容');
                                }
                                else {
                                    this.name = value.replace(/\s+/g, '');
                                    this.getStationData();
                                }
                            }
                        };
                    };
                    componentCall.paramsGenerator_ = paramsLambda;
                }
                else {
                    this.updateStateVarsOfChildByElmtId(elmtId, {});
                }
            }, { name: "ChargeSearchBarView" });
        }
    }
    chargeSearchList(parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            __Common__.create();
            __Common__.margin({ top: 50 + ScreenUtils.getInstance().getStatusBarHeight() });
        }, __Common__);
        {
            this.observeComponentCreation2((elmtId, isInitialRender) => {
                if (isInitialRender) {
                    let componentCall = new ChargeListView(this, { chargeList: this.chargeList }, undefined, elmtId, () => { }, { page: "feature/charge/src/main/ets/page/ChargePage.ets", line: 52, col: 5 });
                    ViewPU.create(componentCall);
                    let paramsLambda = () => {
                        return {
                            chargeList: this.chargeList
                        };
                    };
                    componentCall.paramsGenerator_ = paramsLambda;
                }
                else {
                    this.updateStateVarsOfChildByElmtId(elmtId, {
                        chargeList: this.chargeList
                    });
                }
            }, { name: "ChargeListView" });
        }
        __Common__.pop();
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Stack.create();
            Stack.alignContent(Alignment.Top);
            Stack.width(StyleConst.FULL_WIDTH);
            Stack.height(StyleConst.FULL_HEIGHT);
            Stack.backgroundColor({ "id": 50331716, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Stack);
        this.chargeSearchBar.bind(this)() 
        ;
        this.chargeSearchList.bind(this)() 
        ;
        Stack.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
}
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface ChargeOrderPage_Params {
    Orders?: OrderType[];
    loading?: boolean;
    pageNum?: number;
    pageSize?: number;
    haveNextPage?: boolean;
}
import { BottomLoadingBuilder, formatDate, StyleConst, TbsTitleBar, toast } from "@normalized:N&&&@tbs/common/Index&1.0.0";
import type { OrderType } from "../model/ChargeModel";
import { getChargeOrders, getStopCharge } from "@normalized:N&&&@tbs/charge/src/main/ets/viewModel/ChargeViewModel&1.0.0";
export class ChargeOrderPage extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__Orders = new ObservedPropertyObjectPU([], this, "Orders");
        this.__loading = new ObservedPropertySimplePU(false 
        , this, "loading");
        this.__pageNum = new ObservedPropertySimplePU(1 
        , this, "pageNum");
        this.__pageSize = new ObservedPropertySimplePU(5, this, "pageSize");
        this.__haveNextPage = new ObservedPropertySimplePU(false 
        , this, "haveNextPage");
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: ChargeOrderPage_Params) {
        if (params.Orders !== undefined) {
            this.Orders = params.Orders;
        }
        if (params.loading !== undefined) {
            this.loading = params.loading;
        }
        if (params.pageNum !== undefined) {
            this.pageNum = params.pageNum;
        }
        if (params.pageSize !== undefined) {
            this.pageSize = params.pageSize;
        }
        if (params.haveNextPage !== undefined) {
            this.haveNextPage = params.haveNextPage;
        }
    }
    updateStateVars(params: ChargeOrderPage_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__Orders.purgeDependencyOnElmtId(rmElmtId);
        this.__loading.purgeDependencyOnElmtId(rmElmtId);
        this.__pageNum.purgeDependencyOnElmtId(rmElmtId);
        this.__pageSize.purgeDependencyOnElmtId(rmElmtId);
        this.__haveNextPage.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__Orders.aboutToBeDeleted();
        this.__loading.aboutToBeDeleted();
        this.__pageNum.aboutToBeDeleted();
        this.__pageSize.aboutToBeDeleted();
        this.__haveNextPage.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    private __Orders: ObservedPropertyObjectPU<OrderType[]>;
    get Orders() {
        return this.__Orders.get();
    }
    set Orders(newValue: OrderType[]) {
        this.__Orders.set(newValue);
    }
    private __loading: ObservedPropertySimplePU<boolean>; 
    get loading() {
        return this.__loading.get();
    }
    set loading(newValue: boolean) {
        this.__loading.set(newValue);
    }
    private __pageNum: ObservedPropertySimplePU<number>; 
    get pageNum() {
        return this.__pageNum.get();
    }
    set pageNum(newValue: number) {
        this.__pageNum.set(newValue);
    }
    private __pageSize: ObservedPropertySimplePU<number>;
    get pageSize() {
        return this.__pageSize.get();
    }
    set pageSize(newValue: number) {
        this.__pageSize.set(newValue);
    }
    private __haveNextPage: ObservedPropertySimplePU<boolean>; 
    get haveNextPage() {
        return this.__haveNextPage.get();
    }
    set haveNextPage(newValue: boolean) {
        this.__haveNextPage.set(newValue);
    }
    onPageShow(): void {
        this.resetPage();
        this.getChargeOrdersData(false);
    }
    resetPage() {
        this.pageNum = 1;
        this.haveNextPage = true;
        this.Orders = [];
    }
    async getChargeOrdersData(isLoadMore: boolean = false) {
        if (isLoadMore && !this.haveNextPage) {
            return;
        }
        this.loading = true;
        try {
            const currentPage: number = isLoadMore ? this.pageNum + 1 : 1;
            let data = await getChargeOrders(currentPage, this.pageSize);
            if (data && data.List) {
                this.pageNum = currentPage;
                this.haveNextPage = data.List.length >= this.pageSize;
                if (isLoadMore) {
                    this.Orders = [...this.Orders, ...data.List];
                }
                else {
                    this.Orders = data.List;
                }
            }
        }
        catch (error) {
            toast('加载订单失败');
            console.error('获取订单失败:', error);
        }
        finally {
            this.loading = false;
        }
    }
    async getStopChargeInfo(id: number) {
        let data = await getStopCharge(id);
        if (data != null && Number(data) === 0) {
            this.Orders = this.Orders.map(item => {
                if (item.id == id) {
                    return {
                        id: item.id,
                        pileCode: item.pileCode,
                        orderCode: item.orderCode,
                        price: item.price,
                        startAt: item.startAt,
                        state: 1,
                        stationName: item.stationName,
                        stopAt: item.stopAt
                    };
                }
                return item;
            });
            toast('停止充电成功');
        }
        else {
            toast('停止充电失败');
        }
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create({ space: 10 });
            Column.width(StyleConst.FULL_WIDTH);
            Column.height(StyleConst.FULL_HEIGHT);
            Column.backgroundColor({ "id": 50331715, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
        }, Column);
        {
            this.observeComponentCreation2((elmtId, isInitialRender) => {
                if (isInitialRender) {
                    let componentCall = new 
                    TbsTitleBar(this, { title: '充电订单', showBackIcon: true }, undefined, elmtId, () => { }, { page: "feature/charge/src/main/ets/page/ChargeOrderPage.ets", line: 88, col: 7 });
                    ViewPU.create(componentCall);
                    let paramsLambda = () => {
                        return {
                            title: '充电订单',
                            showBackIcon: true
                        };
                    };
                    componentCall.paramsGenerator_ = paramsLambda;
                }
                else {
                    this.updateStateVarsOfChildByElmtId(elmtId, {
                        title: '充电订单', showBackIcon: true
                    });
                }
            }, { name: "TbsTitleBar" });
        }
        this.OrderCard.bind(this)();
        Column.pop();
    }
    OrderCard(parent = null) {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            List.create({ space: 10 });
            List.width(StyleConst.FULL_WIDTH);
            List.padding({ left: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, right: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
            List.layoutWeight(1);
            List.onReachEnd(() => {
                if (this.haveNextPage && !this.loading) {
                    this.getChargeOrdersData(true);
                }
            });
        }, List);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            ForEach.create();
            const forEachItemGenFunction = _item => {
                const item = _item;
                {
                    const itemCreation = (elmtId, isInitialRender) => {
                        ViewStackProcessor.StartGetAccessRecordingFor(elmtId);
                        itemCreation2(elmtId, isInitialRender);
                        if (!isInitialRender) {
                            ListItem.pop();
                        }
                        ViewStackProcessor.StopGetAccessRecording();
                    };
                    const itemCreation2 = (elmtId, isInitialRender) => {
                        ListItem.create(deepRenderFunction, true);
                        ListItem.width(StyleConst.FULL_WIDTH);
                    };
                    const deepRenderFunction = (elmtId, isInitialRender) => {
                        itemCreation(elmtId, isInitialRender);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            RelativeContainer.create();
                            RelativeContainer.width(StyleConst.FULL_WIDTH);
                            RelativeContainer.height('auto');
                            RelativeContainer.padding({ left: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, bottom: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
                            RelativeContainer.borderRadius({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                            RelativeContainer.backgroundColor('#FFF');
                        }, RelativeContainer);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create(item.orderCode);
                            Text.fontColor(Color.White);
                            Text.height({ "id": 50331954, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                            Text.padding({ "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                            Text.borderRadius({ bottomRight: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" }, bottomLeft: { "id": 50331720, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" } });
                            Text.backgroundColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                            Text.id('code_text');
                            Text.alignRules({
                                right: { anchor: "__container__", align: HorizontalAlign.End },
                            });
                        }, Text);
                        Text.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Column.create({ space: 8 });
                            Column.alignItems(HorizontalAlign.Start);
                            Column.id('content');
                            Column.alignRules({
                                top: { anchor: "code_text", align: VerticalAlign.Bottom }
                            });
                        }, Column);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            If.create();
                            if (item.state === 0) {
                                this.ifElseBranchUpdateFunction(0, () => {
                                    this.observeComponentCreation2((elmtId, isInitialRender) => {
                                        Text.create({ "id": 50331654, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                                        Text.fontWeight(FontWeight.Bold);
                                        Text.fontColor(Color.Red);
                                    }, Text);
                                    Text.pop();
                                });
                            }
                            else {
                                this.ifElseBranchUpdateFunction(1, () => {
                                    this.observeComponentCreation2((elmtId, isInitialRender) => {
                                        Text.create({ "id": 50331657, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                                        Text.fontWeight(FontWeight.Bold);
                                        Text.fontColor({ "id": 50331706, "type": 10001, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                                    }, Text);
                                    Text.pop();
                                });
                            }
                        }, If);
                        If.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Row.create({ space: 10 });
                        }, Row);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create({ "id": 50331679, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        }, Text);
                        Text.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create(item.pileCode);
                        }, Text);
                        Text.pop();
                        Row.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Row.create({ space: 10 });
                        }, Row);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create({ "id": 50331653, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        }, Text);
                        Text.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create(item.stationName);
                        }, Text);
                        Text.pop();
                        Row.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Row.create({ space: 10 });
                        }, Row);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create({ "id": 50331687, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        }, Text);
                        Text.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create(`${item.price}`);
                        }, Text);
                        Text.pop();
                        Row.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Row.create({ space: 10 });
                        }, Row);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create({ "id": 50331675, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        }, Text);
                        Text.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create(item.state == 0 ? '充电中' : item.state == 1 ? '已完成' : '未付账');
                        }, Text);
                        Text.pop();
                        Row.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Row.create({ space: 10 });
                        }, Row);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create({ "id": 50331696, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        }, Text);
                        Text.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create(formatDate(item.startAt ?? ''));
                        }, Text);
                        Text.pop();
                        Row.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Row.create({ space: 10 });
                        }, Row);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create({ "id": 50331658, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                        }, Text);
                        Text.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create(item.stopAt && item.state !== 0 ? formatDate(item.stopAt) : '');
                        }, Text);
                        Text.pop();
                        Row.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            If.create();
                            if (item.state === 0) {
                                this.ifElseBranchUpdateFunction(0, () => {
                                    this.observeComponentCreation2((elmtId, isInitialRender) => {
                                        Button.createWithLabel({ "id": 50331698, "type": 10003, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                                        Button.width({ "id": 50332009, "type": 10002, params: [], "bundleName": "com.example.tbschargeharmonyos", "moduleName": "entry" });
                                        Button.backgroundColor(Color.Red);
                                        Button.onClick(() => {
                                            if (item.id) {
                                                this.getStopChargeInfo(item.id);
                                            }
                                        });
                                    }, Button);
                                    Button.pop();
                                });
                            }
                            else {
                                this.ifElseBranchUpdateFunction(1, () => {
                                    this.observeComponentCreation2((elmtId, isInitialRender) => {
                                        Text.create('');
                                    }, Text);
                                    Text.pop();
                                });
                            }
                        }, If);
                        If.pop();
                        Column.pop();
                        RelativeContainer.pop();
                        ListItem.pop();
                    };
                    this.observeComponentCreation2(itemCreation2, ListItem);
                    ListItem.pop();
                }
            };
            this.forEachUpdateFunction(elmtId, this.Orders, forEachItemGenFunction);
        }, ForEach);
        ForEach.pop();
        {
            const itemCreation = (elmtId, isInitialRender) => {
                ViewStackProcessor.StartGetAccessRecordingFor(elmtId);
                itemCreation2(elmtId, isInitialRender);
                if (!isInitialRender) {
                    ListItem.pop();
                }
                ViewStackProcessor.StopGetAccessRecording();
            };
            const itemCreation2 = (elmtId, isInitialRender) => {
                ListItem.create(deepRenderFunction, true);
            };
            const deepRenderFunction = (elmtId, isInitialRender) => {
                itemCreation(elmtId, isInitialRender);
                {
                    this.observeComponentCreation2((elmtId, isInitialRender) => {
                        if (isInitialRender) {
                            let componentCall = new BottomLoadingBuilder(this, {
                                haveNextPage: this.haveNextPage,
                                loading: this.loading,
                                dataLength: this.Orders.length
                            }, undefined, elmtId, () => { }, { page: "feature/charge/src/main/ets/page/ChargeOrderPage.ets", line: 176, col: 9 });
                            ViewPU.create(componentCall);
                            let paramsLambda = () => {
                                return {
                                    haveNextPage: this.haveNextPage,
                                    loading: this.loading,
                                    dataLength: this.Orders.length
                                };
                            };
                            componentCall.paramsGenerator_ = paramsLambda;
                        }
                        else {
                            this.updateStateVarsOfChildByElmtId(elmtId, {
                                haveNextPage: this.haveNextPage,
                                loading: this.loading,
                                dataLength: this.Orders.length
                            });
                        }
                    }, { name: "BottomLoadingBuilder" });
                }
                ListItem.pop();
            };
            this.observeComponentCreation2(itemCreation2, ListItem);
            ListItem.pop();
        }
        List.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
    static getEntryName(): string {
        return "ChargeOrderPage";
    }
}
{
    let routeNameNode = 'ChargeOrderPage';
    registerNamedRoute(() => new ChargeOrderPage(undefined, {}), routeNameNode, { bundleName: "com.example.tbschargeharmonyos", moduleName: "entry", pagePath: "../../../../feature/charge/src/main/ets/page/ChargeOrderPage", pageFullPath: "feature/charge/src/main/ets/page/ChargeOrderPage", integratedHsp: "false", moduleType: "followWithHap" });
}
export { ChargePage } from "@normalized:N&&&@tbs/charge/src/main/ets/page/ChargePage&1.0.0";
{
  "string": [
    {
      "name": "module_desc",
      "value": "module description"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "charge"
    },
    {
      "name": "scan",
      "value": "scan"
    },
    {
      "name": "mine",
      "value": "mine"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "Welcome to log in to the Groundhog charging platform"
    },
    {
      "name": "please_select_the_tenant",
      "value": "Please select the tenant"
    },
    {
      "name": "please_enter_the_username",
      "value": "Please enter the username"
    },
    {
      "name": "please_enter_the_password",
      "value": "Please enter your password"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "Please enter the verification code"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "Please enter the company name"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "Please enter the company website"
    },
    {
      "name": "login",
      "value": "Login"
    },
    {
      "name": "no_account",
      "value": "No account?"
    },
    {
      "name": "register",
      "value": "Register"
    },
    {
      "name": "login_in",
      "value": "login in"
    },
    {
      "name": "existing_account",
      "value": "existing account?"
    },
    {
      "name": "register_immediately",
      "value": "register immediately"
    },
    {
      "name": "company_website",
      "value": "The company 's website, such as www.example.com"
    },
    {
      "name": "company_name",
      "value": "company name"
    },
    {
      "name": "password_length",
      "value": "Password: At least 5 characters in length"
    },
    {
      "name": "get_code",
      "value": "get code"
    },
    {
      "name": "verification_code",
      "value": "Verification code :666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "Welcome to register on the Groundhog charging platform"
    },
    {
      "name": "search_content",
      "value": "Please enter the search content"
    },
    {
      "name": "search",
      "value": "search"
    },
    {
      "name": "no_data",
      "value": "no data"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "Selection of charging pile"
    },
    {
      "name": "fast_charge",
      "value": "fast charge"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "national standard"
    },
    {
      "name": "idle",
      "value": "Idle"
    },
    {
      "name": "faults",
      "value": "Faults"
    },
    {
      "name": "charging_in_progress",
      "value": "Charging in progress"
    },
    {
      "name": "pile_number",
      "value": "Pile_number:"
    },
    {
      "name": "station_name",
      "value": "Station name:"
    },
    {
      "name": "agreement",
      "value": "agreement"
    },
    {
      "name": "certification",
      "value": "certification"
    },
    {
      "name": "feat",
      "value": "feat"
    },
    {
      "name": "message",
      "value": "message"
    },
    {
      "name": "person",
      "value": "person"
    },
    {
      "name": "rule",
      "value": "rule"
    },
    {
      "name": "order",
      "value": "order"
    },
    {
      "name": "service",
      "value": "service"
    },
    {
      "name": "there_is_no_more_data",
      "value": "There is no more data"
    },
    {
      "name": "loading",
      "value": "loading..."
    },
    {
      "name": "completed",
      "value": "Completed"
    },
    {
      "name": "pile_code",
      "value": "Pile code:"
    },
    {
      "name": "charge_name",
      "value": "Charge name:"
    },
    {
      "name": "price",
      "value": "Price:"
    },
    {
      "name": "order_status",
      "value": "Order status:"
    },
    {
      "name": "start_time",
      "value": "Start time:"
    },
    {
      "name": "end_time",
      "value": "End time:"
    },
    {
      "name": "stop_charge",
      "value": "Stop charging"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
import localUnitTest from './LocalUnit.test';
export default function testsuite() {
  localUnitTest();
}
{
  "color": [
    {
      "name": "color_0aa671",
      "value": "#0aa671"
    },
    {
      "name": "start_window_background",
      "value": "#FFFFFF"
    },
    {
      "name": "color_0165b8",
      "value": "#0165b8"
    },
    {
      "name": "color_182431",
      "value": "#182431"
    },
    {
      "name": "color_efefef",
      "value": "#EFEFEF"
    },
    {
      "name": "color_f5f5f5",
      "value": "#F5F5F5"
    },
    {
      "name": "color_adadb3",
      "value": "#adadb3"
    },
    {
      "name": "color_fff",
      "value": "#fff"
    },
    {
      "name": "color_898e92",
      "value": "#898e92"
    },
    {
      "name": "color_0165B8",
      "value": "#0165B8"
    },
    {
      "name": "color_f0f2f4",
      "value": "#f0f2f4"
    },
    {
      "name": "color_80000000",
      "value": "#80000000"
    },
    {
      "name": "color_009688",
      "value": "#009688"
    },
    {
      "name": "color_d68751",
      "value": "#d68751"
    },
    {
      "name": "color_F44336",
      "value": "#F44336"
    },
    {
      "name": "color_666",
      "value": "#666"
    },
    {
      "name": "color_999",
      "value": "#999"
    }
  ]
}
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
export default function localUnitTest() {
  describe('localUnitTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });
    it('assertContain', 0, () => {
      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.
      let a = 'abc';
      let b = 'b';
      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.
      expect(a).assertContain(b);
      expect(a).assertEqual(a);
    });
  });
}
{"app":{"bundleName":"com.example.tbschargeharmonyos","vendor":"example","versionCode":1000000,"versionName":"1.0.0","icon":"$media:layered_image","label":"$string:app_name","apiReleaseType":"Release","compileSdkVersion":"5.0.4.150","targetAPIVersion":50004016,"minAPIVersion":50004016,"compileSdkType":"HarmonyOS","appEnvironments":[],"bundleType":"app","buildMode":"debug","debug":true},"module":{"name":"entry","type":"entry","description":"$string:module_desc","mainElement":"EntryAbility","deviceTypes":["phone","tablet","2in1"],"deliveryWithInstall":true,"installationFree":false,"pages":"$profile:main_pages","querySchemes":["amapuri","baidumap","maps"],"requestPermissions":[{"name":"ohos.permission.INTERNET"},{"name":"ohos.permission.APPROXIMATELY_LOCATION","reason":"$string:permission_approximately_location","usedScene":{"abilities":["EntryAbility"],"when":"always"}},{"name":"ohos.permission.LOCATION","reason":"$string:location_permission_reason","usedScene":{"abilities":["EntryAbility"],"when":"always"}}],"abilities":[{"name":"EntryAbility","srcEntry":"./ets/entryability/EntryAbility.ets","description":"$string:EntryAbility_desc","icon":"$media:layered_image","label":"$string:EntryAbility_label","startWindowIcon":"$media:startIcon","startWindowBackground":"$color:start_window_background","exported":true,"skills":[{"entities":["entity.system.home"],"actions":["action.system.home"]}]}],"extensionAbilities":[{"name":"EntryBackupAbility","srcEntry":"./ets/entrybackupability/EntryBackupAbility.ets","type":"backup","exported":false,"metadata":[{"name":"ohos.extension.backup","resource":"$profile:backup_config"}]}],"packageName":"entry","virtualMachine":"ark12.0.6.0","compileMode":"esmodule","dependencies":[]}}
import { ClassFilter, NotClassFilter, SuiteAndItNameFilter, TestTypesFilter, NestFilter } from './Filter';
import { TAG, TESTTYPE, LEVEL, SIZE, KEYSET } from '../../Constant';
const STRESS_RULE = /^[1-9]\d*$/;
class ConfigService {
    constructor(attr) {
        this.id = attr.id;
        this.supportAsync = true; 
        this.random = false;
        this.filterValid = [];
        this.filter = 0;
        this.flag = false;
        this.suite = null;
        this.itName = null;
        this.testType = null;
        this.level = null;
        this.size = null;
        this.class = null;
        this.notClass = null;
        this.timeout = null;
        this.breakOnError = false;
        this.stress = null;
        this.skipMessage = false;
        this.runSkipped = '';
        this.filterXdescribe = [];
    }
    init(coreContext) {
        this.coreContext = coreContext;
    }
    isNormalInteger(str) {
        const n = Math.floor(Number(str));
        return n !== Infinity && String(n) === String(str) && n >= 0;
    }
    getStress() {
        if (this.stress === undefined || this.stress === '' || this.stress === null) {
            return 1;
        }
        return !this.stress.match(STRESS_RULE) ? 1 : Number.parseInt(this.stress);
    }
    basicParamValidCheck(params) {
        let size = params.size;
        if (size !== undefined && size !== '' && size !== null) {
            let sizeArray = ['small', 'medium', 'large'];
            if (sizeArray.indexOf(size) === -1) {
                this.filterValid.push('size:' + size);
            }
        }
        let level = params.level;
        if (level !== undefined && level !== '' && level !== null) {
            let levelArray = ['0', '1', '2', '3', '4'];
            if (levelArray.indexOf(level) === -1) {
                this.filterValid.push('level:' + level);
            }
        }
        let testType = params.testType;
        if (testType !== undefined && testType !== '' && testType !== null) {
            let testTypeArray = ['function', 'performance', 'power', 'reliability', 'security',
                'global', 'compatibility', 'user', 'standard', 'safety', 'resilience'];
            if (testTypeArray.indexOf(testType) === -1) {
                this.filterValid.push('testType:' + testType);
            }
        }
    }
    filterParamValidCheck(params) {
        let timeout = params.timeout;
        if (timeout !== undefined && timeout !== '' && timeout !== null) {
            if (!this.isNormalInteger(timeout)) {
                this.filterValid.push('timeout:' + timeout);
            }
        }
        let paramKeys = ['dryRun', 'random', 'breakOnError', 'coverage', 'skipMessage'];
        for (const key of paramKeys) {
            if (params[key] !== undefined && params[key] !== 'true' && params[key] !== 'false') {
                this.filterValid.push(`${key}:${params[key]}`);
            }
        }
        if (params.stress !== undefined && params.stress !== '' && params.stress !== null) {
            if (!params.stress.match(STRESS_RULE)) {
                this.filterValid.push('stress:' + params.stress);
            }
        }
        let nameRule = /^[A-Za-z]{1}[\w#,.]*$/;
        let paramClassKeys = ['class', 'notClass'];
        for (const key of paramClassKeys) {
            if (params[key] !== undefined && params[key] !== '' && params[key] !== null) {
                let classArray = params[key].split(',');
                classArray.forEach(item => !item.match(nameRule) ? this.filterValid.push(`${key}:${params[key]}`) : null);
            }
        }
    }
    setConfig(params) {
        this.basicParamValidCheck(params);
        this.filterParamValidCheck(params);
        try {
            this.class = params.class;
            this.notClass = params.notClass;
            this.flag = params.flag || { flag: false };
            this.suite = params.suite;
            this.itName = params.itName;
            this.filter = params.filter;
            this.testType = params.testType;
            this.level = params.level;
            this.size = params.size;
            this.timeout = params.timeout;
            this.dryRun = params.dryRun;
            this.breakOnError = params.breakOnError;
            this.random = params.random === 'true' ? true : false;
            this.stress = params.stress;
            this.coverage = params.coverage;
            this.skipMessage = params.skipMessage;
            this.runSkipped = params.runSkipped;
            this.filterParam = {
                testType: TESTTYPE,
                level: LEVEL,
                size: SIZE
            };
            this.parseParams();
        } catch (err) {
            console.info(`${TAG}setConfig error: ${err.message}`);
        }
    }
    parseParams() {
        if (this.filter != null) {
            return;
        }
        let testTypeFilter = 0;
        let sizeFilter = 0;
        let levelFilter = 0;
        if (this.testType != null) {
            testTypeFilter = this.testType.split(',')
                .map(item => this.filterParam.testType[item] || 0)
                .reduce((pre, cur) => pre | cur, 0);
        }
        if (this.level != null) {
            levelFilter = this.level.split(',')
                .map(item => this.filterParam.level[item] || 0)
                .reduce((pre, cur) => pre | cur, 0);
        }
        if (this.size != null) {
            sizeFilter = this.size.split(',')
                .map(item => this.filterParam.size[item] || 0)
                .reduce((pre, cur) => pre | cur, 0);
        }
        this.filter = testTypeFilter | sizeFilter | levelFilter;
        console.info(`${TAG}filter params:${this.filter}`);
    }
    isCurrentSuite(description) {
        if (this.suite !== undefined && this.suite !== '' && this.suite !== null) {
            let suiteArray = this.suite.split(',');
            return suiteArray.indexOf(description) !== -1;
        }
        return false;
    }
    filterSuite(currentSuiteName) {
        let filterArray = [];
        if (this.suite !== undefined && this.suite !== '' && this.suite !== null) {
            filterArray.push(new SuiteAndItNameFilter(currentSuiteName, '', this.suite));
        }
        if (this.class !== undefined && this.class !== '' && this.class !== null) {
            filterArray.push(new ClassFilter(currentSuiteName, '', this.class));
        }
        if (this.notClass !== undefined && this.notClass !== '' && this.notClass !== null) {
            filterArray.push(new NotClassFilter(currentSuiteName, '', this.notClass));
        }
        let result = filterArray.map(item => item.filterSuite()).reduce((pre, cur) => pre || cur, false);
        return result;
    }
    filterDesc(currentSuiteName, desc, fi, coreContext) {
        let filterArray = [];
        if (this.itName !== undefined && this.itName !== '' && this.itName !== null) {
            filterArray.push(new SuiteAndItNameFilter(currentSuiteName, desc, this.itName));
        }
        if (this.class !== undefined && this.class !== '' && this.class !== null) {
            filterArray.push(new ClassFilter(currentSuiteName, desc, this.class));
        }
        if (this.notClass !== undefined && this.notClass !== '' && this.notClass !== null) {
            filterArray.push(new NotClassFilter(currentSuiteName, desc, this.notClass));
        }
        if (typeof (this.filter) !== 'undefined' && this.filter !== 0 && fi !== 0) {
            filterArray.push(new TestTypesFilter('', '', fi, this.filter));
        }
        let result = filterArray.map(item => item.filterIt()).reduce((pre, cur) => pre || cur, false);
        return result;
    }
    filterWithNest(desc, filter) {
        let filterArray = [];
        const nestFilter = new NestFilter();
        const targetSuiteArray = this.coreContext.getDefaultService('suite').targetSuiteArray;
        const targetSpecArray = this.coreContext.getDefaultService('suite').targetSpecArray;
        const suiteStack = this.coreContext.getDefaultService('suite').suitesStack;
        let isFilter = nestFilter.filterNestName(targetSuiteArray, targetSpecArray, suiteStack, desc);
        const isFullRun = this.coreContext.getDefaultService('suite').fullRun;
        if (typeof (this.filter) !== 'undefined' && this.filter !== 0 && filter !== 0) {
            filterArray.push(new TestTypesFilter('', '', filter, this.filter));
            return filterArray.map(item => item.filterIt()).reduce((pre, cur) => pre || cur, false);
        }
        if (isFilter && !isFullRun) {
            return true;
        }
        return nestFilter.filterNotClass(this.notClass, suiteStack, desc);
    }
    isRandom() {
        return this.random || false;
    }
    isBreakOnError() {
        return this.breakOnError !== 'true' ? false : true;
    }
    setSupportAsync(value) {
        this.supportAsync = value;
    }
    isSupportAsync() {
        return this.supportAsync;
    }
    translateParams(parameters) {
        const keySet = new Set(KEYSET);
        let targetParams = {};
        for (const key in parameters) {
            if (keySet.has(key)) {
                var newKey = key.replace('-s ', '');
                targetParams[newKey] = parameters[key];
            }
        }
        return targetParams;
    }
    translateParamsToString(parameters) {
        const keySet = new Set(KEYSET);
        let targetParams = '';
        for (const key in parameters) {
            if (keySet.has(key)) {
                targetParams += ' ' + key + ' ' + parameters[key];
            }
        }
        return targetParams.trim();
    }
    execute() {
    }
    checkIfSuiteInSkipRun(desc) {
        return this.runSkipped.split(',').some(item => {
            return item === desc || item.startsWith(desc + '.') || item.startsWith(desc + '#') || desc.startsWith(item + '.') || this.runSkipped === 'skipped';
        });
    }
    checkIfSpecInSkipRun(desc) {
        return this.runSkipped.split(',').some(item => {
            if (item.includes('#')) {
                return item === desc;
            } else {
                return desc.startsWith(item + '.') || desc.startsWith(item + '#') || this.runSkipped === 'skipped';
            }
        }
        );
    }
}
export {
    ConfigService
};
{
  "float": [
    {
      "name": "size_1",
      "value": "1vp"
    },
    {
      "name": "size_2",
      "value": "2vp"
    },
    {
      "name": "size_3",
      "value": "3vp"
    },
    {
      "name": "size_4",
      "value": "4vp"
    },
    {
      "name": "size_5",
      "value": "5vp"
    },
    {
      "name": "size_6",
      "value": "6vp"
    },
    {
      "name": "size_7",
      "value": "7vp"
    },
    {
      "name": "size_8",
      "value": "8vp"
    },
    {
      "name": "size_9",
      "value": "9vp"
    },
    {
      "name": "size_10",
      "value": "10vp"
    },
    {
      "name": "size_11",
      "value": "11vp"
    },
    {
      "name": "size_12",
      "value": "12vp"
    },
    {
      "name": "size_13",
      "value": "13vp"
    },
    {
      "name": "size_14",
      "value": "14vp"
    },
    {
      "name": "size_15",
      "value": "15vp"
    },
    {
      "name": "size_16",
      "value": "16vp"
    },
    {
      "name": "size_17",
      "value": "17vp"
    },
    {
      "name": "size_18",
      "value": "18vp"
    },
    {
      "name": "size_19",
      "value": "19vp"
    },
    {
      "name": "size_20",
      "value": "20vp"
    },
    {
      "name": "size_21",
      "value": "21vp"
    },
    {
      "name": "size_22",
      "value": "22vp"
    },
    {
      "name": "size_23",
      "value": "23vp"
    },
    {
      "name": "size_24",
      "value": "24vp"
    },
    {
      "name": "size_25",
      "value": "25vp"
    },
    {
      "name": "size_26",
      "value": "26vp"
    },
    {
      "name": "size_27",
      "value": "27vp"
    },
    {
      "name": "size_28",
      "value": "28vp"
    },
    {
      "name": "size_29",
      "value": "29vp"
    },
    {
      "name": "size_30",
      "value": "30vp"
    },
    {
      "name": "size_31",
      "value": "31vp"
    },
    {
      "name": "size_32",
      "value": "32vp"
    },
    {
      "name": "size_33",
      "value": "33vp"
    },
    {
      "name": "size_34",
      "value": "34vp"
    },
    {
      "name": "size_35",
      "value": "35vp"
    },
    {
      "name": "size_36",
      "value": "36vp"
    },
    {
      "name": "size_37",
      "value": "37vp"
    },
    {
      "name": "size_38",
      "value": "38vp"
    },
    {
      "name": "size_39",
      "value": "39vp"
    },
    {
      "name": "size_40",
      "value": "40vp"
    },
    {
      "name": "size_41",
      "value": "41vp"
    },
    {
      "name": "size_42",
      "value": "42vp"
    },
    {
      "name": "size_43",
      "value": "43vp"
    },
    {
      "name": "size_44",
      "value": "44vp"
    },
    {
      "name": "size_45",
      "value": "45vp"
    },
    {
      "name": "size_46",
      "value": "46vp"
    },
    {
      "name": "size_47",
      "value": "47vp"
    },
    {
      "name": "size_48",
      "value": "48vp"
    },
    {
      "name": "size_49",
      "value": "49vp"
    },
    {
      "name": "size_50",
      "value": "50vp"
    },
    {
      "name": "size_51",
      "value": "51vp"
    },
    {
      "name": "size_52",
      "value": "52vp"
    },
    {
      "name": "size_53",
      "value": "53vp"
    },
    {
      "name": "size_54",
      "value": "54vp"
    },
    {
      "name": "size_55",
      "value": "55vp"
    },
    {
      "name": "size_56",
      "value": "56vp"
    },
    {
      "name": "size_57",
      "value": "57vp"
    },
    {
      "name": "size_58",
      "value": "58vp"
    },
    {
      "name": "size_59",
      "value": "59vp"
    },
    {
      "name": "size_60",
      "value": "60vp"
    },
    {
      "name": "size_61",
      "value": "61vp"
    },
    {
      "name": "size_62",
      "value": "62vp"
    },
    {
      "name": "size_63",
      "value": "63vp"
    },
    {
      "name": "size_64",
      "value": "64vp"
    },
    {
      "name": "size_65",
      "value": "65vp"
    },
    {
      "name": "size_66",
      "value": "66vp"
    },
    {
      "name": "size_67",
      "value": "67vp"
    },
    {
      "name": "size_68",
      "value": "68vp"
    },
    {
      "name": "size_69",
      "value": "69vp"
    },
    {
      "name": "size_70",
      "value": "70vp"
    },
    {
      "name": "size_71",
      "value": "71vp"
    },
    {
      "name": "size_72",
      "value": "72vp"
    },
    {
      "name": "size_73",
      "value": "73vp"
    },
    {
      "name": "size_74",
      "value": "74vp"
    },
    {
      "name": "size_75",
      "value": "75vp"
    },
    {
      "name": "size_76",
      "value": "76vp"
    },
    {
      "name": "size_77",
      "value": "77vp"
    },
    {
      "name": "size_78",
      "value": "78vp"
    },
    {
      "name": "size_79",
      "value": "79vp"
    },
    {
      "name": "size_80",
      "value": "80vp"
    },
    {
      "name": "size_81",
      "value": "81vp"
    },
    {
      "name": "size_82",
      "value": "82vp"
    },
    {
      "name": "size_83",
      "value": "83vp"
    },
    {
      "name": "size_84",
      "value": "84vp"
    },
    {
      "name": "size_85",
      "value": "85vp"
    },
    {
      "name": "size_86",
      "value": "86vp"
    },
    {
      "name": "size_87",
      "value": "87vp"
    },
    {
      "name": "size_88",
      "value": "88vp"
    },
    {
      "name": "size_89",
      "value": "89vp"
    },
    {
      "name": "size_90",
      "value": "90vp"
    },
    {
      "name": "size_91",
      "value": "91vp"
    },
    {
      "name": "size_92",
      "value": "92vp"
    },
    {
      "name": "size_93",
      "value": "93vp"
    },
    {
      "name": "size_94",
      "value": "94vp"
    },
    {
      "name": "size_95",
      "value": "95vp"
    },
    {
      "name": "size_96",
      "value": "96vp"
    },
    {
      "name": "size_97",
      "value": "97vp"
    },
    {
      "name": "size_98",
      "value": "98vp"
    },
    {
      "name": "size_99",
      "value": "99vp"
    },
    {
      "name": "size_100",
      "value": "100vp"
    },
    {
      "name": "size_101",
      "value": "101vp"
    },
    {
      "name": "size_102",
      "value": "102vp"
    },
    {
      "name": "size_103",
      "value": "103vp"
    },
    {
      "name": "size_104",
      "value": "104vp"
    },
    {
      "name": "size_105",
      "value": "105vp"
    },
    {
      "name": "size_106",
      "value": "106vp"
    },
    {
      "name": "size_107",
      "value": "107vp"
    },
    {
      "name": "size_108",
      "value": "108vp"
    },
    {
      "name": "size_109",
      "value": "109vp"
    },
    {
      "name": "size_110",
      "value": "110vp"
    },
    {
      "name": "size_111",
      "value": "111vp"
    },
    {
      "name": "size_112",
      "value": "112vp"
    },
    {
      "name": "size_113",
      "value": "113vp"
    },
    {
      "name": "size_114",
      "value": "114vp"
    },
    {
      "name": "size_115",
      "value": "115vp"
    },
    {
      "name": "size_116",
      "value": "116vp"
    },
    {
      "name": "size_117",
      "value": "117vp"
    },
    {
      "name": "size_118",
      "value": "118vp"
    },
    {
      "name": "size_119",
      "value": "119vp"
    },
    {
      "name": "size_120",
      "value": "120vp"
    },
    {
      "name": "size_121",
      "value": "121vp"
    },
    {
      "name": "size_122",
      "value": "122vp"
    },
    {
      "name": "size_123",
      "value": "123vp"
    },
    {
      "name": "size_124",
      "value": "124vp"
    },
    {
      "name": "size_125",
      "value": "125vp"
    },
    {
      "name": "size_126",
      "value": "126vp"
    },
    {
      "name": "size_127",
      "value": "127vp"
    },
    {
      "name": "size_128",
      "value": "128vp"
    },
    {
      "name": "size_129",
      "value": "129vp"
    },
    {
      "name": "size_130",
      "value": "130vp"
    },
    {
      "name": "size_131",
      "value": "131vp"
    },
    {
      "name": "size_132",
      "value": "132vp"
    },
    {
      "name": "size_133",
      "value": "133vp"
    },
    {
      "name": "size_134",
      "value": "134vp"
    },
    {
      "name": "size_135",
      "value": "135vp"
    },
    {
      "name": "size_136",
      "value": "136vp"
    },
    {
      "name": "size_137",
      "value": "137vp"
    },
    {
      "name": "size_138",
      "value": "138vp"
    },
    {
      "name": "size_139",
      "value": "139vp"
    },
    {
      "name": "size_140",
      "value": "140vp"
    },
    {
      "name": "size_141",
      "value": "141vp"
    },
    {
      "name": "size_142",
      "value": "142vp"
    },
    {
      "name": "size_143",
      "value": "143vp"
    },
    {
      "name": "size_144",
      "value": "144vp"
    },
    {
      "name": "size_145",
      "value": "145vp"
    },
    {
      "name": "size_146",
      "value": "146vp"
    },
    {
      "name": "size_147",
      "value": "147vp"
    },
    {
      "name": "size_148",
      "value": "148vp"
    },
    {
      "name": "size_149",
      "value": "149vp"
    },
    {
      "name": "size_150",
      "value": "150vp"
    },
    {
      "name": "size_151",
      "value": "151vp"
    },
    {
      "name": "size_152",
      "value": "152vp"
    },
    {
      "name": "size_153",
      "value": "153vp"
    },
    {
      "name": "size_154",
      "value": "154vp"
    },
    {
      "name": "size_155",
      "value": "155vp"
    },
    {
      "name": "size_156",
      "value": "156vp"
    },
    {
      "name": "size_157",
      "value": "157vp"
    },
    {
      "name": "size_158",
      "value": "158vp"
    },
    {
      "name": "size_159",
      "value": "159vp"
    },
    {
      "name": "size_160",
      "value": "160vp"
    },
    {
      "name": "size_161",
      "value": "161vp"
    },
    {
      "name": "size_162",
      "value": "162vp"
    },
    {
      "name": "size_163",
      "value": "163vp"
    },
    {
      "name": "size_164",
      "value": "164vp"
    },
    {
      "name": "size_165",
      "value": "165vp"
    },
    {
      "name": "size_166",
      "value": "166vp"
    },
    {
      "name": "size_167",
      "value": "167vp"
    },
    {
      "name": "size_168",
      "value": "168vp"
    },
    {
      "name": "size_169",
      "value": "169vp"
    },
    {
      "name": "size_170",
      "value": "170vp"
    },
    {
      "name": "size_171",
      "value": "171vp"
    },
    {
      "name": "size_172",
      "value": "172vp"
    },
    {
      "name": "size_173",
      "value": "173vp"
    },
    {
      "name": "size_174",
      "value": "174vp"
    },
    {
      "name": "size_175",
      "value": "175vp"
    },
    {
      "name": "size_176",
      "value": "176vp"
    },
    {
      "name": "size_177",
      "value": "177vp"
    },
    {
      "name": "size_178",
      "value": "178vp"
    },
    {
      "name": "size_179",
      "value": "179vp"
    },
    {
      "name": "size_180",
      "value": "180vp"
    },
    {
      "name": "size_181",
      "value": "181vp"
    },
    {
      "name": "size_182",
      "value": "182vp"
    },
    {
      "name": "size_183",
      "value": "183vp"
    },
    {
      "name": "size_184",
      "value": "184vp"
    },
    {
      "name": "size_185",
      "value": "185vp"
    },
    {
      "name": "size_186",
      "value": "186vp"
    },
    {
      "name": "size_187",
      "value": "187vp"
    },
    {
      "name": "size_188",
      "value": "188vp"
    },
    {
      "name": "size_189",
      "value": "189vp"
    },
    {
      "name": "size_190",
      "value": "190vp"
    },
    {
      "name": "size_191",
      "value": "191vp"
    },
    {
      "name": "size_192",
      "value": "192vp"
    },
    {
      "name": "size_193",
      "value": "193vp"
    },
    {
      "name": "size_194",
      "value": "194vp"
    },
    {
      "name": "size_195",
      "value": "195vp"
    },
    {
      "name": "size_196",
      "value": "196vp"
    },
    {
      "name": "size_197",
      "value": "197vp"
    },
    {
      "name": "size_198",
      "value": "198vp"
    },
    {
      "name": "size_199",
      "value": "199vp"
    },
    {
      "name": "size_200",
      "value": "200vp"
    },
    {
      "name": "size_201",
      "value": "201vp"
    },
    {
      "name": "size_202",
      "value": "202vp"
    },
    {
      "name": "size_203",
      "value": "203vp"
    },
    {
      "name": "size_204",
      "value": "204vp"
    },
    {
      "name": "size_205",
      "value": "205vp"
    },
    {
      "name": "size_206",
      "value": "206vp"
    },
    {
      "name": "size_207",
      "value": "207vp"
    },
    {
      "name": "size_208",
      "value": "208vp"
    },
    {
      "name": "size_209",
      "value": "209vp"
    },
    {
      "name": "size_210",
      "value": "210vp"
    },
    {
      "name": "size_211",
      "value": "211vp"
    },
    {
      "name": "size_212",
      "value": "212vp"
    },
    {
      "name": "size_213",
      "value": "213vp"
    },
    {
      "name": "size_214",
      "value": "214vp"
    },
    {
      "name": "size_215",
      "value": "215vp"
    },
    {
      "name": "size_216",
      "value": "216vp"
    },
    {
      "name": "size_217",
      "value": "217vp"
    },
    {
      "name": "size_218",
      "value": "218vp"
    },
    {
      "name": "size_219",
      "value": "219vp"
    },
    {
      "name": "size_220",
      "value": "220vp"
    },
    {
      "name": "size_221",
      "value": "221vp"
    },
    {
      "name": "size_222",
      "value": "222vp"
    },
    {
      "name": "size_223",
      "value": "223vp"
    },
    {
      "name": "size_224",
      "value": "224vp"
    },
    {
      "name": "size_225",
      "value": "225vp"
    },
    {
      "name": "size_226",
      "value": "226vp"
    },
    {
      "name": "size_227",
      "value": "227vp"
    },
    {
      "name": "size_228",
      "value": "228vp"
    },
    {
      "name": "size_229",
      "value": "229vp"
    },
    {
      "name": "size_230",
      "value": "230vp"
    },
    {
      "name": "size_231",
      "value": "231vp"
    },
    {
      "name": "size_232",
      "value": "232vp"
    },
    {
      "name": "size_233",
      "value": "233vp"
    },
    {
      "name": "size_234",
      "value": "234vp"
    },
    {
      "name": "size_235",
      "value": "235vp"
    },
    {
      "name": "size_236",
      "value": "236vp"
    },
    {
      "name": "size_237",
      "value": "237vp"
    },
    {
      "name": "size_238",
      "value": "238vp"
    },
    {
      "name": "size_239",
      "value": "239vp"
    },
    {
      "name": "size_240",
      "value": "240vp"
    },
    {
      "name": "size_241",
      "value": "241vp"
    },
    {
      "name": "size_242",
      "value": "242vp"
    },
    {
      "name": "size_243",
      "value": "243vp"
    },
    {
      "name": "size_244",
      "value": "244vp"
    },
    {
      "name": "size_245",
      "value": "245vp"
    },
    {
      "name": "size_246",
      "value": "246vp"
    },
    {
      "name": "size_247",
      "value": "247vp"
    },
    {
      "name": "size_248",
      "value": "248vp"
    },
    {
      "name": "size_249",
      "value": "249vp"
    },
    {
      "name": "size_250",
      "value": "250vp"
    },
    {
      "name": "size_251",
      "value": "251vp"
    },
    {
      "name": "size_252",
      "value": "252vp"
    },
    {
      "name": "size_253",
      "value": "253vp"
    },
    {
      "name": "size_254",
      "value": "254vp"
    },
    {
      "name": "size_255",
      "value": "255vp"
    },
    {
      "name": "size_256",
      "value": "256vp"
    },
    {
      "name": "size_257",
      "value": "257vp"
    },
    {
      "name": "size_258",
      "value": "258vp"
    },
    {
      "name": "size_259",
      "value": "259vp"
    },
    {
      "name": "size_260",
      "value": "260vp"
    },
    {
      "name": "size_261",
      "value": "261vp"
    },
    {
      "name": "size_262",
      "value": "262vp"
    },
    {
      "name": "size_263",
      "value": "263vp"
    },
    {
      "name": "size_264",
      "value": "264vp"
    },
    {
      "name": "size_265",
      "value": "265vp"
    },
    {
      "name": "size_266",
      "value": "266vp"
    },
    {
      "name": "size_267",
      "value": "267vp"
    },
    {
      "name": "size_268",
      "value": "268vp"
    },
    {
      "name": "size_269",
      "value": "269vp"
    },
    {
      "name": "size_270",
      "value": "270vp"
    },
    {
      "name": "size_271",
      "value": "271vp"
    },
    {
      "name": "size_272",
      "value": "272vp"
    },
    {
      "name": "size_273",
      "value": "273vp"
    },
    {
      "name": "size_274",
      "value": "274vp"
    },
    {
      "name": "size_275",
      "value": "275vp"
    },
    {
      "name": "size_276",
      "value": "276vp"
    },
    {
      "name": "size_277",
      "value": "277vp"
    },
    {
      "name": "size_278",
      "value": "278vp"
    },
    {
      "name": "size_279",
      "value": "279vp"
    },
    {
      "name": "size_280",
      "value": "280vp"
    },
    {
      "name": "size_281",
      "value": "281vp"
    },
    {
      "name": "size_282",
      "value": "282vp"
    },
    {
      "name": "size_283",
      "value": "283vp"
    },
    {
      "name": "size_284",
      "value": "284vp"
    },
    {
      "name": "size_285",
      "value": "285vp"
    },
    {
      "name": "size_286",
      "value": "286vp"
    },
    {
      "name": "size_287",
      "value": "287vp"
    },
    {
      "name": "size_288",
      "value": "288vp"
    },
    {
      "name": "size_289",
      "value": "289vp"
    },
    {
      "name": "size_290",
      "value": "290vp"
    },
    {
      "name": "size_291",
      "value": "291vp"
    },
    {
      "name": "size_292",
      "value": "292vp"
    },
    {
      "name": "size_293",
      "value": "293vp"
    },
    {
      "name": "size_294",
      "value": "294vp"
    },
    {
      "name": "size_295",
      "value": "295vp"
    },
    {
      "name": "size_296",
      "value": "296vp"
    },
    {
      "name": "size_297",
      "value": "297vp"
    },
    {
      "name": "size_298",
      "value": "298vp"
    },
    {
      "name": "size_299",
      "value": "299vp"
    },
    {
      "name": "size_300",
      "value": "300vp"
    },
    {
      "name": "size_text_1",
      "value": "1fp"
    },
    {
      "name": "size_text_2",
      "value": "2fp"
    },
    {
      "name": "size_text_3",
      "value": "3fp"
    },
    {
      "name": "size_text_4",
      "value": "4fp"
    },
    {
      "name": "size_text_5",
      "value": "5fp"
    },
    {
      "name": "size_text_6",
      "value": "6fp"
    },
    {
      "name": "size_text_7",
      "value": "7fp"
    },
    {
      "name": "size_text_8",
      "value": "8fp"
    },
    {
      "name": "size_text_9",
      "value": "9fp"
    },
    {
      "name": "size_text_10",
      "value": "10fp"
    },
    {
      "name": "size_text_11",
      "value": "11fp"
    },
    {
      "name": "size_text_12",
      "value": "12fp"
    },
    {
      "name": "size_text_13",
      "value": "13fp"
    },
    {
      "name": "size_text_14",
      "value": "14fp"
    },
    {
      "name": "size_text_15",
      "value": "15fp"
    },
    {
      "name": "size_text_16",
      "value": "16fp"
    },
    {
      "name": "size_text_17",
      "value": "17fp"
    },
    {
      "name": "size_text_18",
      "value": "18fp"
    },
    {
      "name": "size_text_19",
      "value": "19fp"
    },
    {
      "name": "size_text_20",
      "value": "20fp"
    },
    {
      "name": "size_text_21",
      "value": "21fp"
    },
    {
      "name": "size_text_22",
      "value": "22fp"
    },
    {
      "name": "size_text_23",
      "value": "23fp"
    },
    {
      "name": "size_text_24",
      "value": "24fp"
    },
    {
      "name": "size_text_25",
      "value": "25fp"
    },
    {
      "name": "size_text_26",
      "value": "26fp"
    },
    {
      "name": "size_text_27",
      "value": "27fp"
    },
    {
      "name": "size_text_28",
      "value": "28fp"
    },
    {
      "name": "size_text_29",
      "value": "29fp"
    },
    {
      "name": "size_text_30",
      "value": "30fp"
    },
    {
      "name": "size_text_31",
      "value": "31fp"
    },
    {
      "name": "size_text_32",
      "value": "32fp"
    },
    {
      "name": "size_text_33",
      "value": "33fp"
    },
    {
      "name": "size_text_34",
      "value": "34fp"
    },
    {
      "name": "size_text_35",
      "value": "35fp"
    },
    {
      "name": "size_text_36",
      "value": "36fp"
    },
    {
      "name": "size_text_37",
      "value": "37fp"
    },
    {
      "name": "size_text_38",
      "value": "38fp"
    },
    {
      "name": "size_text_39",
      "value": "39fp"
    },
    {
      "name": "size_text_40",
      "value": "40fp"
    },
    {
      "name": "size_text_41",
      "value": "41fp"
    },
    {
      "name": "size_text_42",
      "value": "42fp"
    },
    {
      "name": "size_text_43",
      "value": "43fp"
    },
    {
      "name": "size_text_44",
      "value": "44fp"
    },
    {
      "name": "size_text_45",
      "value": "45fp"
    },
    {
      "name": "size_text_46",
      "value": "46fp"
    },
    {
      "name": "size_text_47",
      "value": "47fp"
    },
    {
      "name": "size_text_48",
      "value": "48fp"
    },
    {
      "name": "size_text_49",
      "value": "49fp"
    },
    {
      "name": "size_text_50",
      "value": "50fp"
    },
    {
      "name": "size_text_51",
      "value": "51fp"
    },
    {
      "name": "size_text_52",
      "value": "52fp"
    },
    {
      "name": "size_text_53",
      "value": "53fp"
    },
    {
      "name": "size_text_54",
      "value": "54fp"
    },
    {
      "name": "size_text_55",
      "value": "55fp"
    },
    {
      "name": "size_text_56",
      "value": "56fp"
    },
    {
      "name": "size_text_57",
      "value": "57fp"
    },
    {
      "name": "size_text_58",
      "value": "58fp"
    },
    {
      "name": "size_text_59",
      "value": "59fp"
    },
    {
      "name": "size_text_60",
      "value": "60fp"
    },
    {
      "name": "size_text_61",
      "value": "61fp"
    },
    {
      "name": "size_text_62",
      "value": "62fp"
    },
    {
      "name": "size_text_63",
      "value": "63fp"
    },
    {
      "name": "size_text_64",
      "value": "64fp"
    },
    {
      "name": "size_text_65",
      "value": "65fp"
    },
    {
      "name": "size_text_66",
      "value": "66fp"
    },
    {
      "name": "size_text_67",
      "value": "67fp"
    },
    {
      "name": "size_text_68",
      "value": "68fp"
    },
    {
      "name": "size_text_69",
      "value": "69fp"
    },
    {
      "name": "size_text_70",
      "value": "70fp"
    },
    {
      "name": "size_text_71",
      "value": "71fp"
    },
    {
      "name": "size_text_72",
      "value": "72fp"
    },
    {
      "name": "size_text_73",
      "value": "73fp"
    },
    {
      "name": "size_text_74",
      "value": "74fp"
    },
    {
      "name": "size_text_75",
      "value": "75fp"
    },
    {
      "name": "size_text_76",
      "value": "76fp"
    },
    {
      "name": "size_text_77",
      "value": "77fp"
    },
    {
      "name": "size_text_78",
      "value": "78fp"
    },
    {
      "name": "size_text_79",
      "value": "79fp"
    },
    {
      "name": "size_text_80",
      "value": "80fp"
    },
    {
      "name": "size_text_81",
      "value": "81fp"
    },
    {
      "name": "size_text_82",
      "value": "82fp"
    },
    {
      "name": "size_text_83",
      "value": "83fp"
    },
    {
      "name": "size_text_84",
      "value": "84fp"
    },
    {
      "name": "size_text_85",
      "value": "85fp"
    },
    {
      "name": "size_text_86",
      "value": "86fp"
    },
    {
      "name": "size_text_87",
      "value": "87fp"
    },
    {
      "name": "size_text_88",
      "value": "88fp"
    },
    {
      "name": "size_text_89",
      "value": "89fp"
    },
    {
      "name": "size_text_90",
      "value": "90fp"
    },
    {
      "name": "size_text_91",
      "value": "91fp"
    },
    {
      "name": "size_text_92",
      "value": "92fp"
    },
    {
      "name": "size_text_93",
      "value": "93fp"
    },
    {
      "name": "size_text_94",
      "value": "94fp"
    },
    {
      "name": "size_text_95",
      "value": "95fp"
    },
    {
      "name": "size_text_96",
      "value": "96fp"
    },
    {
      "name": "size_text_97",
      "value": "97fp"
    },
    {
      "name": "size_text_98",
      "value": "98fp"
    },
    {
      "name": "size_text_99",
      "value": "99fp"
    },
    {
      "name": "size_text_100",
      "value": "100fp"
    }
  ]
}
{
  "string": [
    {
      "name": "page_show",
      "value": "page from package"
    },
    {
      "name": "module_desc",
      "value": "模块描述"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "土拨鼠鸿蒙App"
    },
    {
      "name": "charge",
      "value": "充电"
    },
    {
      "name": "scan",
      "value": "扫码"
    },
    {
      "name": "mine",
      "value": "我的"
    },
    {
      "name": "welcome_login_groundhog",
      "value": "欢迎登录土拨鼠充电平台"
    },
    {
      "name": "please_select_the_tenant",
      "value": "请选择租户"
    },
    {
      "name": "please_enter_the_username",
      "value": "请输入用户名"
    },
    {
      "name": "please_enter_the_password",
      "value": "请输入密码"
    },
    {
      "name": "please_enter_the_verification_code",
      "value": "请输入验证码"
    },
    {
      "name": "please_enter_the_company_name",
      "value": "请输入公司名称"
    },
    {
      "name": "please_enter_the_company_website",
      "value": "请输入公司网站"
    },
    {
      "name": "login",
      "value": "登录"
    },
    {
      "name": "no_account",
      "value": "没有账户？"
    },
    {
      "name": "register",
      "value": "去注册"
    },
    {
      "name": "login_in",
      "value": "去登录"
    },
    {
      "name": "existing_account",
      "value": "已有账户？"
    },
    {
      "name": "register_immediately",
      "value": "立即注册"
    },
    {
      "name": "company_website",
      "value": "公司网站,如www.example.com"
    },
    {
      "name": "company_name",
      "value": "公司名称"
    },
    {
      "name": "password_length",
      "value": "密码:长度至少5位"
    },
    {
      "name": "get_code",
      "value": "获取验证码"
    },
    {
      "name": "verification_code",
      "value": "验证码:666666"
    },
    {
      "name": "welcome_register_groundhog",
      "value": "欢迎注册土拨鼠充电平台"
    },
    {
      "name": "search_content",
      "value": "请输入搜索内容"
    },
    {
      "name": "search",
      "value": "搜索"
    },
    {
      "name": "no_data",
      "value": "暂无数据"
    },
    {
      "name": "selection_of_charging_pile",
      "value": "充电桩选择"
    },
    {
      "name": "fast_charge",
      "value": "快充"
    },
    {
      "name": "180KW",
      "value": "180KW"
    },
    {
      "name": "0V",
      "value": "0V"
    },
    {
      "name": "national_standard",
      "value": "国标"
    },
    {
      "name": "idle",
      "value": "空闲"
    },
    {
      "name": "faults",
      "value": "故障"
    },
    {
      "name": "charging_in_progress",
      "value": "充电中"
    },
    {
      "name": "pile_number",
      "value": "桩编号："
    },
    {
      "name": "station_name",
      "value": "站名称："
    },
    {
      "name": "agreement",
      "value": "用户协议"
    },
    {
      "name": "certification",
      "value": "平台资质"
    },
    {
      "name": "feat",
      "value": "我要合作"
    },
    {
      "name": "message",
      "value": "消息通知"
    },
    {
      "name": "person",
      "value": "个人信息"
    },
    {
      "name": "rule",
      "value": "规则中心"
    },
    {
      "name": "order",
      "value": "充电订单"
    },
    {
      "name": "service",
      "value": "客服中心"
    },
    {
      "name": "there_is_no_more_data",
      "value": "没有更多数据了"
    },
    {
      "name": "loading",
      "value": "加载中..."
    },
    {
      "name": "completed",
      "value": "已完成"
    },
    {
      "name": "pile_code",
      "value": "充电桩编号:"
    },
    {
      "name": "charge_name",
      "value": "充电站名:"
    },
    {
      "name": "price",
      "value": "价格:"
    },
    {
      "name": "order_status",
      "value": "订单状态:"
    },
    {
      "name": "start_time",
      "value": "开始时间:"
    },
    {
      "name": "end_time",
      "value": "结束时间:"
    },
    {
      "name": "stop_charge",
      "value": "停止充电"
    },
    {
      "name": "permission_approximately_location",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "location_permission_reason",
      "value": "需要获取您的位置信息以提供附近服务"
    },
    {
      "name": "visit_store_install_maps_first",
      "value": "请安装高德地图、花瓣地图或百度地图"
    },
    {
      "name": "visit_store_map",
      "value": "高德地图"
    },
    {
      "name": "visit_store_baidu_map",
      "value": "百度地图"
    },
    {
      "name": "visit_store_petal_map",
      "value": "花瓣地图"
    }
  ]
}
import { LEVEL, SIZE, TESTTYPE } from '../../Constant';
class ClassFilter {
    constructor(suiteName, itName, params) {
        this.suiteName = suiteName;
        this.itName = itName;
        this.params = params;
    }
    filterSuite() {
        return !this.params.split(',').map(item => item.split('#')[0]).map(item => item == this.suiteName).reduce((pre, cur) => pre || cur, false);
    }
    filterIt() {
        let classArray = this.params.split(',') || [];
        let suiteFilterResult = classArray.filter(item => !item.includes('#')).map(item => item == this.suiteName).reduce((pre, cur) => pre || cur, false);
        let itFilterResult = classArray.filter(item => item.includes('#')).map(item => item == (this.suiteName + '#' + this.itName)).reduce((pre, cur) => pre || cur, false);
        return !(suiteFilterResult || itFilterResult);
    }
}
class NotClassFilter {
    constructor(suiteName, itName, params) {
        this.suiteName = suiteName;
        this.itName = itName;
        this.params = params;
    }
    filterSuite() {
        return this.params.split(',').map(item => item == this.suiteName).reduce((pre, cur) => pre || cur, false);
    }
    filterIt() {
        return this.params.split(',').some(item => item == (this.suiteName + '#' + this.itName));
    }
}
class SuiteAndItNameFilter {
    constructor(suiteName, itName, params) {
        this.suiteName = suiteName;
        this.itName = itName;
        this.params = params;
    }
    filterSuite() {
        return !this.params.split(',').map(item => item == this.suiteName).reduce((pre, cur) => pre || cur, false);
    }
    filterIt() {
        return !this.params.split(',').map(item => item == this.itName).reduce((pre, cur) => pre || cur, false);
    }
}
class TestTypesFilter {
    constructor(suiteName, itName, fi, params) {
        this.suiteName = suiteName;
        this.itName = itName;
        this.params = params;
        this.fi = fi;
    }
    filterIt() {
        return !((this.params === (this.fi & this.params)) || this.fi === 0);
    }
}
class NestFilter {
    filterNestName(targetSuiteArray, targetSpecArray, suiteStack, desc) {
        let targetSuiteName = '';
        for (let key in suiteStack) {
            targetSuiteName = targetSuiteName + '.' + suiteStack[key].description;
        }
        targetSuiteName = targetSuiteName.substring(2);
        const targetSpecName = targetSuiteName + '#' + desc;
        let isFilter = true;
        if (targetSpecArray.includes(targetSpecName)) {
            return false;
        }
        for (let index in targetSuiteArray) {
            if (targetSuiteName.startsWith(targetSuiteArray[index])) {
                return false;
            }
        }
        return isFilter;
    }
    filterNotClass(notClass, suiteStack, desc) {
        let filterNotClass = false;
        if (notClass != null) {
            let notClassArray = notClass.split(',');
            let targetSuiteName = '';
            for (let key in suiteStack) {
                targetSuiteName = targetSuiteName + '.' + suiteStack[key].description;
            }
            targetSuiteName = targetSuiteName.substring(2);
            const targetSpecName = targetSuiteName + '#' + desc;
            if (notClassArray.includes(targetSpecName) || notClassArray.some(key => targetSpecName.startsWith(key))) {
                filterNotClass = true;
            }
        }
        return filterNotClass;
    }
    filterLevelOrSizeOrTestType(level, size, testType, filter) {
        let result = false;
        if (filter === 0 || filter === '0') {
            return result;
        }
        if (level == null && size == null && testType == null) {
            return result;
        }
        if (level != null) {
            let levelFilter = LEVEL[`${level}`];
            result = result || filter === levelFilter;
        }
        if (size != null) {
            let sizeFilter = SIZE[`${size}`];
            result = result || filter === sizeFilter;
        }
        if (testType != null) {
            let testTypeFilter = TESTTYPE[`${testType}`];
            result = result || filter === testTypeFilter;
        }
        return !result;
    }
}
export { ClassFilter, NotClassFilter, SuiteAndItNameFilter, TestTypesFilter, NestFilter };
const SUITES_KEY = 'suites';
const SPECS_KEY = 'items';
const DESCRIBE_KEY = 'describe';
const IT_KEY = 'it';
const PARAMS_KEY = 'params';
const STRESS_KEY = 'stress';
class ObjectUtils {
    static get(object, name, defaultValue) {
        let result = defaultValue;
        for (const key in object) {
            if (key === name) {
                return object[key];
            }
        }
        return result;
    }
    static has(object, key) {
        return Object.prototype.hasOwnProperty.call(object, key);
    }
}
class DataDriver {
    constructor(attr) {
        this.id = 'dataDriver';
        this.data = attr.data || {};
    }
    init(coreContext) {
        this.coreContext = coreContext;
        this.suiteService = this.coreContext.getDefaultService('suite');
        this.specService = this.coreContext.getDefaultService('spec');
    }
    getSpecParamsValue(specs) {
        let specParams = [];
        let specDesc = this.specService.getCurrentRunningSpec().description;
        if (specs === null || specs === undefined) {
            return specParams;
        }
        for (const specItem of specs) {
            if (ObjectUtils.has(specItem, IT_KEY) && ObjectUtils.get(specItem, IT_KEY) === specDesc) {
                return ObjectUtils.get(specItem, PARAMS_KEY, specParams);
            }
        }
        return specParams;
    }
    getSpecParams() {
        let specParams = [];
        let suiteDesc = this.suiteService.getCurrentRunningSuite().description;
        let specDesc = this.specService.getCurrentRunningSpec().description;
        let suites = ObjectUtils.get(this.data, SUITES_KEY, []);
        for (const suiteItem of suites) {
            let describeValue = ObjectUtils.get(suiteItem, DESCRIBE_KEY, '');
            if (ObjectUtils.has(suiteItem, DESCRIBE_KEY) && (typeof describeValue === 'object') && describeValue.constructor === Array && describeValue.includes(suiteDesc)) {
                let specs = ObjectUtils.get(suiteItem, SPECS_KEY, []);
                return this.getSpecParamsValue(specs);
            }
        }
        return specParams;
    }
    getSuiteParams() {
        let suiteParams = {};
        let suiteDesc = this.suiteService.getCurrentRunningSuite().description;
        let suites = ObjectUtils.get(this.data, SUITES_KEY, []);
        for (const suiteItem of suites) {
            let describeValue = ObjectUtils.get(suiteItem, DESCRIBE_KEY, []);
            if (ObjectUtils.has(suiteItem, DESCRIBE_KEY) && (typeof describeValue === 'object') && describeValue.constructor === Array && describeValue.includes(suiteDesc)) {
                suiteParams = Object.assign({}, suiteParams, ObjectUtils.get(suiteItem, PARAMS_KEY, suiteParams));
            }
        }
        return suiteParams;
    }
    getStressNum(specs, specDesc) {
        let stress = 1;
        if (specs === null || specs === undefined) {
            return stress;
        }
        for (const specItem of specs) {
            if (ObjectUtils.has(specItem, IT_KEY) && ObjectUtils.get(specItem, IT_KEY) === specDesc) {
                let tempStress = ObjectUtils.get(specItem, STRESS_KEY, stress);
                return (Number.isInteger(tempStress) && tempStress >= 1) ? tempStress : stress;
            }
        }
        return stress;
    }
    getSpecStress(specDesc) {
        let stress = 1;
        let suiteDesc = this.suiteService.getCurrentRunningSuite().description;
        let suites = ObjectUtils.get(this.data, SUITES_KEY, []);
        for (const suiteItem of suites) {
            let describeValue = ObjectUtils.get(suiteItem, DESCRIBE_KEY, '');
            if (ObjectUtils.has(suiteItem, DESCRIBE_KEY) && (typeof describeValue === 'object') && describeValue.constructor === Array && describeValue.includes(suiteDesc)) {
                let specs = ObjectUtils.get(suiteItem, SPECS_KEY, []);
                return this.getStressNum(specs, specDesc);
            }
        }
        return stress;
    }
    getSuiteStress(suiteDesc) {
        let stress = 1;
        let suites = ObjectUtils.get(this.data, SUITES_KEY, []);
        for (const suiteItem of suites) {
            let describeValue = ObjectUtils.get(suiteItem, DESCRIBE_KEY, []);
            if (ObjectUtils.has(suiteItem, DESCRIBE_KEY) && (typeof describeValue === 'object') && describeValue.constructor === Array && describeValue.includes(suiteDesc)) {
                let tempStress = ObjectUtils.get(suiteItem, STRESS_KEY, stress);
                return (Number.isInteger(tempStress) && tempStress >= 1) ? tempStress : stress;
            }
        }
        return stress;
    }
}
export default DataDriver;
{
	"record":	[{
			"type":	"string",
			"name":	"app_name",
			"id":	"0x02000000"
		}, {
			"type":	"media",
			"name":	"background",
			"id":	"0x02000001"
		}, {
			"type":	"media",
			"name":	"foreground",
			"id":	"0x02000002"
		}, {
			"type":	"media",
			"name":	"layered_image",
			"id":	"0x02000003"
		}, {
			"type":	"string",
			"name":	"EntryAbility_desc",
			"id":	"0x02000004"
		}, {
			"type":	"string",
			"name":	"EntryAbility_label",
			"id":	"0x02000005"
		}, {
			"type":	"string",
			"name":	"module_desc",
			"id":	"0x02000006"
		}, {
			"type":	"color",
			"name":	"start_window_background",
			"id":	"0x02000007"
		}, {
			"type":	"float",
			"name":	"page_text_font_size",
			"id":	"0x02000008"
		}, {
			"type":	"media",
			"name":	"startIcon",
			"id":	"0x02000009"
		}, {
			"type":	"profile",
			"name":	"backup_config",
			"id":	"0x0200000A"
		}, {
			"type":	"profile",
			"name":	"main_pages",
			"id":	"0x0200000B"
		}, {
			"type":	"string",
			"name":	"page_show",
			"id":	"0x0200000C"
		}, {
			"type":	"string",
			"name":	"0V",
			"id":	"0x03000000"
		}, {
			"type":	"string",
			"name":	"180KW",
			"id":	"0x03000001"
		}, {
			"type":	"string",
			"name":	"agreement",
			"id":	"0x03000002"
		}, {
			"type":	"string",
			"name":	"certification",
			"id":	"0x03000003"
		}, {
			"type":	"string",
			"name":	"charge",
			"id":	"0x03000004"
		}, {
			"type":	"string",
			"name":	"charge_name",
			"id":	"0x03000005"
		}, {
			"type":	"string",
			"name":	"charging_in_progress",
			"id":	"0x03000006"
		}, {
			"type":	"string",
			"name":	"company_name",
			"id":	"0x03000007"
		}, {
			"type":	"string",
			"name":	"company_website",
			"id":	"0x03000008"
		}, {
			"type":	"string",
			"name":	"completed",
			"id":	"0x03000009"
		}, {
			"type":	"string",
			"name":	"end_time",
			"id":	"0x0300000A"
		}, {
			"type":	"string",
			"name":	"existing_account",
			"id":	"0x0300000B"
		}, {
			"type":	"string",
			"name":	"fast_charge",
			"id":	"0x0300000C"
		}, {
			"type":	"string",
			"name":	"faults",
			"id":	"0x0300000D"
		}, {
			"type":	"string",
			"name":	"feat",
			"id":	"0x0300000E"
		}, {
			"type":	"string",
			"name":	"get_code",
			"id":	"0x0300000F"
		}, {
			"type":	"string",
			"name":	"idle",
			"id":	"0x03000010"
		}, {
			"type":	"string",
			"name":	"loading",
			"id":	"0x03000011"
		}, {
			"type":	"string",
			"name":	"location_permission_reason",
			"id":	"0x03000012"
		}, {
			"type":	"string",
			"name":	"login",
			"id":	"0x03000013"
		}, {
			"type":	"string",
			"name":	"login_in",
			"id":	"0x03000014"
		}, {
			"type":	"string",
			"name":	"message",
			"id":	"0x03000015"
		}, {
			"type":	"string",
			"name":	"mine",
			"id":	"0x03000016"
		}, {
			"type":	"string",
			"name":	"national_standard",
			"id":	"0x03000017"
		}, {
			"type":	"string",
			"name":	"no_account",
			"id":	"0x03000018"
		}, {
			"type":	"string",
			"name":	"no_data",
			"id":	"0x03000019"
		}, {
			"type":	"string",
			"name":	"order",
			"id":	"0x0300001A"
		}, {
			"type":	"string",
			"name":	"order_status",
			"id":	"0x0300001B"
		}, {
			"type":	"string",
			"name":	"password_length",
			"id":	"0x0300001C"
		}, {
			"type":	"string",
			"name":	"permission_approximately_location",
			"id":	"0x0300001D"
		}, {
			"type":	"string",
			"name":	"person",
			"id":	"0x0300001E"
		}, {
			"type":	"string",
			"name":	"pile_code",
			"id":	"0x0300001F"
		}, {
			"type":	"string",
			"name":	"pile_number",
			"id":	"0x03000020"
		}, {
			"type":	"string",
			"name":	"please_enter_the_company_name",
			"id":	"0x03000021"
		}, {
			"type":	"string",
			"name":	"please_enter_the_company_website",
			"id":	"0x03000022"
		}, {
			"type":	"string",
			"name":	"please_enter_the_password",
			"id":	"0x03000023"
		}, {
			"type":	"string",
			"name":	"please_enter_the_username",
			"id":	"0x03000024"
		}, {
			"type":	"string",
			"name":	"please_enter_the_verification_code",
			"id":	"0x03000025"
		}, {
			"type":	"string",
			"name":	"please_select_the_tenant",
			"id":	"0x03000026"
		}, {
			"type":	"string",
			"name":	"price",
			"id":	"0x03000027"
		}, {
			"type":	"string",
			"name":	"register",
			"id":	"0x03000028"
		}, {
			"type":	"string",
			"name":	"register_immediately",
			"id":	"0x03000029"
		}, {
			"type":	"string",
			"name":	"rule",
			"id":	"0x0300002A"
		}, {
			"type":	"string",
			"name":	"scan",
			"id":	"0x0300002B"
		}, {
			"type":	"string",
			"name":	"search",
			"id":	"0x0300002C"
		}, {
			"type":	"string",
			"name":	"search_content",
			"id":	"0x0300002D"
		}, {
			"type":	"string",
			"name":	"selection_of_charging_pile",
			"id":	"0x0300002E"
		}, {
			"type":	"string",
			"name":	"service",
			"id":	"0x0300002F"
		}, {
			"type":	"string",
			"name":	"start_time",
			"id":	"0x03000030"
		}, {
			"type":	"string",
			"name":	"station_name",
			"id":	"0x03000031"
		}, {
			"type":	"string",
			"name":	"stop_charge",
			"id":	"0x03000032"
		}, {
			"type":	"string",
			"name":	"there_is_no_more_data",
			"id":	"0x03000033"
		}, {
			"type":	"string",
			"name":	"verification_code",
			"id":	"0x03000034"
		}, {
			"type":	"string",
			"name":	"welcome_login_groundhog",
			"id":	"0x03000035"
		}, {
			"type":	"string",
			"name":	"welcome_register_groundhog",
			"id":	"0x03000036"
		}, {
			"type":	"color",
			"name":	"color_009688",
			"id":	"0x03000037"
		}, {
			"type":	"color",
			"name":	"color_0165B8",
			"id":	"0x03000038"
		}, {
			"type":	"color",
			"name":	"color_0165b8",
			"id":	"0x03000039"
		}, {
			"type":	"color",
			"name":	"color_0aa671",
			"id":	"0x0300003A"
		}, {
			"type":	"color",
			"name":	"color_182431",
			"id":	"0x0300003B"
		}, {
			"type":	"color",
			"name":	"color_666",
			"id":	"0x0300003C"
		}, {
			"type":	"color",
			"name":	"color_80000000",
			"id":	"0x0300003D"
		}, {
			"type":	"color",
			"name":	"color_898e92",
			"id":	"0x0300003E"
		}, {
			"type":	"color",
			"name":	"color_999",
			"id":	"0x0300003F"
		}, {
			"type":	"color",
			"name":	"color_F44336",
			"id":	"0x03000040"
		}, {
			"type":	"color",
			"name":	"color_adadb3",
			"id":	"0x03000041"
		}, {
			"type":	"color",
			"name":	"color_d68751",
			"id":	"0x03000042"
		}, {
			"type":	"color",
			"name":	"color_efefef",
			"id":	"0x03000043"
		}, {
			"type":	"color",
			"name":	"color_f0f2f4",
			"id":	"0x03000044"
		}, {
			"type":	"color",
			"name":	"color_f5f5f5",
			"id":	"0x03000045"
		}, {
			"type":	"color",
			"name":	"color_fff",
			"id":	"0x03000046"
		}, {
			"type":	"float",
			"name":	"size_1",
			"id":	"0x03000047"
		}, {
			"type":	"float",
			"name":	"size_10",
			"id":	"0x03000048"
		}, {
			"type":	"float",
			"name":	"size_100",
			"id":	"0x03000049"
		}, {
			"type":	"float",
			"name":	"size_101",
			"id":	"0x0300004A"
		}, {
			"type":	"float",
			"name":	"size_102",
			"id":	"0x0300004B"
		}, {
			"type":	"float",
			"name":	"size_103",
			"id":	"0x0300004C"
		}, {
			"type":	"float",
			"name":	"size_104",
			"id":	"0x0300004D"
		}, {
			"type":	"float",
			"name":	"size_105",
			"id":	"0x0300004E"
		}, {
			"type":	"float",
			"name":	"size_106",
			"id":	"0x0300004F"
		}, {
			"type":	"float",
			"name":	"size_107",
			"id":	"0x03000050"
		}, {
			"type":	"float",
			"name":	"size_108",
			"id":	"0x03000051"
		}, {
			"type":	"float",
			"name":	"size_109",
			"id":	"0x03000052"
		}, {
			"type":	"float",
			"name":	"size_11",
			"id":	"0x03000053"
		}, {
			"type":	"float",
			"name":	"size_110",
			"id":	"0x03000054"
		}, {
			"type":	"float",
			"name":	"size_111",
			"id":	"0x03000055"
		}, {
			"type":	"float",
			"name":	"size_112",
			"id":	"0x03000056"
		}, {
			"type":	"float",
			"name":	"size_113",
			"id":	"0x03000057"
		}, {
			"type":	"float",
			"name":	"size_114",
			"id":	"0x03000058"
		}, {
			"type":	"float",
			"name":	"size_115",
			"id":	"0x03000059"
		}, {
			"type":	"float",
			"name":	"size_116",
			"id":	"0x0300005A"
		}, {
			"type":	"float",
			"name":	"size_117",
			"id":	"0x0300005B"
		}, {
			"type":	"float",
			"name":	"size_118",
			"id":	"0x0300005C"
		}, {
			"type":	"float",
			"name":	"size_119",
			"id":	"0x0300005D"
		}, {
			"type":	"float",
			"name":	"size_12",
			"id":	"0x0300005E"
		}, {
			"type":	"float",
			"name":	"size_120",
			"id":	"0x0300005F"
		}, {
			"type":	"float",
			"name":	"size_121",
			"id":	"0x03000060"
		}, {
			"type":	"float",
			"name":	"size_122",
			"id":	"0x03000061"
		}, {
			"type":	"float",
			"name":	"size_123",
			"id":	"0x03000062"
		}, {
			"type":	"float",
			"name":	"size_124",
			"id":	"0x03000063"
		}, {
			"type":	"float",
			"name":	"size_125",
			"id":	"0x03000064"
		}, {
			"type":	"float",
			"name":	"size_126",
			"id":	"0x03000065"
		}, {
			"type":	"float",
			"name":	"size_127",
			"id":	"0x03000066"
		}, {
			"type":	"float",
			"name":	"size_128",
			"id":	"0x03000067"
		}, {
			"type":	"float",
			"name":	"size_129",
			"id":	"0x03000068"
		}, {
			"type":	"float",
			"name":	"size_13",
			"id":	"0x03000069"
		}, {
			"type":	"float",
			"name":	"size_130",
			"id":	"0x0300006A"
		}, {
			"type":	"float",
			"name":	"size_131",
			"id":	"0x0300006B"
		}, {
			"type":	"float",
			"name":	"size_132",
			"id":	"0x0300006C"
		}, {
			"type":	"float",
			"name":	"size_133",
			"id":	"0x0300006D"
		}, {
			"type":	"float",
			"name":	"size_134",
			"id":	"0x0300006E"
		}, {
			"type":	"float",
			"name":	"size_135",
			"id":	"0x0300006F"
		}, {
			"type":	"float",
			"name":	"size_136",
			"id":	"0x03000070"
		}, {
			"type":	"float",
			"name":	"size_137",
			"id":	"0x03000071"
		}, {
			"type":	"float",
			"name":	"size_138",
			"id":	"0x03000072"
		}, {
			"type":	"float",
			"name":	"size_139",
			"id":	"0x03000073"
		}, {
			"type":	"float",
			"name":	"size_14",
			"id":	"0x03000074"
		}, {
			"type":	"float",
			"name":	"size_140",
			"id":	"0x03000075"
		}, {
			"type":	"float",
			"name":	"size_141",
			"id":	"0x03000076"
		}, {
			"type":	"float",
			"name":	"size_142",
			"id":	"0x03000077"
		}, {
			"type":	"float",
			"name":	"size_143",
			"id":	"0x03000078"
		}, {
			"type":	"float",
			"name":	"size_144",
			"id":	"0x03000079"
		}, {
			"type":	"float",
			"name":	"size_145",
			"id":	"0x0300007A"
		}, {
			"type":	"float",
			"name":	"size_146",
			"id":	"0x0300007B"
		}, {
			"type":	"float",
			"name":	"size_147",
			"id":	"0x0300007C"
		}, {
			"type":	"float",
			"name":	"size_148",
			"id":	"0x0300007D"
		}, {
			"type":	"float",
			"name":	"size_149",
			"id":	"0x0300007E"
		}, {
			"type":	"float",
			"name":	"size_15",
			"id":	"0x0300007F"
		}, {
			"type":	"float",
			"name":	"size_150",
			"id":	"0x03000080"
		}, {
			"type":	"float",
			"name":	"size_151",
			"id":	"0x03000081"
		}, {
			"type":	"float",
			"name":	"size_152",
			"id":	"0x03000082"
		}, {
			"type":	"float",
			"name":	"size_153",
			"id":	"0x03000083"
		}, {
			"type":	"float",
			"name":	"size_154",
			"id":	"0x03000084"
		}, {
			"type":	"float",
			"name":	"size_155",
			"id":	"0x03000085"
		}, {
			"type":	"float",
			"name":	"size_156",
			"id":	"0x03000086"
		}, {
			"type":	"float",
			"name":	"size_157",
			"id":	"0x03000087"
		}, {
			"type":	"float",
			"name":	"size_158",
			"id":	"0x03000088"
		}, {
			"type":	"float",
			"name":	"size_159",
			"id":	"0x03000089"
		}, {
			"type":	"float",
			"name":	"size_16",
			"id":	"0x0300008A"
		}, {
			"type":	"float",
			"name":	"size_160",
			"id":	"0x0300008B"
		}, {
			"type":	"float",
			"name":	"size_161",
			"id":	"0x0300008C"
		}, {
			"type":	"float",
			"name":	"size_162",
			"id":	"0x0300008D"
		}, {
			"type":	"float",
			"name":	"size_163",
			"id":	"0x0300008E"
		}, {
			"type":	"float",
			"name":	"size_164",
			"id":	"0x0300008F"
		}, {
			"type":	"float",
			"name":	"size_165",
			"id":	"0x03000090"
		}, {
			"type":	"float",
			"name":	"size_166",
			"id":	"0x03000091"
		}, {
			"type":	"float",
			"name":	"size_167",
			"id":	"0x03000092"
		}, {
			"type":	"float",
			"name":	"size_168",
			"id":	"0x03000093"
		}, {
			"type":	"float",
			"name":	"size_169",
			"id":	"0x03000094"
		}, {
			"type":	"float",
			"name":	"size_17",
			"id":	"0x03000095"
		}, {
			"type":	"float",
			"name":	"size_170",
			"id":	"0x03000096"
		}, {
			"type":	"float",
			"name":	"size_171",
			"id":	"0x03000097"
		}, {
			"type":	"float",
			"name":	"size_172",
			"id":	"0x03000098"
		}, {
			"type":	"float",
			"name":	"size_173",
			"id":	"0x03000099"
		}, {
			"type":	"float",
			"name":	"size_174",
			"id":	"0x0300009A"
		}, {
			"type":	"float",
			"name":	"size_175",
			"id":	"0x0300009B"
		}, {
			"type":	"float",
			"name":	"size_176",
			"id":	"0x0300009C"
		}, {
			"type":	"float",
			"name":	"size_177",
			"id":	"0x0300009D"
		}, {
			"type":	"float",
			"name":	"size_178",
			"id":	"0x0300009E"
		}, {
			"type":	"float",
			"name":	"size_179",
			"id":	"0x0300009F"
		}, {
			"type":	"float",
			"name":	"size_18",
			"id":	"0x030000A0"
		}, {
			"type":	"float",
			"name":	"size_180",
			"id":	"0x030000A1"
		}, {
			"type":	"float",
			"name":	"size_181",
			"id":	"0x030000A2"
		}, {
			"type":	"float",
			"name":	"size_182",
			"id":	"0x030000A3"
		}, {
			"type":	"float",
			"name":	"size_183",
			"id":	"0x030000A4"
		}, {
			"type":	"float",
			"name":	"size_184",
			"id":	"0x030000A5"
		}, {
			"type":	"float",
			"name":	"size_185",
			"id":	"0x030000A6"
		}, {
			"type":	"float",
			"name":	"size_186",
			"id":	"0x030000A7"
		}, {
			"type":	"float",
			"name":	"size_187",
			"id":	"0x030000A8"
		}, {
			"type":	"float",
			"name":	"size_188",
			"id":	"0x030000A9"
		}, {
			"type":	"float",
			"name":	"size_189",
			"id":	"0x030000AA"
		}, {
			"type":	"float",
			"name":	"size_19",
			"id":	"0x030000AB"
		}, {
			"type":	"float",
			"name":	"size_190",
			"id":	"0x030000AC"
		}, {
			"type":	"float",
			"name":	"size_191",
			"id":	"0x030000AD"
		}, {
			"type":	"float",
			"name":	"size_192",
			"id":	"0x030000AE"
		}, {
			"type":	"float",
			"name":	"size_193",
			"id":	"0x030000AF"
		}, {
			"type":	"float",
			"name":	"size_194",
			"id":	"0x030000B0"
		}, {
			"type":	"float",
			"name":	"size_195",
			"id":	"0x030000B1"
		}, {
			"type":	"float",
			"name":	"size_196",
			"id":	"0x030000B2"
		}, {
			"type":	"float",
			"name":	"size_197",
			"id":	"0x030000B3"
		}, {
			"type":	"float",
			"name":	"size_198",
			"id":	"0x030000B4"
		}, {
			"type":	"float",
			"name":	"size_199",
			"id":	"0x030000B5"
		}, {
			"type":	"float",
			"name":	"size_2",
			"id":	"0x030000B6"
		}, {
			"type":	"float",
			"name":	"size_20",
			"id":	"0x030000B7"
		}, {
			"type":	"float",
			"name":	"size_200",
			"id":	"0x030000B8"
		}, {
			"type":	"float",
			"name":	"size_201",
			"id":	"0x030000B9"
		}, {
			"type":	"float",
			"name":	"size_202",
			"id":	"0x030000BA"
		}, {
			"type":	"float",
			"name":	"size_203",
			"id":	"0x030000BB"
		}, {
			"type":	"float",
			"name":	"size_204",
			"id":	"0x030000BC"
		}, {
			"type":	"float",
			"name":	"size_205",
			"id":	"0x030000BD"
		}, {
			"type":	"float",
			"name":	"size_206",
			"id":	"0x030000BE"
		}, {
			"type":	"float",
			"name":	"size_207",
			"id":	"0x030000BF"
		}, {
			"type":	"float",
			"name":	"size_208",
			"id":	"0x030000C0"
		}, {
			"type":	"float",
			"name":	"size_209",
			"id":	"0x030000C1"
		}, {
			"type":	"float",
			"name":	"size_21",
			"id":	"0x030000C2"
		}, {
			"type":	"float",
			"name":	"size_210",
			"id":	"0x030000C3"
		}, {
			"type":	"float",
			"name":	"size_211",
			"id":	"0x030000C4"
		}, {
			"type":	"float",
			"name":	"size_212",
			"id":	"0x030000C5"
		}, {
			"type":	"float",
			"name":	"size_213",
			"id":	"0x030000C6"
		}, {
			"type":	"float",
			"name":	"size_214",
			"id":	"0x030000C7"
		}, {
			"type":	"float",
			"name":	"size_215",
			"id":	"0x030000C8"
		}, {
			"type":	"float",
			"name":	"size_216",
			"id":	"0x030000C9"
		}, {
			"type":	"float",
			"name":	"size_217",
			"id":	"0x030000CA"
		}, {
			"type":	"float",
			"name":	"size_218",
			"id":	"0x030000CB"
		}, {
			"type":	"float",
			"name":	"size_219",
			"id":	"0x030000CC"
		}, {
			"type":	"float",
			"name":	"size_22",
			"id":	"0x030000CD"
		}, {
			"type":	"float",
			"name":	"size_220",
			"id":	"0x030000CE"
		}, {
			"type":	"float",
			"name":	"size_221",
			"id":	"0x030000CF"
		}, {
			"type":	"float",
			"name":	"size_222",
			"id":	"0x030000D0"
		}, {
			"type":	"float",
			"name":	"size_223",
			"id":	"0x030000D1"
		}, {
			"type":	"float",
			"name":	"size_224",
			"id":	"0x030000D2"
		}, {
			"type":	"float",
			"name":	"size_225",
			"id":	"0x030000D3"
		}, {
			"type":	"float",
			"name":	"size_226",
			"id":	"0x030000D4"
		}, {
			"type":	"float",
			"name":	"size_227",
			"id":	"0x030000D5"
		}, {
			"type":	"float",
			"name":	"size_228",
			"id":	"0x030000D6"
		}, {
			"type":	"float",
			"name":	"size_229",
			"id":	"0x030000D7"
		}, {
			"type":	"float",
			"name":	"size_23",
			"id":	"0x030000D8"
		}, {
			"type":	"float",
			"name":	"size_230",
			"id":	"0x030000D9"
		}, {
			"type":	"float",
			"name":	"size_231",
			"id":	"0x030000DA"
		}, {
			"type":	"float",
			"name":	"size_232",
			"id":	"0x030000DB"
		}, {
			"type":	"float",
			"name":	"size_233",
			"id":	"0x030000DC"
		}, {
			"type":	"float",
			"name":	"size_234",
			"id":	"0x030000DD"
		}, {
			"type":	"float",
			"name":	"size_235",
			"id":	"0x030000DE"
		}, {
			"type":	"float",
			"name":	"size_236",
			"id":	"0x030000DF"
		}, {
			"type":	"float",
			"name":	"size_237",
			"id":	"0x030000E0"
		}, {
			"type":	"float",
			"name":	"size_238",
			"id":	"0x030000E1"
		}, {
			"type":	"float",
			"name":	"size_239",
			"id":	"0x030000E2"
		}, {
			"type":	"float",
			"name":	"size_24",
			"id":	"0x030000E3"
		}, {
			"type":	"float",
			"name":	"size_240",
			"id":	"0x030000E4"
		}, {
			"type":	"float",
			"name":	"size_241",
			"id":	"0x030000E5"
		}, {
			"type":	"float",
			"name":	"size_242",
			"id":	"0x030000E6"
		}, {
			"type":	"float",
			"name":	"size_243",
			"id":	"0x030000E7"
		}, {
			"type":	"float",
			"name":	"size_244",
			"id":	"0x030000E8"
		}, {
			"type":	"float",
			"name":	"size_245",
			"id":	"0x030000E9"
		}, {
			"type":	"float",
			"name":	"size_246",
			"id":	"0x030000EA"
		}, {
			"type":	"float",
			"name":	"size_247",
			"id":	"0x030000EB"
		}, {
			"type":	"float",
			"name":	"size_248",
			"id":	"0x030000EC"
		}, {
			"type":	"float",
			"name":	"size_249",
			"id":	"0x030000ED"
		}, {
			"type":	"float",
			"name":	"size_25",
			"id":	"0x030000EE"
		}, {
			"type":	"float",
			"name":	"size_250",
			"id":	"0x030000EF"
		}, {
			"type":	"float",
			"name":	"size_251",
			"id":	"0x030000F0"
		}, {
			"type":	"float",
			"name":	"size_252",
			"id":	"0x030000F1"
		}, {
			"type":	"float",
			"name":	"size_253",
			"id":	"0x030000F2"
		}, {
			"type":	"float",
			"name":	"size_254",
			"id":	"0x030000F3"
		}, {
			"type":	"float",
			"name":	"size_255",
			"id":	"0x030000F4"
		}, {
			"type":	"float",
			"name":	"size_256",
			"id":	"0x030000F5"
		}, {
			"type":	"float",
			"name":	"size_257",
			"id":	"0x030000F6"
		}, {
			"type":	"float",
			"name":	"size_258",
			"id":	"0x030000F7"
		}, {
			"type":	"float",
			"name":	"size_259",
			"id":	"0x030000F8"
		}, {
			"type":	"float",
			"name":	"size_26",
			"id":	"0x030000F9"
		}, {
			"type":	"float",
			"name":	"size_260",
			"id":	"0x030000FA"
		}, {
			"type":	"float",
			"name":	"size_261",
			"id":	"0x030000FB"
		}, {
			"type":	"float",
			"name":	"size_262",
			"id":	"0x030000FC"
		}, {
			"type":	"float",
			"name":	"size_263",
			"id":	"0x030000FD"
		}, {
			"type":	"float",
			"name":	"size_264",
			"id":	"0x030000FE"
		}, {
			"type":	"float",
			"name":	"size_265",
			"id":	"0x030000FF"
		}, {
			"type":	"float",
			"name":	"size_266",
			"id":	"0x03000100"
		}, {
			"type":	"float",
			"name":	"size_267",
			"id":	"0x03000101"
		}, {
			"type":	"float",
			"name":	"size_268",
			"id":	"0x03000102"
		}, {
			"type":	"float",
			"name":	"size_269",
			"id":	"0x03000103"
		}, {
			"type":	"float",
			"name":	"size_27",
			"id":	"0x03000104"
		}, {
			"type":	"float",
			"name":	"size_270",
			"id":	"0x03000105"
		}, {
			"type":	"float",
			"name":	"size_271",
			"id":	"0x03000106"
		}, {
			"type":	"float",
			"name":	"size_272",
			"id":	"0x03000107"
		}, {
			"type":	"float",
			"name":	"size_273",
			"id":	"0x03000108"
		}, {
			"type":	"float",
			"name":	"size_274",
			"id":	"0x03000109"
		}, {
			"type":	"float",
			"name":	"size_275",
			"id":	"0x0300010A"
		}, {
			"type":	"float",
			"name":	"size_276",
			"id":	"0x0300010B"
		}, {
			"type":	"float",
			"name":	"size_277",
			"id":	"0x0300010C"
		}, {
			"type":	"float",
			"name":	"size_278",
			"id":	"0x0300010D"
		}, {
			"type":	"float",
			"name":	"size_279",
			"id":	"0x0300010E"
		}, {
			"type":	"float",
			"name":	"size_28",
			"id":	"0x0300010F"
		}, {
			"type":	"float",
			"name":	"size_280",
			"id":	"0x03000110"
		}, {
			"type":	"float",
			"name":	"size_281",
			"id":	"0x03000111"
		}, {
			"type":	"float",
			"name":	"size_282",
			"id":	"0x03000112"
		}, {
			"type":	"float",
			"name":	"size_283",
			"id":	"0x03000113"
		}, {
			"type":	"float",
			"name":	"size_284",
			"id":	"0x03000114"
		}, {
			"type":	"float",
			"name":	"size_285",
			"id":	"0x03000115"
		}, {
			"type":	"float",
			"name":	"size_286",
			"id":	"0x03000116"
		}, {
			"type":	"float",
			"name":	"size_287",
			"id":	"0x03000117"
		}, {
			"type":	"float",
			"name":	"size_288",
			"id":	"0x03000118"
		}, {
			"type":	"float",
			"name":	"size_289",
			"id":	"0x03000119"
		}, {
			"type":	"float",
			"name":	"size_29",
			"id":	"0x0300011A"
		}, {
			"type":	"float",
			"name":	"size_290",
			"id":	"0x0300011B"
		}, {
			"type":	"float",
			"name":	"size_291",
			"id":	"0x0300011C"
		}, {
			"type":	"float",
			"name":	"size_292",
			"id":	"0x0300011D"
		}, {
			"type":	"float",
			"name":	"size_293",
			"id":	"0x0300011E"
		}, {
			"type":	"float",
			"name":	"size_294",
			"id":	"0x0300011F"
		}, {
			"type":	"float",
			"name":	"size_295",
			"id":	"0x03000120"
		}, {
			"type":	"float",
			"name":	"size_296",
			"id":	"0x03000121"
		}, {
			"type":	"float",
			"name":	"size_297",
			"id":	"0x03000122"
		}, {
			"type":	"float",
			"name":	"size_298",
			"id":	"0x03000123"
		}, {
			"type":	"float",
			"name":	"size_299",
			"id":	"0x03000124"
		}, {
			"type":	"float",
			"name":	"size_3",
			"id":	"0x03000125"
		}, {
			"type":	"float",
			"name":	"size_30",
			"id":	"0x03000126"
		}, {
			"type":	"float",
			"name":	"size_300",
			"id":	"0x03000127"
		}, {
			"type":	"float",
			"name":	"size_31",
			"id":	"0x03000128"
		}, {
			"type":	"float",
			"name":	"size_32",
			"id":	"0x03000129"
		}, {
			"type":	"float",
			"name":	"size_33",
			"id":	"0x0300012A"
		}, {
			"type":	"float",
			"name":	"size_34",
			"id":	"0x0300012B"
		}, {
			"type":	"float",
			"name":	"size_35",
			"id":	"0x0300012C"
		}, {
			"type":	"float",
			"name":	"size_36",
			"id":	"0x0300012D"
		}, {
			"type":	"float",
			"name":	"size_37",
			"id":	"0x0300012E"
		}, {
			"type":	"float",
			"name":	"size_38",
			"id":	"0x0300012F"
		}, {
			"type":	"float",
			"name":	"size_39",
			"id":	"0x03000130"
		}, {
			"type":	"float",
			"name":	"size_4",
			"id":	"0x03000131"
		}, {
			"type":	"float",
			"name":	"size_40",
			"id":	"0x03000132"
		}, {
			"type":	"float",
			"name":	"size_41",
			"id":	"0x03000133"
		}, {
			"type":	"float",
			"name":	"size_42",
			"id":	"0x03000134"
		}, {
			"type":	"float",
			"name":	"size_43",
			"id":	"0x03000135"
		}, {
			"type":	"float",
			"name":	"size_44",
			"id":	"0x03000136"
		}, {
			"type":	"float",
			"name":	"size_45",
			"id":	"0x03000137"
		}, {
			"type":	"float",
			"name":	"size_46",
			"id":	"0x03000138"
		}, {
			"type":	"float",
			"name":	"size_47",
			"id":	"0x03000139"
		}, {
			"type":	"float",
			"name":	"size_48",
			"id":	"0x0300013A"
		}, {
			"type":	"float",
			"name":	"size_49",
			"id":	"0x0300013B"
		}, {
			"type":	"float",
			"name":	"size_5",
			"id":	"0x0300013C"
		}, {
			"type":	"float",
			"name":	"size_50",
			"id":	"0x0300013D"
		}, {
			"type":	"float",
			"name":	"size_51",
			"id":	"0x0300013E"
		}, {
			"type":	"float",
			"name":	"size_52",
			"id":	"0x0300013F"
		}, {
			"type":	"float",
			"name":	"size_53",
			"id":	"0x03000140"
		}, {
			"type":	"float",
			"name":	"size_54",
			"id":	"0x03000141"
		}, {
			"type":	"float",
			"name":	"size_55",
			"id":	"0x03000142"
		}, {
			"type":	"float",
			"name":	"size_56",
			"id":	"0x03000143"
		}, {
			"type":	"float",
			"name":	"size_57",
			"id":	"0x03000144"
		}, {
			"type":	"float",
			"name":	"size_58",
			"id":	"0x03000145"
		}, {
			"type":	"float",
			"name":	"size_59",
			"id":	"0x03000146"
		}, {
			"type":	"float",
			"name":	"size_6",
			"id":	"0x03000147"
		}, {
			"type":	"float",
			"name":	"size_60",
			"id":	"0x03000148"
		}, {
			"type":	"float",
			"name":	"size_61",
			"id":	"0x03000149"
		}, {
			"type":	"float",
			"name":	"size_62",
			"id":	"0x0300014A"
		}, {
			"type":	"float",
			"name":	"size_63",
			"id":	"0x0300014B"
		}, {
			"type":	"float",
			"name":	"size_64",
			"id":	"0x0300014C"
		}, {
			"type":	"float",
			"name":	"size_65",
			"id":	"0x0300014D"
		}, {
			"type":	"float",
			"name":	"size_66",
			"id":	"0x0300014E"
		}, {
			"type":	"float",
			"name":	"size_67",
			"id":	"0x0300014F"
		}, {
			"type":	"float",
			"name":	"size_68",
			"id":	"0x03000150"
		}, {
			"type":	"float",
			"name":	"size_69",
			"id":	"0x03000151"
		}, {
			"type":	"float",
			"name":	"size_7",
			"id":	"0x03000152"
		}, {
			"type":	"float",
			"name":	"size_70",
			"id":	"0x03000153"
		}, {
			"type":	"float",
			"name":	"size_71",
			"id":	"0x03000154"
		}, {
			"type":	"float",
			"name":	"size_72",
			"id":	"0x03000155"
		}, {
			"type":	"float",
			"name":	"size_73",
			"id":	"0x03000156"
		}, {
			"type":	"float",
			"name":	"size_74",
			"id":	"0x03000157"
		}, {
			"type":	"float",
			"name":	"size_75",
			"id":	"0x03000158"
		}, {
			"type":	"float",
			"name":	"size_76",
			"id":	"0x03000159"
		}, {
			"type":	"float",
			"name":	"size_77",
			"id":	"0x0300015A"
		}, {
			"type":	"float",
			"name":	"size_78",
			"id":	"0x0300015B"
		}, {
			"type":	"float",
			"name":	"size_79",
			"id":	"0x0300015C"
		}, {
			"type":	"float",
			"name":	"size_8",
			"id":	"0x0300015D"
		}, {
			"type":	"float",
			"name":	"size_80",
			"id":	"0x0300015E"
		}, {
			"type":	"float",
			"name":	"size_81",
			"id":	"0x0300015F"
		}, {
			"type":	"float",
			"name":	"size_82",
			"id":	"0x03000160"
		}, {
			"type":	"float",
			"name":	"size_83",
			"id":	"0x03000161"
		}, {
			"type":	"float",
			"name":	"size_84",
			"id":	"0x03000162"
		}, {
			"type":	"float",
			"name":	"size_85",
			"id":	"0x03000163"
		}, {
			"type":	"float",
			"name":	"size_86",
			"id":	"0x03000164"
		}, {
			"type":	"float",
			"name":	"size_87",
			"id":	"0x03000165"
		}, {
			"type":	"float",
			"name":	"size_88",
			"id":	"0x03000166"
		}, {
			"type":	"float",
			"name":	"size_89",
			"id":	"0x03000167"
		}, {
			"type":	"float",
			"name":	"size_9",
			"id":	"0x03000168"
		}, {
			"type":	"float",
			"name":	"size_90",
			"id":	"0x03000169"
		}, {
			"type":	"float",
			"name":	"size_91",
			"id":	"0x0300016A"
		}, {
			"type":	"float",
			"name":	"size_92",
			"id":	"0x0300016B"
		}, {
			"type":	"float",
			"name":	"size_93",
			"id":	"0x0300016C"
		}, {
			"type":	"float",
			"name":	"size_94",
			"id":	"0x0300016D"
		}, {
			"type":	"float",
			"name":	"size_95",
			"id":	"0x0300016E"
		}, {
			"type":	"float",
			"name":	"size_96",
			"id":	"0x0300016F"
		}, {
			"type":	"float",
			"name":	"size_97",
			"id":	"0x03000170"
		}, {
			"type":	"float",
			"name":	"size_98",
			"id":	"0x03000171"
		}, {
			"type":	"float",
			"name":	"size_99",
			"id":	"0x03000172"
		}, {
			"type":	"float",
			"name":	"size_text_1",
			"id":	"0x03000173"
		}, {
			"type":	"float",
			"name":	"size_text_10",
			"id":	"0x03000174"
		}, {
			"type":	"float",
			"name":	"size_text_100",
			"id":	"0x03000175"
		}, {
			"type":	"float",
			"name":	"size_text_11",
			"id":	"0x03000176"
		}, {
			"type":	"float",
			"name":	"size_text_12",
			"id":	"0x03000177"
		}, {
			"type":	"float",
			"name":	"size_text_13",
			"id":	"0x03000178"
		}, {
			"type":	"float",
			"name":	"size_text_14",
			"id":	"0x03000179"
		}, {
			"type":	"float",
			"name":	"size_text_15",
			"id":	"0x0300017A"
		}, {
			"type":	"float",
			"name":	"size_text_16",
			"id":	"0x0300017B"
		}, {
			"type":	"float",
			"name":	"size_text_17",
			"id":	"0x0300017C"
		}, {
			"type":	"float",
			"name":	"size_text_18",
			"id":	"0x0300017D"
		}, {
			"type":	"float",
			"name":	"size_text_19",
			"id":	"0x0300017E"
		}, {
			"type":	"float",
			"name":	"size_text_2",
			"id":	"0x0300017F"
		}, {
			"type":	"float",
			"name":	"size_text_20",
			"id":	"0x03000180"
		}, {
			"type":	"float",
			"name":	"size_text_21",
			"id":	"0x03000181"
		}, {
			"type":	"float",
			"name":	"size_text_22",
			"id":	"0x03000182"
		}, {
			"type":	"float",
			"name":	"size_text_23",
			"id":	"0x03000183"
		}, {
			"type":	"float",
			"name":	"size_text_24",
			"id":	"0x03000184"
		}, {
			"type":	"float",
			"name":	"size_text_25",
			"id":	"0x03000185"
		}, {
			"type":	"float",
			"name":	"size_text_26",
			"id":	"0x03000186"
		}, {
			"type":	"float",
			"name":	"size_text_27",
			"id":	"0x03000187"
		}, {
			"type":	"float",
			"name":	"size_text_28",
			"id":	"0x03000188"
		}, {
			"type":	"float",
			"name":	"size_text_29",
			"id":	"0x03000189"
		}, {
			"type":	"float",
			"name":	"size_text_3",
			"id":	"0x0300018A"
		}, {
			"type":	"float",
			"name":	"size_text_30",
			"id":	"0x0300018B"
		}, {
			"type":	"float",
			"name":	"size_text_31",
			"id":	"0x0300018C"
		}, {
			"type":	"float",
			"name":	"size_text_32",
			"id":	"0x0300018D"
		}, {
			"type":	"float",
			"name":	"size_text_33",
			"id":	"0x0300018E"
		}, {
			"type":	"float",
			"name":	"size_text_34",
			"id":	"0x0300018F"
		}, {
			"type":	"float",
			"name":	"size_text_35",
			"id":	"0x03000190"
		}, {
			"type":	"float",
			"name":	"size_text_36",
			"id":	"0x03000191"
		}, {
			"type":	"float",
			"name":	"size_text_37",
			"id":	"0x03000192"
		}, {
			"type":	"float",
			"name":	"size_text_38",
			"id":	"0x03000193"
		}, {
			"type":	"float",
			"name":	"size_text_39",
			"id":	"0x03000194"
		}, {
			"type":	"float",
			"name":	"size_text_4",
			"id":	"0x03000195"
		}, {
			"type":	"float",
			"name":	"size_text_40",
			"id":	"0x03000196"
		}, {
			"type":	"float",
			"name":	"size_text_41",
			"id":	"0x03000197"
		}, {
			"type":	"float",
			"name":	"size_text_42",
			"id":	"0x03000198"
		}, {
			"type":	"float",
			"name":	"size_text_43",
			"id":	"0x03000199"
		}, {
			"type":	"float",
			"name":	"size_text_44",
			"id":	"0x0300019A"
		}, {
			"type":	"float",
			"name":	"size_text_45",
			"id":	"0x0300019B"
		}, {
			"type":	"float",
			"name":	"size_text_46",
			"id":	"0x0300019C"
		}, {
			"type":	"float",
			"name":	"size_text_47",
			"id":	"0x0300019D"
		}, {
			"type":	"float",
			"name":	"size_text_48",
			"id":	"0x0300019E"
		}, {
			"type":	"float",
			"name":	"size_text_49",
			"id":	"0x0300019F"
		}, {
			"type":	"float",
			"name":	"size_text_5",
			"id":	"0x030001A0"
		}, {
			"type":	"float",
			"name":	"size_text_50",
			"id":	"0x030001A1"
		}, {
			"type":	"float",
			"name":	"size_text_51",
			"id":	"0x030001A2"
		}, {
			"type":	"float",
			"name":	"size_text_52",
			"id":	"0x030001A3"
		}, {
			"type":	"float",
			"name":	"size_text_53",
			"id":	"0x030001A4"
		}, {
			"type":	"float",
			"name":	"size_text_54",
			"id":	"0x030001A5"
		}, {
			"type":	"float",
			"name":	"size_text_55",
			"id":	"0x030001A6"
		}, {
			"type":	"float",
			"name":	"size_text_56",
			"id":	"0x030001A7"
		}, {
			"type":	"float",
			"name":	"size_text_57",
			"id":	"0x030001A8"
		}, {
			"type":	"float",
			"name":	"size_text_58",
			"id":	"0x030001A9"
		}, {
			"type":	"float",
			"name":	"size_text_59",
			"id":	"0x030001AA"
		}, {
			"type":	"float",
			"name":	"size_text_6",
			"id":	"0x030001AB"
		}, {
			"type":	"float",
			"name":	"size_text_60",
			"id":	"0x030001AC"
		}, {
			"type":	"float",
			"name":	"size_text_61",
			"id":	"0x030001AD"
		}, {
			"type":	"float",
			"name":	"size_text_62",
			"id":	"0x030001AE"
		}, {
			"type":	"float",
			"name":	"size_text_63",
			"id":	"0x030001AF"
		}, {
			"type":	"float",
			"name":	"size_text_64",
			"id":	"0x030001B0"
		}, {
			"type":	"float",
			"name":	"size_text_65",
			"id":	"0x030001B1"
		}, {
			"type":	"float",
			"name":	"size_text_66",
			"id":	"0x030001B2"
		}, {
			"type":	"float",
			"name":	"size_text_67",
			"id":	"0x030001B3"
		}, {
			"type":	"float",
			"name":	"size_text_68",
			"id":	"0x030001B4"
		}, {
			"type":	"float",
			"name":	"size_text_69",
			"id":	"0x030001B5"
		}, {
			"type":	"float",
			"name":	"size_text_7",
			"id":	"0x030001B6"
		}, {
			"type":	"float",
			"name":	"size_text_70",
			"id":	"0x030001B7"
		}, {
			"type":	"float",
			"name":	"size_text_71",
			"id":	"0x030001B8"
		}, {
			"type":	"float",
			"name":	"size_text_72",
			"id":	"0x030001B9"
		}, {
			"type":	"float",
			"name":	"size_text_73",
			"id":	"0x030001BA"
		}, {
			"type":	"float",
			"name":	"size_text_74",
			"id":	"0x030001BB"
		}, {
			"type":	"float",
			"name":	"size_text_75",
			"id":	"0x030001BC"
		}, {
			"type":	"float",
			"name":	"size_text_76",
			"id":	"0x030001BD"
		}, {
			"type":	"float",
			"name":	"size_text_77",
			"id":	"0x030001BE"
		}, {
			"type":	"float",
			"name":	"size_text_78",
			"id":	"0x030001BF"
		}, {
			"type":	"float",
			"name":	"size_text_79",
			"id":	"0x030001C0"
		}, {
			"type":	"float",
			"name":	"size_text_8",
			"id":	"0x030001C1"
		}, {
			"type":	"float",
			"name":	"size_text_80",
			"id":	"0x030001C2"
		}, {
			"type":	"float",
			"name":	"size_text_81",
			"id":	"0x030001C3"
		}, {
			"type":	"float",
			"name":	"size_text_82",
			"id":	"0x030001C4"
		}, {
			"type":	"float",
			"name":	"size_text_83",
			"id":	"0x030001C5"
		}, {
			"type":	"float",
			"name":	"size_text_84",
			"id":	"0x030001C6"
		}, {
			"type":	"float",
			"name":	"size_text_85",
			"id":	"0x030001C7"
		}, {
			"type":	"float",
			"name":	"size_text_86",
			"id":	"0x030001C8"
		}, {
			"type":	"float",
			"name":	"size_text_87",
			"id":	"0x030001C9"
		}, {
			"type":	"float",
			"name":	"size_text_88",
			"id":	"0x030001CA"
		}, {
			"type":	"float",
			"name":	"size_text_89",
			"id":	"0x030001CB"
		}, {
			"type":	"float",
			"name":	"size_text_9",
			"id":	"0x030001CC"
		}, {
			"type":	"float",
			"name":	"size_text_90",
			"id":	"0x030001CD"
		}, {
			"type":	"float",
			"name":	"size_text_91",
			"id":	"0x030001CE"
		}, {
			"type":	"float",
			"name":	"size_text_92",
			"id":	"0x030001CF"
		}, {
			"type":	"float",
			"name":	"size_text_93",
			"id":	"0x030001D0"
		}, {
			"type":	"float",
			"name":	"size_text_94",
			"id":	"0x030001D1"
		}, {
			"type":	"float",
			"name":	"size_text_95",
			"id":	"0x030001D2"
		}, {
			"type":	"float",
			"name":	"size_text_96",
			"id":	"0x030001D3"
		}, {
			"type":	"float",
			"name":	"size_text_97",
			"id":	"0x030001D4"
		}, {
			"type":	"float",
			"name":	"size_text_98",
			"id":	"0x030001D5"
		}, {
			"type":	"float",
			"name":	"size_text_99",
			"id":	"0x030001D6"
		}, {
			"type":	"media",
			"name":	"back",
			"id":	"0x030001D7"
		}, {
			"type":	"media",
			"name":	"common_bottom_sheet_close",
			"id":	"0x030001D8"
		}, {
			"type":	"media",
			"name":	"empty_charge",
			"id":	"0x030001D9"
		}, {
			"type":	"media",
			"name":	"empty_charge1",
			"id":	"0x030001DA"
		}, {
			"type":	"media",
			"name":	"fast",
			"id":	"0x030001DB"
		}, {
			"type":	"media",
			"name":	"imgUrl",
			"id":	"0x030001DC"
		}, {
			"type":	"media",
			"name":	"location",
			"id":	"0x030001DD"
		}, {
			"type":	"media",
			"name":	"pile_charging_in_progress",
			"id":	"0x030001DE"
		}, {
			"type":	"media",
			"name":	"pile_faults",
			"id":	"0x030001DF"
		}, {
			"type":	"media",
			"name":	"pile_idle",
			"id":	"0x030001E0"
		}, {
			"type":	"media",
			"name":	"search_delete",
			"id":	"0x030001E1"
		}, {
			"type":	"media",
			"name":	"search_icon",
			"id":	"0x030001E2"
		}, {
			"type":	"media",
			"name":	"Groundhog",
			"id":	"0x030001E3"
		}, {
			"type":	"media",
			"name":	"agreement",
			"id":	"0x030001E4"
		}, {
			"type":	"media",
			"name":	"certification",
			"id":	"0x030001E5"
		}, {
			"type":	"media",
			"name":	"feat",
			"id":	"0x030001E6"
		}, {
			"type":	"media",
			"name":	"icon_arrow_right",
			"id":	"0x030001E7"
		}, {
			"type":	"media",
			"name":	"message",
			"id":	"0x030001E8"
		}, {
			"type":	"media",
			"name":	"order",
			"id":	"0x030001E9"
		}, {
			"type":	"media",
			"name":	"person",
			"id":	"0x030001EA"
		}, {
			"type":	"media",
			"name":	"rule",
			"id":	"0x030001EB"
		}, {
			"type":	"media",
			"name":	"service",
			"id":	"0x030001EC"
		}, {
			"type":	"media",
			"name":	"home",
			"id":	"0x030001ED"
		}, {
			"type":	"media",
			"name":	"home_active",
			"id":	"0x030001EE"
		}, {
			"type":	"media",
			"name":	"my",
			"id":	"0x030001EF"
		}, {
			"type":	"media",
			"name":	"my_active",
			"id":	"0x030001F0"
		}, {
			"type":	"media",
			"name":	"rect",
			"id":	"0x030001F1"
		}, {
			"type":	"media",
			"name":	"scan",
			"id":	"0x030001F2"
		}, {
			"type":	"media",
			"name":	"scan_active",
			"id":	"0x030001F3"
		}, {
			"type":	"string",
			"name":	"visit_store_baidu_map",
			"id":	"0x030001F4"
		}, {
			"type":	"string",
			"name":	"visit_store_install_maps_first",
			"id":	"0x030001F5"
		}, {
			"type":	"string",
			"name":	"visit_store_map",
			"id":	"0x030001F6"
		}, {
			"type":	"string",
			"name":	"visit_store_petal_map",
			"id":	"0x030001F7"
		}]
}
{
  "apiType": "stageMode",
  "buildOption": {
  },
  "buildOptionSet": [
    {
      "name": "release",
      "arkOptions": {
        "obfuscation": {
          "ruleOptions": {
            "enable": false,
            "files": [
              "./obfuscation-rules.txt"
            ]
          },
          "consumerFiles": [
            "./consumer-rules.txt"
          ]
        }
      },
    },
  ],
  "targets": [
    {
      "name": "default"
    },
    {
      "name": "ohosTest"
    }
  ]
}
# Define project specific obfuscation rules here.
# You can include the obfuscation configuration files in the current module's build-profile.json5.
#
# For more details, see
#   https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/source-obfuscation-V5
# Obfuscation options:
# -disable-obfuscation: disable all obfuscations
# -enable-property-obfuscation: obfuscate the property names
# -enable-toplevel-obfuscation: obfuscate the names in the global scope
# -compact: remove unnecessary blank spaces and all line feeds
# -remove-log: remove all console.* statements
# -print-namecache: print the name cache that contains the mapping from the old names to new names
# -apply-namecache: reuse the given cache file
# Keep options:
# -keep-property-name: specifies property names that you want to keep
# -keep-global-name: specifies names that you want to keep in the global scope
-enable-property-obfuscation
-enable-toplevel-obfuscation
-enable-filename-obfuscation
-enable-export-obfuscation
import {TAG} from '../../Constant';
import Core from '../../core.js';
export default class SysTestKit {
  static delegator = null;
  static systemTime = null;
  static workerPort = null;
  constructor() {
    this.id = 'sysTestKit';
    this.index = 0;
  }
  static getDescribeName() {
    return Core.getInstance().getDefaultService('suite').getCurrentRunningSuite().description;
  }
  static getItName() {
    return Core.getInstance().getDefaultService('spec').getCurrentRunningSpec().description;
  }
  static getItAttribute() {
    return Core.getInstance().getDefaultService('spec').getCurrentRunningSpec().fi;
  }
  static actionStart(tag) {
    console.info(`${TAG}${JSON.stringify(tag)}`);
    var message = '\n' + 'OHOS_REPORT_ACTIONSTART: ' + JSON.stringify(tag) + '\n';
    SysTestKit.print(message);
    console.info(`${TAG}${JSON.stringify(tag)} actionStart print success`);
  }
  static actionEnd(tag) {
    console.info(`${TAG}${JSON.stringify(tag)}`);
    var message = '\n' + 'OHOS_REPORT_ACTIONEND: ' + JSON.stringify(tag) + '\n';
    SysTestKit.print(message);
    console.info(`${TAG}${JSON.stringify(tag)}  actionEnd print success`);
  }
  static async existKeyword(keyword, timeout) {
    let reg = new RegExp(/^[a-zA-Z0-9]{1,}$/);
    if (!reg.test(keyword)) {
      throw new Error('keyword must contain more than one string, and only letters and numbers are supported.');
    }
    timeout = timeout || 4;
    let searchResult = false;
    let cmd = 'hilog -x | grep -i \'' + keyword + '\' | wc -l';
    await executePromise(cmd, timeout).then((data) => {
      searchResult = data;
    });
    return searchResult;
  }
  static async print(message) {
    if ('printSync' in SysTestKit.delegator) {
      console.info(`${TAG}printSync called ...`);
      SysTestKit.delegator.printSync(message);
    } else {
      await SysTestKit.delegator.print(message);
    }
  }
  static async getRealTime() {
    let currentTime = new Date().getTime();
    if (SysTestKit.systemTime !== null && SysTestKit.systemTime !== undefined) {
      await SysTestKit.systemTime.getRealTime().then((time) => {
        console.info(`${TAG}systemTime.getRealTime success data: ${JSON.stringify(time)}`);
        currentTime = time;
      }).catch((error) => {
        console.error(`${TAG}failed to systemTime.getRealTime because ${JSON.stringify(error)}`);
      });
    }
    return currentTime;
  }
}
function executePromise(cmd, timeout) {
  return new Promise((resolve, reject) => {
    SysTestKit.delegator.executeShellCommand(cmd, timeout,
      (error, data) => {
        console.info(`${TAG}existKeyword CallBack: err : ${JSON.stringify(error)}`);
        console.info(`${TAG}existKeyword CallBack: data : ${JSON.stringify(data)}`);
        resolve(parseInt(data.stdResult) > 3 ? true : false);
      });
  });
}
string 0V 0x03000000
string 180KW 0x03000001
string EntryAbility_desc 0x02000004
string EntryAbility_label 0x02000005
string agreement 0x03000002
string app_name 0x02000000
string certification 0x03000003
string charge 0x03000004
string charge_name 0x03000005
string charging_in_progress 0x03000006
string company_name 0x03000007
string company_website 0x03000008
string completed 0x03000009
string end_time 0x0300000a
string existing_account 0x0300000b
string fast_charge 0x0300000c
string faults 0x0300000d
string feat 0x0300000e
string get_code 0x0300000f
string idle 0x03000010
string loading 0x03000011
string location_permission_reason 0x03000012
string login 0x03000013
string login_in 0x03000014
string message 0x03000015
string mine 0x03000016
string module_desc 0x02000006
string national_standard 0x03000017
string no_account 0x03000018
string no_data 0x03000019
string order 0x0300001a
string order_status 0x0300001b
string page_show 0x0200000c
string password_length 0x0300001c
string permission_approximately_location 0x0300001d
string person 0x0300001e
string pile_code 0x0300001f
string pile_number 0x03000020
string please_enter_the_company_name 0x03000021
string please_enter_the_company_website 0x03000022
string please_enter_the_password 0x03000023
string please_enter_the_username 0x03000024
string please_enter_the_verification_code 0x03000025
string please_select_the_tenant 0x03000026
string price 0x03000027
string register 0x03000028
string register_immediately 0x03000029
string rule 0x0300002a
string scan 0x0300002b
string search 0x0300002c
string search_content 0x0300002d
string selection_of_charging_pile 0x0300002e
string service 0x0300002f
string start_time 0x03000030
string station_name 0x03000031
string stop_charge 0x03000032
string there_is_no_more_data 0x03000033
string verification_code 0x03000034
string visit_store_baidu_map 0x030001f4
string visit_store_install_maps_first 0x030001f5
string visit_store_map 0x030001f6
string visit_store_petal_map 0x030001f7
string welcome_login_groundhog 0x03000035
string welcome_register_groundhog 0x03000036
color color_009688 0x03000037
color color_0165B8 0x03000038
color color_0165b8 0x03000039
color color_0aa671 0x0300003a
color color_182431 0x0300003b
color color_666 0x0300003c
color color_80000000 0x0300003d
color color_898e92 0x0300003e
color color_999 0x0300003f
color color_F44336 0x03000040
color color_adadb3 0x03000041
color color_d68751 0x03000042
color color_efefef 0x03000043
color color_f0f2f4 0x03000044
color color_f5f5f5 0x03000045
color color_fff 0x03000046
color start_window_background 0x02000007
float page_text_font_size 0x02000008
float size_1 0x03000047
float size_10 0x03000048
float size_100 0x03000049
float size_101 0x0300004a
float size_102 0x0300004b
float size_103 0x0300004c
float size_104 0x0300004d
float size_105 0x0300004e
float size_106 0x0300004f
float size_107 0x03000050
float size_108 0x03000051
float size_109 0x03000052
float size_11 0x03000053
float size_110 0x03000054
float size_111 0x03000055
float size_112 0x03000056
float size_113 0x03000057
float size_114 0x03000058
float size_115 0x03000059
float size_116 0x0300005a
float size_117 0x0300005b
float size_118 0x0300005c
float size_119 0x0300005d
float size_12 0x0300005e
float size_120 0x0300005f
float size_121 0x03000060
float size_122 0x03000061
float size_123 0x03000062
float size_124 0x03000063
float size_125 0x03000064
float size_126 0x03000065
float size_127 0x03000066
float size_128 0x03000067
float size_129 0x03000068
float size_13 0x03000069
float size_130 0x0300006a
float size_131 0x0300006b
float size_132 0x0300006c
float size_133 0x0300006d
float size_134 0x0300006e
float size_135 0x0300006f
float size_136 0x03000070
float size_137 0x03000071
float size_138 0x03000072
float size_139 0x03000073
float size_14 0x03000074
float size_140 0x03000075
float size_141 0x03000076
float size_142 0x03000077
float size_143 0x03000078
float size_144 0x03000079
float size_145 0x0300007a
float size_146 0x0300007b
float size_147 0x0300007c
float size_148 0x0300007d
float size_149 0x0300007e
float size_15 0x0300007f
float size_150 0x03000080
float size_151 0x03000081
float size_152 0x03000082
float size_153 0x03000083
float size_154 0x03000084
float size_155 0x03000085
float size_156 0x03000086
float size_157 0x03000087
float size_158 0x03000088
float size_159 0x03000089
float size_16 0x0300008a
float size_160 0x0300008b
float size_161 0x0300008c
float size_162 0x0300008d
float size_163 0x0300008e
float size_164 0x0300008f
float size_165 0x03000090
float size_166 0x03000091
float size_167 0x03000092
float size_168 0x03000093
float size_169 0x03000094
float size_17 0x03000095
float size_170 0x03000096
float size_171 0x03000097
float size_172 0x03000098
float size_173 0x03000099
float size_174 0x0300009a
float size_175 0x0300009b
float size_176 0x0300009c
float size_177 0x0300009d
float size_178 0x0300009e
float size_179 0x0300009f
float size_18 0x030000a0
float size_180 0x030000a1
float size_181 0x030000a2
float size_182 0x030000a3
float size_183 0x030000a4
float size_184 0x030000a5
float size_185 0x030000a6
float size_186 0x030000a7
float size_187 0x030000a8
float size_188 0x030000a9
float size_189 0x030000aa
float size_19 0x030000ab
float size_190 0x030000ac
float size_191 0x030000ad
float size_192 0x030000ae
float size_193 0x030000af
float size_194 0x030000b0
float size_195 0x030000b1
float size_196 0x030000b2
float size_197 0x030000b3
float size_198 0x030000b4
float size_199 0x030000b5
float size_2 0x030000b6
float size_20 0x030000b7
float size_200 0x030000b8
float size_201 0x030000b9
float size_202 0x030000ba
float size_203 0x030000bb
float size_204 0x030000bc
float size_205 0x030000bd
float size_206 0x030000be
float size_207 0x030000bf
float size_208 0x030000c0
float size_209 0x030000c1
float size_21 0x030000c2
float size_210 0x030000c3
float size_211 0x030000c4
float size_212 0x030000c5
float size_213 0x030000c6
float size_214 0x030000c7
float size_215 0x030000c8
float size_216 0x030000c9
float size_217 0x030000ca
float size_218 0x030000cb
float size_219 0x030000cc
float size_22 0x030000cd
float size_220 0x030000ce
float size_221 0x030000cf
float size_222 0x030000d0
float size_223 0x030000d1
float size_224 0x030000d2
float size_225 0x030000d3
float size_226 0x030000d4
float size_227 0x030000d5
float size_228 0x030000d6
float size_229 0x030000d7
float size_23 0x030000d8
float size_230 0x030000d9
float size_231 0x030000da
float size_232 0x030000db
float size_233 0x030000dc
float size_234 0x030000dd
float size_235 0x030000de
float size_236 0x030000df
float size_237 0x030000e0
float size_238 0x030000e1
float size_239 0x030000e2
float size_24 0x030000e3
float size_240 0x030000e4
float size_241 0x030000e5
float size_242 0x030000e6
float size_243 0x030000e7
float size_244 0x030000e8
float size_245 0x030000e9
float size_246 0x030000ea
float size_247 0x030000eb
float size_248 0x030000ec
float size_249 0x030000ed
float size_25 0x030000ee
float size_250 0x030000ef
float size_251 0x030000f0
float size_252 0x030000f1
float size_253 0x030000f2
float size_254 0x030000f3
float size_255 0x030000f4
float size_256 0x030000f5
float size_257 0x030000f6
float size_258 0x030000f7
float size_259 0x030000f8
float size_26 0x030000f9
float size_260 0x030000fa
float size_261 0x030000fb
float size_262 0x030000fc
float size_263 0x030000fd
float size_264 0x030000fe
float size_265 0x030000ff
float size_266 0x03000100
float size_267 0x03000101
float size_268 0x03000102
float size_269 0x03000103
float size_27 0x03000104
float size_270 0x03000105
float size_271 0x03000106
float size_272 0x03000107
float size_273 0x03000108
float size_274 0x03000109
float size_275 0x0300010a
float size_276 0x0300010b
float size_277 0x0300010c
float size_278 0x0300010d
float size_279 0x0300010e
float size_28 0x0300010f
float size_280 0x03000110
float size_281 0x03000111
float size_282 0x03000112
float size_283 0x03000113
float size_284 0x03000114
float size_285 0x03000115
float size_286 0x03000116
float size_287 0x03000117
float size_288 0x03000118
float size_289 0x03000119
float size_29 0x0300011a
float size_290 0x0300011b
float size_291 0x0300011c
float size_292 0x0300011d
float size_293 0x0300011e
float size_294 0x0300011f
float size_295 0x03000120
float size_296 0x03000121
float size_297 0x03000122
float size_298 0x03000123
float size_299 0x03000124
float size_3 0x03000125
float size_30 0x03000126
float size_300 0x03000127
float size_31 0x03000128
float size_32 0x03000129
float size_33 0x0300012a
float size_34 0x0300012b
float size_35 0x0300012c
float size_36 0x0300012d
float size_37 0x0300012e
float size_38 0x0300012f
float size_39 0x03000130
float size_4 0x03000131
float size_40 0x03000132
float size_41 0x03000133
float size_42 0x03000134
float size_43 0x03000135
float size_44 0x03000136
float size_45 0x03000137
float size_46 0x03000138
float size_47 0x03000139
float size_48 0x0300013a
float size_49 0x0300013b
float size_5 0x0300013c
float size_50 0x0300013d
float size_51 0x0300013e
float size_52 0x0300013f
float size_53 0x03000140
float size_54 0x03000141
float size_55 0x03000142
float size_56 0x03000143
float size_57 0x03000144
float size_58 0x03000145
float size_59 0x03000146
float size_6 0x03000147
float size_60 0x03000148
float size_61 0x03000149
float size_62 0x0300014a
float size_63 0x0300014b
float size_64 0x0300014c
float size_65 0x0300014d
float size_66 0x0300014e
float size_67 0x0300014f
float size_68 0x03000150
float size_69 0x03000151
float size_7 0x03000152
float size_70 0x03000153
float size_71 0x03000154
float size_72 0x03000155
float size_73 0x03000156
float size_74 0x03000157
float size_75 0x03000158
float size_76 0x03000159
float size_77 0x0300015a
float size_78 0x0300015b
float size_79 0x0300015c
float size_8 0x0300015d
float size_80 0x0300015e
float size_81 0x0300015f
float size_82 0x03000160
float size_83 0x03000161
float size_84 0x03000162
float size_85 0x03000163
float size_86 0x03000164
float size_87 0x03000165
float size_88 0x03000166
float size_89 0x03000167
float size_9 0x03000168
float size_90 0x03000169
float size_91 0x0300016a
float size_92 0x0300016b
float size_93 0x0300016c
float size_94 0x0300016d
float size_95 0x0300016e
float size_96 0x0300016f
float size_97 0x03000170
float size_98 0x03000171
float size_99 0x03000172
float size_text_1 0x03000173
float size_text_10 0x03000174
float size_text_100 0x03000175
float size_text_11 0x03000176
float size_text_12 0x03000177
float size_text_13 0x03000178
float size_text_14 0x03000179
float size_text_15 0x0300017a
float size_text_16 0x0300017b
float size_text_17 0x0300017c
float size_text_18 0x0300017d
float size_text_19 0x0300017e
float size_text_2 0x0300017f
float size_text_20 0x03000180
float size_text_21 0x03000181
float size_text_22 0x03000182
float size_text_23 0x03000183
float size_text_24 0x03000184
float size_text_25 0x03000185
float size_text_26 0x03000186
float size_text_27 0x03000187
float size_text_28 0x03000188
float size_text_29 0x03000189
float size_text_3 0x0300018a
float size_text_30 0x0300018b
float size_text_31 0x0300018c
float size_text_32 0x0300018d
float size_text_33 0x0300018e
float size_text_34 0x0300018f
float size_text_35 0x03000190
float size_text_36 0x03000191
float size_text_37 0x03000192
float size_text_38 0x03000193
float size_text_39 0x03000194
float size_text_4 0x03000195
float size_text_40 0x03000196
float size_text_41 0x03000197
float size_text_42 0x03000198
float size_text_43 0x03000199
float size_text_44 0x0300019a
float size_text_45 0x0300019b
float size_text_46 0x0300019c
float size_text_47 0x0300019d
float size_text_48 0x0300019e
float size_text_49 0x0300019f
float size_text_5 0x030001a0
float size_text_50 0x030001a1
float size_text_51 0x030001a2
float size_text_52 0x030001a3
float size_text_53 0x030001a4
float size_text_54 0x030001a5
float size_text_55 0x030001a6
float size_text_56 0x030001a7
float size_text_57 0x030001a8
float size_text_58 0x030001a9
float size_text_59 0x030001aa
float size_text_6 0x030001ab
float size_text_60 0x030001ac
float size_text_61 0x030001ad
float size_text_62 0x030001ae
float size_text_63 0x030001af
float size_text_64 0x030001b0
float size_text_65 0x030001b1
float size_text_66 0x030001b2
float size_text_67 0x030001b3
float size_text_68 0x030001b4
float size_text_69 0x030001b5
float size_text_7 0x030001b6
float size_text_70 0x030001b7
float size_text_71 0x030001b8
float size_text_72 0x030001b9
float size_text_73 0x030001ba
float size_text_74 0x030001bb
float size_text_75 0x030001bc
float size_text_76 0x030001bd
float size_text_77 0x030001be
float size_text_78 0x030001bf
float size_text_79 0x030001c0
float size_text_8 0x030001c1
float size_text_80 0x030001c2
float size_text_81 0x030001c3
float size_text_82 0x030001c4
float size_text_83 0x030001c5
float size_text_84 0x030001c6
float size_text_85 0x030001c7
float size_text_86 0x030001c8
float size_text_87 0x030001c9
float size_text_88 0x030001ca
float size_text_89 0x030001cb
float size_text_9 0x030001cc
float size_text_90 0x030001cd
float size_text_91 0x030001ce
float size_text_92 0x030001cf
float size_text_93 0x030001d0
float size_text_94 0x030001d1
float size_text_95 0x030001d2
float size_text_96 0x030001d3
float size_text_97 0x030001d4
float size_text_98 0x030001d5
float size_text_99 0x030001d6
media Groundhog 0x030001e3
media agreement 0x030001e4
media back 0x030001d7
media background 0x02000001
media certification 0x030001e5
media common_bottom_sheet_close 0x030001d8
media empty_charge 0x030001d9
media empty_charge1 0x030001da
media fast 0x030001db
media feat 0x030001e6
media foreground 0x02000002
media home 0x030001ed
media home_active 0x030001ee
media icon_arrow_right 0x030001e7
media imgUrl 0x030001dc
media layered_image 0x02000003
media location 0x030001dd
media message 0x030001e8
media my 0x030001ef
media my_active 0x030001f0
media order 0x030001e9
media person 0x030001ea
media pile_charging_in_progress 0x030001de
media pile_faults 0x030001df
media pile_idle 0x030001e0
media rect 0x030001f1
media rule 0x030001eb
media scan 0x030001f2
media scan_active 0x030001f3
media search_delete 0x030001e1
media search_icon 0x030001e2
media service 0x030001ec
media startIcon 0x02000009
profile backup_config 0x0200000a
profile main_pages 0x0200000b
export * from './src/main/ets/common'
export * from './src/main/ets/http'
export * from './src/main/ets/widgets'
export * from './src/main/ets/manager'
export * from './src/main/ets/utils'
export { CommonDataSource } from './src/main/ets/model/CommonDataSource'
export * from './src/main/ets/location'
{
  "name": "@tbs/common",
  "version": "1.0.0",
  "description": "Please describe the basic information.",
  "main": "Index.ets",
  "author": "",
  "license": "Apache-2.0",
  "dependencies": {}
}
{
	"app": {
		"bundleName": "com.example.tbschargeharmonyos",
		"debug": true,
		"versionCode": 1000000,
		"versionName": "1.0.0",
		"minAPIVersion": 50004016,
		"targetAPIVersion": 50004016,
		"apiReleaseType": "Release",
		"compileSdkVersion": "5.0.4.150",
		"compileSdkType": "HarmonyOS",
		"appEnvironments": [],
		"bundleType": "app",
		"buildMode": "debug"
	},
	"module": {
		"name": "common",
		"type": "har",
		"deviceTypes": [
			"default",
			"tablet",
			"2in1"
		],
		"packageName": "@tbs/common",
		"installationFree": false
	}
}
{
	"layered-image":	{
		"background":	"$media:33554433",
		"foreground":	"$media:33554434"
	}
}
{
  "allowToBackupRestore": true
}
{
  "src": [
    "home/HomePage",
    "login/LoginPage",
    "register/RegisterPage"
  ]
}
